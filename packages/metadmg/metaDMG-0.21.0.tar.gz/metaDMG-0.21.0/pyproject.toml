[tool.poetry]
name = "metaDMG"
version = "0.21.0"
description = "metaDMG: Estimating ancient damage in (meta)genomic DNA rapidly"
authors = ["Christian Michelsen <christianmichelsen@gmail.com>"]
license = "MIT"
readme = "README.md"
# homepage = "https://pendulum.eustace.io"
repository = "https://github.com/metaDMG/metaDMG/"
packages = [{ include = "metaDMG", from = "src" }]

# poetry install
# poetry install --without dev
[tool.poetry.dependencies]
python = ">=3.9,<3.11" # 3.11 due to numba
typer = "^0.4.0"
click-help-colors = "^0.9.1"
PyYAML = "^6.0"
pandas = "^1.4.1"
scipy = "^1.8.0"
pyarrow = "^7.0.0"
# scipy = { version = "^1.7.3", python = ">=3.9,<3.11" }

# Fit related packages:
logger-tt = {version = "^1.7.0", optional = true}
iminuit = {version = "^2.10.0", optional = true}
numpyro = {version = "^0.9.1", optional = true}
joblib = {version = "^1.1.0", optional = true}
psutil = {version = "^5.9.0", optional = true}
numba = {version = "^0.55.1", optional = true}

# Viz related packages:
matplotlib = {version = "^3.5.1", optional = true}
plotly = {version = "^5.6.0", optional = true}
dash = {version = "^2.3.0", extras = ["diskcache"], optional = true}
dash-bootstrap-components = {version = "^1.0.3", optional = true}
orjson = {version = "^3.6.7", optional = true}

# docs related packages:
Sphinx = {version = "^4.4.0", optional = true}
sphinx-click = {version = "^3.1.0", optional = true}
sphinx-autodoc-typehints = {version = "^1.17.0", optional = true}
sphinx-copybutton = {version = "^0.5.0", optional = true}
sphinx-book-theme = {version = "^0.2.0", optional = true}
sphinxcontrib-napoleon = {version = "^0.7", optional = true}
myst-parser = {version = "^0.17.0", optional = true}
autodocsumm = {version = "^0.2.7", optional = true}

# new packages that needs sorting


# extras:
[tool.poetry.extras]

# poetry install --extras fit
fit = [
    "logger-tt",
    "iminuit",
    "numpyro",
    "joblib",
    "psutil",
    "numba",
]

# poetry install --extras fit
viz = [
    "matplotlib",
    "plotly",
    "dash",
    "dash-bootstrap-components",
    "orjson",
    # "diskcache",
]

# poetry install --extras all
all = [
    "logger-tt",
    "iminuit",
    "numpyro",
    "joblib",
    "psutil",
    "numba",
    "matplotlib",
    "plotly",
    "dash",
    "dash-bootstrap-components",
    "orjson",
    # "diskcache",
]

# poetry install --extras docs
docs = [
    "Sphinx",
    "sphinx-click",
    "sphinx-autodoc-typehints",
    "sphinx-copybutton",
    "sphinx-book-theme",
    "sphinxcontrib-napoleon",
    "myst-parser",
    "autodocsumm",
]



[tool.poetry.dev-dependencies]
pylint = "^2.12.2"
flake8 = "^4.0.1"
black = "^22.1.0"
ipykernel = "^6.8.0"
nbformat = "^5.1.3"
python-semantic-release = "^7.24.0"
pytest = "^6.2.5"
pytest-cov = "^3.0.0"
notebook = "^6.4.8"



# [tool.poetry.build]
# generate-setup-file = false
# script = "build.py"


[build-system]
requires = ["poetry-core>=1.1.0a6"]
# requires = ["setuptools", "poetry_core>=1.0"]

build-backend = "poetry.core.masonry.api"

# [build-system]
# requires = ["poetry-core>=1.0.0"]
# build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
metaDMG = "metaDMG.cli.cli:cli_main"

[tool.semantic_release]
version_variable = "pyproject.toml:version" # version location
branch = "main"                             # branch to make releases of
changelog_file = "CHANGELOG.md"             # changelog file
build_command = "pip install poetry && poetry build"  # build dists
dist_path = "dist/"                         # where to put dists
upload_to_pypi = false                      # don't auto-upload to PyPI
remove_dist = false                         # don't remove dists
major_on_zero = false                       # keeps the major version at 0


# [tool.poe.tasks]
# clean = """
# # Multiline commands including comments work too. Unescaped whitespace is ignored.
# rm -rf .coverage
#        .mypy_cache
#        .pytest_cache
#        dist
#        ./**/__pycache__
# """
# format = "black ."  # strings are interpreted as commands by default
# _build = "poetry build"
# _publish = "poetry publish"
# version = { "shell" = "poetry version $(git describe --tags --abbrev=0)" }
# build = ["version", "_build"]
# release = ["clean", "format", "build", "_publish"]