
import sys
from glob import glob
what =  sys.argv[1]
dataset =  sys.argv[2]

'''
this is a copy of 1c20 to see if we can quickly run it
and share the model files...
'''
`export PYTHONHASHSEED=31337


fnames = [
    'splash_human_RRI_',
    'paris_human_RRI_',
    'full_',
    'full_human_',
    'paris_human_RBPs_',
    'paris_splash_human_RRI_',
    'paris_mouse_RRI_']



if dataset == 'all':
    for target in fnames:
        `shellpy cherry1C20.spy {what} {target}
    exit()


# ok lets make some DATA
if what == 'makedata':
    print(f'makedata {dataset}')
    `mkdir -p testb71/data/`
    # TODO change imoprt blabla to biofilm.examples.cherriload
    import examples.cherriload  as cl
    p = "~/data/cherry/"+dataset
    d1 = p+'neg.csv'
    d2 = p+"pos.csv"
    cl.convert(d1,d2,f'testb71/data/{dataset}', graphfeatures=True)

'''
1. load data
we can do it in a fancy way, by providing a python file that has a
read(path) function. as demonstrated in examples/cherriload.py
'''
loaddata = f'--infile testb71/data/{dataset}'



if what == 'selectft':
    `mkdir -p testb71/features`
    loaddata += ' --subsample 20000 '
    out = f'testb71/features/{dataset}'
    `python -m biofilm.biofilm-features {loaddata} --method forest --out {out}


'''
2. LETZ OPTYIMIZE
'''
if what == 'optimize':
    `mkdir -p testb71/optimized`
    loaddata += f'--folds 0 --subsample 10000 --featurefile testb71/features/{dataset}'
    # TODO python -m biofilm.biofilm-optimize6 should work
    #python biofilm/biofilm-optimize6.py  @(loaddata)\
    out  = f'testb71/optimized/{dataset}'
    z = `python -m biofilm.biofilm-optimize6 {loaddata} --out {out}  --preprocess True \
            --n_jobs 30 --time 600
    print(z)




'''
4. plot performance (so far)
'''
if what == 'plot1':
    for f in glob(f'testb71/optimized/*.csv'):
        `python biofilm/biofilm-out.py --infiles  {f}`

'''
5. do crossval for all models
      use all 5 models to crossvalidate over all instances to compare them...
'''


if what == 'runcv':
    loaddata += f'--foldselect {{1}} --featurefile testb71/features/{dataset}'
    `mkdir -p testb71/crossval`
    py = `which python`
    seq = `seq 0 4`
    `parallel -j 5 --joblog delme.log $(which python) -m biofilm/biofilm-cv {loaddata}\
            --model testb71/optimized/{dataset}.model --out testb71/crossval/{dataset}_{{1}}.cv ::: $(seq 0 4)`







"""
if what == "refit":
    mkdir -p testb71/refit
    loaddata += f'--featurefile testb71/features/{dataset}'.split()
    python -m biofilm.biofilm-cv --folds 0 @(loaddata)\
        --model @('testb71/optimized/%s.model' % dataset)\
        --out @('testb71/refit/%s.model' % dataset)


if what == "crossmodel":
    '''
    1.    load the {dataset}
    2.    run the model against it
    '''
    mkdir -p testb71/crossmodel
    for model in fnames:
        loaddata_mod = loaddata+f'--featurefile testb71/features/{model}'.split()
        print(loaddata_mod)
        if model != dataset:
            python biofilm/util/out.py --folds 0 @(loaddata_mod)\
            --model @("testb71/refit/%s.model.model" % model) --out @('testb71/crossmodel/%s%s' % (model,dataset))




if what == 'trueplot':
    '''
    this is a leftover from the original scropt;
    i might want t o make it run with this in the future
    '''
    import matplotlib
    matplotlib.use('module://matplotlib-sixel')
    import matplotlib.pyplot as plt
    import dill
    import pprint
    loadfile = lambda filename: dill.load(open(filename, 'rb'))
    for i in range(0,5):
        print(f"########### {i} ############")
        filez =  glob(f'{folder}/{i}*.last.csv')
        python biofilm/biofilm-out.py --infiles @(filez)
        d = loadfile(filez[0].split("_")[0]) # will load the model file
        print("self-score: ",d['score'])
        print("PARAMETERS")
        pprint.pprint(d['params'])
        if 'scorehistory' in d:
            plt.plot(d['scorehistory'])
            plt.show(); plt.close()

"""
