# coding: utf-8

"""
    BIMData API

    BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: support@bimdata.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from bimdata_api_client.configuration import Configuration


class DetailedExtensions(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'topic_labels': 'list[Label]',
        'topic_types': 'list[TopicType]',
        'topic_statuses': 'list[TopicStatus]',
        'priorities': 'list[Priority]',
        'stages': 'list[Stage]'
    }

    attribute_map = {
        'topic_labels': 'topic_labels',
        'topic_types': 'topic_types',
        'topic_statuses': 'topic_statuses',
        'priorities': 'priorities',
        'stages': 'stages'
    }

    def __init__(self, topic_labels=None, topic_types=None, topic_statuses=None, priorities=None, stages=None, local_vars_configuration=None):  # noqa: E501
        """DetailedExtensions - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._topic_labels = None
        self._topic_types = None
        self._topic_statuses = None
        self._priorities = None
        self._stages = None
        self.discriminator = None

        if topic_labels is not None:
            self.topic_labels = topic_labels
        if topic_types is not None:
            self.topic_types = topic_types
        if topic_statuses is not None:
            self.topic_statuses = topic_statuses
        if priorities is not None:
            self.priorities = priorities
        if stages is not None:
            self.stages = stages

    @property
    def topic_labels(self):
        """Gets the topic_labels of this DetailedExtensions.  # noqa: E501


        :return: The topic_labels of this DetailedExtensions.  # noqa: E501
        :rtype: list[Label]
        """
        return self._topic_labels

    @topic_labels.setter
    def topic_labels(self, topic_labels):
        """Sets the topic_labels of this DetailedExtensions.


        :param topic_labels: The topic_labels of this DetailedExtensions.  # noqa: E501
        :type: list[Label]
        """

        self._topic_labels = topic_labels

    @property
    def topic_types(self):
        """Gets the topic_types of this DetailedExtensions.  # noqa: E501


        :return: The topic_types of this DetailedExtensions.  # noqa: E501
        :rtype: list[TopicType]
        """
        return self._topic_types

    @topic_types.setter
    def topic_types(self, topic_types):
        """Sets the topic_types of this DetailedExtensions.


        :param topic_types: The topic_types of this DetailedExtensions.  # noqa: E501
        :type: list[TopicType]
        """

        self._topic_types = topic_types

    @property
    def topic_statuses(self):
        """Gets the topic_statuses of this DetailedExtensions.  # noqa: E501


        :return: The topic_statuses of this DetailedExtensions.  # noqa: E501
        :rtype: list[TopicStatus]
        """
        return self._topic_statuses

    @topic_statuses.setter
    def topic_statuses(self, topic_statuses):
        """Sets the topic_statuses of this DetailedExtensions.


        :param topic_statuses: The topic_statuses of this DetailedExtensions.  # noqa: E501
        :type: list[TopicStatus]
        """

        self._topic_statuses = topic_statuses

    @property
    def priorities(self):
        """Gets the priorities of this DetailedExtensions.  # noqa: E501


        :return: The priorities of this DetailedExtensions.  # noqa: E501
        :rtype: list[Priority]
        """
        return self._priorities

    @priorities.setter
    def priorities(self, priorities):
        """Sets the priorities of this DetailedExtensions.


        :param priorities: The priorities of this DetailedExtensions.  # noqa: E501
        :type: list[Priority]
        """

        self._priorities = priorities

    @property
    def stages(self):
        """Gets the stages of this DetailedExtensions.  # noqa: E501


        :return: The stages of this DetailedExtensions.  # noqa: E501
        :rtype: list[Stage]
        """
        return self._stages

    @stages.setter
    def stages(self, stages):
        """Sets the stages of this DetailedExtensions.


        :param stages: The stages of this DetailedExtensions.  # noqa: E501
        :type: list[Stage]
        """

        self._stages = stages

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DetailedExtensions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DetailedExtensions):
            return True

        return self.to_dict() != other.to_dict()
