# coding: utf-8

"""
    BIMData API

    BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: support@bimdata.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from bimdata_api_client.configuration import Configuration


class Size(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'is_unsupervised': 'bool',
        'managed_by': 'str',
        'role': 'int',
        'total_size': 'int',
        'smart_data_size': 'int',
        'total_size_available': 'int',
        'smart_data_size_available': 'int',
        'remaining_total_size': 'int',
        'remaining_smart_data_size': 'int',
        'remaining_total_size_percent': 'int',
        'remaining_smart_data_size_percent': 'int'
    }

    attribute_map = {
        'is_unsupervised': 'is_unsupervised',
        'managed_by': 'managed_by',
        'role': 'role',
        'total_size': 'total_size',
        'smart_data_size': 'smart_data_size',
        'total_size_available': 'total_size_available',
        'smart_data_size_available': 'smart_data_size_available',
        'remaining_total_size': 'remaining_total_size',
        'remaining_smart_data_size': 'remaining_smart_data_size',
        'remaining_total_size_percent': 'remaining_total_size_percent',
        'remaining_smart_data_size_percent': 'remaining_smart_data_size_percent'
    }

    def __init__(self, is_unsupervised=None, managed_by=None, role=None, total_size=None, smart_data_size=None, total_size_available=None, smart_data_size_available=None, remaining_total_size=None, remaining_smart_data_size=None, remaining_total_size_percent=None, remaining_smart_data_size_percent=None, local_vars_configuration=None):  # noqa: E501
        """Size - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._is_unsupervised = None
        self._managed_by = None
        self._role = None
        self._total_size = None
        self._smart_data_size = None
        self._total_size_available = None
        self._smart_data_size_available = None
        self._remaining_total_size = None
        self._remaining_smart_data_size = None
        self._remaining_total_size_percent = None
        self._remaining_smart_data_size_percent = None
        self.discriminator = None

        if is_unsupervised is not None:
            self.is_unsupervised = is_unsupervised
        self.managed_by = managed_by
        self.role = role
        self.total_size = total_size
        self.smart_data_size = smart_data_size
        self.total_size_available = total_size_available
        self.smart_data_size_available = smart_data_size_available
        self.remaining_total_size = remaining_total_size
        self.remaining_smart_data_size = remaining_smart_data_size
        self.remaining_total_size_percent = remaining_total_size_percent
        self.remaining_smart_data_size_percent = remaining_smart_data_size_percent

    @property
    def is_unsupervised(self):
        """Gets the is_unsupervised of this Size.  # noqa: E501


        :return: The is_unsupervised of this Size.  # noqa: E501
        :rtype: bool
        """
        return self._is_unsupervised

    @is_unsupervised.setter
    def is_unsupervised(self, is_unsupervised):
        """Sets the is_unsupervised of this Size.


        :param is_unsupervised: The is_unsupervised of this Size.  # noqa: E501
        :type: bool
        """

        self._is_unsupervised = is_unsupervised

    @property
    def managed_by(self):
        """Gets the managed_by of this Size.  # noqa: E501


        :return: The managed_by of this Size.  # noqa: E501
        :rtype: str
        """
        return self._managed_by

    @managed_by.setter
    def managed_by(self, managed_by):
        """Sets the managed_by of this Size.


        :param managed_by: The managed_by of this Size.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and managed_by is None:  # noqa: E501
            raise ValueError("Invalid value for `managed_by`, must not be `None`")  # noqa: E501
        allowed_values = ["BIMDATA_PLATFORM", "ORGANIZATION"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and managed_by not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `managed_by` ({0}), must be one of {1}"  # noqa: E501
                .format(managed_by, allowed_values)
            )

        self._managed_by = managed_by

    @property
    def role(self):
        """Gets the role of this Size.  # noqa: E501


        :return: The role of this Size.  # noqa: E501
        :rtype: int
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this Size.


        :param role: The role of this Size.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and role is None:  # noqa: E501
            raise ValueError("Invalid value for `role`, must not be `None`")  # noqa: E501

        self._role = role

    @property
    def total_size(self):
        """Gets the total_size of this Size.  # noqa: E501


        :return: The total_size of this Size.  # noqa: E501
        :rtype: int
        """
        return self._total_size

    @total_size.setter
    def total_size(self, total_size):
        """Sets the total_size of this Size.


        :param total_size: The total_size of this Size.  # noqa: E501
        :type: int
        """

        self._total_size = total_size

    @property
    def smart_data_size(self):
        """Gets the smart_data_size of this Size.  # noqa: E501


        :return: The smart_data_size of this Size.  # noqa: E501
        :rtype: int
        """
        return self._smart_data_size

    @smart_data_size.setter
    def smart_data_size(self, smart_data_size):
        """Sets the smart_data_size of this Size.


        :param smart_data_size: The smart_data_size of this Size.  # noqa: E501
        :type: int
        """

        self._smart_data_size = smart_data_size

    @property
    def total_size_available(self):
        """Gets the total_size_available of this Size.  # noqa: E501


        :return: The total_size_available of this Size.  # noqa: E501
        :rtype: int
        """
        return self._total_size_available

    @total_size_available.setter
    def total_size_available(self, total_size_available):
        """Sets the total_size_available of this Size.


        :param total_size_available: The total_size_available of this Size.  # noqa: E501
        :type: int
        """

        self._total_size_available = total_size_available

    @property
    def smart_data_size_available(self):
        """Gets the smart_data_size_available of this Size.  # noqa: E501


        :return: The smart_data_size_available of this Size.  # noqa: E501
        :rtype: int
        """
        return self._smart_data_size_available

    @smart_data_size_available.setter
    def smart_data_size_available(self, smart_data_size_available):
        """Sets the smart_data_size_available of this Size.


        :param smart_data_size_available: The smart_data_size_available of this Size.  # noqa: E501
        :type: int
        """

        self._smart_data_size_available = smart_data_size_available

    @property
    def remaining_total_size(self):
        """Gets the remaining_total_size of this Size.  # noqa: E501


        :return: The remaining_total_size of this Size.  # noqa: E501
        :rtype: int
        """
        return self._remaining_total_size

    @remaining_total_size.setter
    def remaining_total_size(self, remaining_total_size):
        """Sets the remaining_total_size of this Size.


        :param remaining_total_size: The remaining_total_size of this Size.  # noqa: E501
        :type: int
        """

        self._remaining_total_size = remaining_total_size

    @property
    def remaining_smart_data_size(self):
        """Gets the remaining_smart_data_size of this Size.  # noqa: E501


        :return: The remaining_smart_data_size of this Size.  # noqa: E501
        :rtype: int
        """
        return self._remaining_smart_data_size

    @remaining_smart_data_size.setter
    def remaining_smart_data_size(self, remaining_smart_data_size):
        """Sets the remaining_smart_data_size of this Size.


        :param remaining_smart_data_size: The remaining_smart_data_size of this Size.  # noqa: E501
        :type: int
        """

        self._remaining_smart_data_size = remaining_smart_data_size

    @property
    def remaining_total_size_percent(self):
        """Gets the remaining_total_size_percent of this Size.  # noqa: E501


        :return: The remaining_total_size_percent of this Size.  # noqa: E501
        :rtype: int
        """
        return self._remaining_total_size_percent

    @remaining_total_size_percent.setter
    def remaining_total_size_percent(self, remaining_total_size_percent):
        """Sets the remaining_total_size_percent of this Size.


        :param remaining_total_size_percent: The remaining_total_size_percent of this Size.  # noqa: E501
        :type: int
        """

        self._remaining_total_size_percent = remaining_total_size_percent

    @property
    def remaining_smart_data_size_percent(self):
        """Gets the remaining_smart_data_size_percent of this Size.  # noqa: E501


        :return: The remaining_smart_data_size_percent of this Size.  # noqa: E501
        :rtype: int
        """
        return self._remaining_smart_data_size_percent

    @remaining_smart_data_size_percent.setter
    def remaining_smart_data_size_percent(self, remaining_smart_data_size_percent):
        """Sets the remaining_smart_data_size_percent of this Size.


        :param remaining_smart_data_size_percent: The remaining_smart_data_size_percent of this Size.  # noqa: E501
        :type: int
        """

        self._remaining_smart_data_size_percent = remaining_smart_data_size_percent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Size):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Size):
            return True

        return self.to_dict() != other.to_dict()
