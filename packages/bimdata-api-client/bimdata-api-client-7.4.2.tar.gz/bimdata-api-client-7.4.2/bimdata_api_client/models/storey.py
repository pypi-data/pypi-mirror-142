# coding: utf-8

"""
    BIMData API

    BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: support@bimdata.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from bimdata_api_client.configuration import Configuration


class Storey(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'uuid': 'str',
        'name': 'str',
        'plans': 'list[ModelWithPositioningPlan]',
        'plans_unreachable_count': 'int'
    }

    attribute_map = {
        'uuid': 'uuid',
        'name': 'name',
        'plans': 'plans',
        'plans_unreachable_count': 'plans_unreachable_count'
    }

    def __init__(self, uuid=None, name=None, plans=None, plans_unreachable_count=None, local_vars_configuration=None):  # noqa: E501
        """Storey - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._uuid = None
        self._name = None
        self._plans = None
        self._plans_unreachable_count = None
        self.discriminator = None

        if uuid is not None:
            self.uuid = uuid
        if name is not None:
            self.name = name
        if plans is not None:
            self.plans = plans
        if plans_unreachable_count is not None:
            self.plans_unreachable_count = plans_unreachable_count

    @property
    def uuid(self):
        """Gets the uuid of this Storey.  # noqa: E501

        IFC element or element type UUID  # noqa: E501

        :return: The uuid of this Storey.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Storey.

        IFC element or element type UUID  # noqa: E501

        :param uuid: The uuid of this Storey.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                uuid is not None and len(uuid) < 1):
            raise ValueError("Invalid value for `uuid`, length must be greater than or equal to `1`")  # noqa: E501

        self._uuid = uuid

    @property
    def name(self):
        """Gets the name of this Storey.  # noqa: E501

        Name of the storey  # noqa: E501

        :return: The name of this Storey.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Storey.

        Name of the storey  # noqa: E501

        :param name: The name of this Storey.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def plans(self):
        """Gets the plans of this Storey.  # noqa: E501


        :return: The plans of this Storey.  # noqa: E501
        :rtype: list[ModelWithPositioningPlan]
        """
        return self._plans

    @plans.setter
    def plans(self, plans):
        """Sets the plans of this Storey.


        :param plans: The plans of this Storey.  # noqa: E501
        :type: list[ModelWithPositioningPlan]
        """

        self._plans = plans

    @property
    def plans_unreachable_count(self):
        """Gets the plans_unreachable_count of this Storey.  # noqa: E501


        :return: The plans_unreachable_count of this Storey.  # noqa: E501
        :rtype: int
        """
        return self._plans_unreachable_count

    @plans_unreachable_count.setter
    def plans_unreachable_count(self, plans_unreachable_count):
        """Sets the plans_unreachable_count of this Storey.


        :param plans_unreachable_count: The plans_unreachable_count of this Storey.  # noqa: E501
        :type: int
        """

        self._plans_unreachable_count = plans_unreachable_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Storey):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Storey):
            return True

        return self.to_dict() != other.to_dict()
