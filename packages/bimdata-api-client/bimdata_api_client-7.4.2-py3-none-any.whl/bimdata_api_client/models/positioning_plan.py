# coding: utf-8

"""
    BIMData API

    BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: support@bimdata.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from bimdata_api_client.configuration import Configuration


class PositioningPlan(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'translation_x': 'float',
        'translation_y': 'float',
        'rotate_z': 'float',
        'scale': 'float',
        'opacity': 'float'
    }

    attribute_map = {
        'translation_x': 'translation_x',
        'translation_y': 'translation_y',
        'rotate_z': 'rotate_z',
        'scale': 'scale',
        'opacity': 'opacity'
    }

    def __init__(self, translation_x=None, translation_y=None, rotate_z=None, scale=None, opacity=None, local_vars_configuration=None):  # noqa: E501
        """PositioningPlan - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._translation_x = None
        self._translation_y = None
        self._rotate_z = None
        self._scale = None
        self._opacity = None
        self.discriminator = None

        self.translation_x = translation_x
        self.translation_y = translation_y
        self.rotate_z = rotate_z
        self.scale = scale
        self.opacity = opacity

    @property
    def translation_x(self):
        """Gets the translation_x of this PositioningPlan.  # noqa: E501


        :return: The translation_x of this PositioningPlan.  # noqa: E501
        :rtype: float
        """
        return self._translation_x

    @translation_x.setter
    def translation_x(self, translation_x):
        """Sets the translation_x of this PositioningPlan.


        :param translation_x: The translation_x of this PositioningPlan.  # noqa: E501
        :type: float
        """

        self._translation_x = translation_x

    @property
    def translation_y(self):
        """Gets the translation_y of this PositioningPlan.  # noqa: E501


        :return: The translation_y of this PositioningPlan.  # noqa: E501
        :rtype: float
        """
        return self._translation_y

    @translation_y.setter
    def translation_y(self, translation_y):
        """Sets the translation_y of this PositioningPlan.


        :param translation_y: The translation_y of this PositioningPlan.  # noqa: E501
        :type: float
        """

        self._translation_y = translation_y

    @property
    def rotate_z(self):
        """Gets the rotate_z of this PositioningPlan.  # noqa: E501


        :return: The rotate_z of this PositioningPlan.  # noqa: E501
        :rtype: float
        """
        return self._rotate_z

    @rotate_z.setter
    def rotate_z(self, rotate_z):
        """Sets the rotate_z of this PositioningPlan.


        :param rotate_z: The rotate_z of this PositioningPlan.  # noqa: E501
        :type: float
        """

        self._rotate_z = rotate_z

    @property
    def scale(self):
        """Gets the scale of this PositioningPlan.  # noqa: E501


        :return: The scale of this PositioningPlan.  # noqa: E501
        :rtype: float
        """
        return self._scale

    @scale.setter
    def scale(self, scale):
        """Sets the scale of this PositioningPlan.


        :param scale: The scale of this PositioningPlan.  # noqa: E501
        :type: float
        """

        self._scale = scale

    @property
    def opacity(self):
        """Gets the opacity of this PositioningPlan.  # noqa: E501


        :return: The opacity of this PositioningPlan.  # noqa: E501
        :rtype: float
        """
        return self._opacity

    @opacity.setter
    def opacity(self, opacity):
        """Sets the opacity of this PositioningPlan.


        :param opacity: The opacity of this PositioningPlan.  # noqa: E501
        :type: float
        """

        self._opacity = opacity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PositioningPlan):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PositioningPlan):
            return True

        return self.to_dict() != other.to_dict()
