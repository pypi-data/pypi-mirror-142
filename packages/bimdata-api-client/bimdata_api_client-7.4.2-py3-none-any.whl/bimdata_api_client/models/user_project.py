# coding: utf-8

"""
    BIMData API

    BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: support@bimdata.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from bimdata_api_client.configuration import Configuration


class UserProject(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'user_id': 'int',
        'invitation_id': 'int',
        'email': 'str',
        'firstname': 'str',
        'lastname': 'str',
        'profile_picture': 'str',
        'role': 'int'
    }

    attribute_map = {
        'id': 'id',
        'user_id': 'user_id',
        'invitation_id': 'invitation_id',
        'email': 'email',
        'firstname': 'firstname',
        'lastname': 'lastname',
        'profile_picture': 'profile_picture',
        'role': 'role'
    }

    def __init__(self, id=None, user_id=None, invitation_id=None, email=None, firstname=None, lastname=None, profile_picture=None, role=None, local_vars_configuration=None):  # noqa: E501
        """UserProject - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._user_id = None
        self._invitation_id = None
        self._email = None
        self._firstname = None
        self._lastname = None
        self._profile_picture = None
        self._role = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.user_id = user_id
        self.invitation_id = invitation_id
        if email is not None:
            self.email = email
        self.firstname = firstname
        self.lastname = lastname
        self.profile_picture = profile_picture
        if role is not None:
            self.role = role

    @property
    def id(self):
        """Gets the id of this UserProject.  # noqa: E501


        :return: The id of this UserProject.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserProject.


        :param id: The id of this UserProject.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def user_id(self):
        """Gets the user_id of this UserProject.  # noqa: E501


        :return: The user_id of this UserProject.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this UserProject.


        :param user_id: The user_id of this UserProject.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def invitation_id(self):
        """Gets the invitation_id of this UserProject.  # noqa: E501


        :return: The invitation_id of this UserProject.  # noqa: E501
        :rtype: int
        """
        return self._invitation_id

    @invitation_id.setter
    def invitation_id(self, invitation_id):
        """Sets the invitation_id of this UserProject.


        :param invitation_id: The invitation_id of this UserProject.  # noqa: E501
        :type: int
        """

        self._invitation_id = invitation_id

    @property
    def email(self):
        """Gets the email of this UserProject.  # noqa: E501


        :return: The email of this UserProject.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserProject.


        :param email: The email of this UserProject.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                email is not None and len(email) < 1):
            raise ValueError("Invalid value for `email`, length must be greater than or equal to `1`")  # noqa: E501

        self._email = email

    @property
    def firstname(self):
        """Gets the firstname of this UserProject.  # noqa: E501


        :return: The firstname of this UserProject.  # noqa: E501
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """Sets the firstname of this UserProject.


        :param firstname: The firstname of this UserProject.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                firstname is not None and len(firstname) < 1):
            raise ValueError("Invalid value for `firstname`, length must be greater than or equal to `1`")  # noqa: E501

        self._firstname = firstname

    @property
    def lastname(self):
        """Gets the lastname of this UserProject.  # noqa: E501


        :return: The lastname of this UserProject.  # noqa: E501
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """Sets the lastname of this UserProject.


        :param lastname: The lastname of this UserProject.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                lastname is not None and len(lastname) < 1):
            raise ValueError("Invalid value for `lastname`, length must be greater than or equal to `1`")  # noqa: E501

        self._lastname = lastname

    @property
    def profile_picture(self):
        """Gets the profile_picture of this UserProject.  # noqa: E501


        :return: The profile_picture of this UserProject.  # noqa: E501
        :rtype: str
        """
        return self._profile_picture

    @profile_picture.setter
    def profile_picture(self, profile_picture):
        """Sets the profile_picture of this UserProject.


        :param profile_picture: The profile_picture of this UserProject.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                profile_picture is not None and len(profile_picture) < 1):
            raise ValueError("Invalid value for `profile_picture`, length must be greater than or equal to `1`")  # noqa: E501

        self._profile_picture = profile_picture

    @property
    def role(self):
        """Gets the role of this UserProject.  # noqa: E501


        :return: The role of this UserProject.  # noqa: E501
        :rtype: int
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this UserProject.


        :param role: The role of this UserProject.  # noqa: E501
        :type: int
        """

        self._role = role

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserProject):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserProject):
            return True

        return self.to_dict() != other.to_dict()
