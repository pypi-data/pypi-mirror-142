# coding: utf-8

"""
    BIMData API

    BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: support@bimdata.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from bimdata_api_client.configuration import Configuration


class Priority(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'priority': 'str',
        'color': 'str',
        'project': 'int'
    }

    attribute_map = {
        'id': 'id',
        'priority': 'priority',
        'color': 'color',
        'project': 'project'
    }

    def __init__(self, id=None, priority=None, color=None, project=None, local_vars_configuration=None):  # noqa: E501
        """Priority - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._priority = None
        self._color = None
        self._project = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.priority = priority
        self.color = color
        if project is not None:
            self.project = project

    @property
    def id(self):
        """Gets the id of this Priority.  # noqa: E501


        :return: The id of this Priority.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Priority.


        :param id: The id of this Priority.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def priority(self):
        """Gets the priority of this Priority.  # noqa: E501


        :return: The priority of this Priority.  # noqa: E501
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this Priority.


        :param priority: The priority of this Priority.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and priority is None:  # noqa: E501
            raise ValueError("Invalid value for `priority`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                priority is not None and len(priority) > 255):
            raise ValueError("Invalid value for `priority`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                priority is not None and len(priority) < 1):
            raise ValueError("Invalid value for `priority`, length must be greater than or equal to `1`")  # noqa: E501

        self._priority = priority

    @property
    def color(self):
        """Gets the color of this Priority.  # noqa: E501


        :return: The color of this Priority.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this Priority.


        :param color: The color of this Priority.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                color is not None and len(color) > 8):
            raise ValueError("Invalid value for `color`, length must be less than or equal to `8`")  # noqa: E501

        self._color = color

    @property
    def project(self):
        """Gets the project of this Priority.  # noqa: E501

        This field is automatically provided by the route, you don't need to provide it in the body  # noqa: E501

        :return: The project of this Priority.  # noqa: E501
        :rtype: int
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this Priority.

        This field is automatically provided by the route, you don't need to provide it in the body  # noqa: E501

        :param project: The project of this Priority.  # noqa: E501
        :type: int
        """

        self._project = project

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Priority):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Priority):
            return True

        return self.to_dict() != other.to_dict()
