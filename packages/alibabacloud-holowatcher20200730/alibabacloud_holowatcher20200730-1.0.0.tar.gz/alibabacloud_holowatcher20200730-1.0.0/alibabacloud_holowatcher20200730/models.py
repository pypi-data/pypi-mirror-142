# -*- coding: utf-8 -*-
# This file is auto-generated, don't edit it. Thanks.
from Tea.model import TeaModel
from typing import BinaryIO, Dict, Any, List


class BaseRequest(TeaModel):
    def __init__(
        self,
        request_id: BinaryIO = None,
    ):
        # RequestId
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class FloorPlan(TeaModel):
    def __init__(
        self,
        angle: int = None,
        img_height: int = None,
        img_width: int = None,
        scale: int = None,
        translation_x: int = None,
        translation_y: int = None,
    ):
        # angle
        self.angle = angle
        # imgHeight
        self.img_height = img_height
        # imgWidth
        self.img_width = img_width
        # scale
        self.scale = scale
        # translationX
        self.translation_x = translation_x
        # translationY
        self.translation_y = translation_y

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.angle is not None:
            result['Angle'] = self.angle
        if self.img_height is not None:
            result['ImgHeight'] = self.img_height
        if self.img_width is not None:
            result['ImgWidth'] = self.img_width
        if self.scale is not None:
            result['Scale'] = self.scale
        if self.translation_x is not None:
            result['TranslationX'] = self.translation_x
        if self.translation_y is not None:
            result['TranslationY'] = self.translation_y
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Angle') is not None:
            self.angle = m.get('Angle')
        if m.get('ImgHeight') is not None:
            self.img_height = m.get('ImgHeight')
        if m.get('ImgWidth') is not None:
            self.img_width = m.get('ImgWidth')
        if m.get('Scale') is not None:
            self.scale = m.get('Scale')
        if m.get('TranslationX') is not None:
            self.translation_x = m.get('TranslationX')
        if m.get('TranslationY') is not None:
            self.translation_y = m.get('TranslationY')
        return self


class ActivateUserRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        user_id: int = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class ActivateUserResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        success: str = None,
    ):
        # Id of the request
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ActivateUserResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ActivateUserResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ActivateUserResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AddQRCodeRequest(TeaModel):
    def __init__(
        self,
        dataset_id: int = None,
        tag: str = None,
    ):
        # datasetId
        self.dataset_id = dataset_id
        # tag
        self.tag = tag

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dataset_id is not None:
            result['DatasetId'] = self.dataset_id
        if self.tag is not None:
            result['Tag'] = self.tag
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DatasetId') is not None:
            self.dataset_id = m.get('DatasetId')
        if m.get('Tag') is not None:
            self.tag = m.get('Tag')
        return self


class AddQRCodeResponseBody(TeaModel):
    def __init__(
        self,
        data: str = None,
        error: str = None,
        msg_code: str = None,
        msg_info: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        # data
        self.data = data
        # error
        self.error = error
        # msgCode
        self.msg_code = msg_code
        # msgInfo
        self.msg_info = msg_info
        # traceId
        self.request_id = request_id
        # success
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data
        if self.error is not None:
            result['Error'] = self.error
        if self.msg_code is not None:
            result['MsgCode'] = self.msg_code
        if self.msg_info is not None:
            result['MsgInfo'] = self.msg_info
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Error') is not None:
            self.error = m.get('Error')
        if m.get('MsgCode') is not None:
            self.msg_code = m.get('MsgCode')
        if m.get('MsgInfo') is not None:
            self.msg_info = m.get('MsgInfo')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class AddQRCodeResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: AddQRCodeResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = AddQRCodeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AliyunJwtCreateCommonRequest(TeaModel):
    def __init__(
        self,
        aliyun_account_name: str = None,
        aliyun_uid: str = None,
        aliyun_uid_type: str = None,
        parent_uid: str = None,
        ticket: str = None,
    ):
        self.aliyun_account_name = aliyun_account_name
        self.aliyun_uid = aliyun_uid
        self.aliyun_uid_type = aliyun_uid_type
        self.parent_uid = parent_uid
        self.ticket = ticket

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_account_name is not None:
            result['AliyunAccountName'] = self.aliyun_account_name
        if self.aliyun_uid is not None:
            result['AliyunUid'] = self.aliyun_uid
        if self.aliyun_uid_type is not None:
            result['AliyunUidType'] = self.aliyun_uid_type
        if self.parent_uid is not None:
            result['ParentUid'] = self.parent_uid
        if self.ticket is not None:
            result['Ticket'] = self.ticket
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunAccountName') is not None:
            self.aliyun_account_name = m.get('AliyunAccountName')
        if m.get('AliyunUid') is not None:
            self.aliyun_uid = m.get('AliyunUid')
        if m.get('AliyunUidType') is not None:
            self.aliyun_uid_type = m.get('AliyunUidType')
        if m.get('ParentUid') is not None:
            self.parent_uid = m.get('ParentUid')
        if m.get('Ticket') is not None:
            self.ticket = m.get('Ticket')
        return self


class AliyunJwtCreateCommonResponseBody(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        error_message: str = None,
        request_id: str = None,
        success: str = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.error_message = error_message
        # Id of the request
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class AliyunJwtCreateCommonResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: AliyunJwtCreateCommonResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = AliyunJwtCreateCommonResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AliyunMainJwtCreateRequest(TeaModel):
    def __init__(
        self,
        aliyun_uid: str = None,
        aliyun_uid_type: str = None,
    ):
        self.aliyun_uid = aliyun_uid
        self.aliyun_uid_type = aliyun_uid_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_uid is not None:
            result['AliyunUid'] = self.aliyun_uid
        if self.aliyun_uid_type is not None:
            result['AliyunUidType'] = self.aliyun_uid_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunUid') is not None:
            self.aliyun_uid = m.get('AliyunUid')
        if m.get('AliyunUidType') is not None:
            self.aliyun_uid_type = m.get('AliyunUidType')
        return self


class AliyunMainJwtCreateResponseBody(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        error_message: str = None,
        request_id: str = None,
        success: str = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.error_message = error_message
        # Id of the request
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class AliyunMainJwtCreateResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: AliyunMainJwtCreateResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = AliyunMainJwtCreateResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AliyunRamJwtCreateRequest(TeaModel):
    def __init__(
        self,
        aliyun_uid_type: str = None,
        name: str = None,
        parent_uid: str = None,
    ):
        self.aliyun_uid_type = aliyun_uid_type
        self.name = name
        self.parent_uid = parent_uid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_uid_type is not None:
            result['AliyunUidType'] = self.aliyun_uid_type
        if self.name is not None:
            result['Name'] = self.name
        if self.parent_uid is not None:
            result['ParentUid'] = self.parent_uid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunUidType') is not None:
            self.aliyun_uid_type = m.get('AliyunUidType')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('ParentUid') is not None:
            self.parent_uid = m.get('ParentUid')
        return self


class AliyunRamJwtCreateResponseBody(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        error_message: str = None,
        request_id: str = None,
        success: str = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.error_message = error_message
        # Id of the request
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class AliyunRamJwtCreateResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: AliyunRamJwtCreateResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = AliyunRamJwtCreateResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AliyunTicketJwtCreateRequest(TeaModel):
    def __init__(
        self,
        ticket: str = None,
    ):
        self.ticket = ticket

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ticket is not None:
            result['Ticket'] = self.ticket
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Ticket') is not None:
            self.ticket = m.get('Ticket')
        return self


class AliyunTicketJwtCreateResponseBody(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        error_message: str = None,
        request_id: str = None,
        success: str = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.error_message = error_message
        # Id of the request
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class AliyunTicketJwtCreateResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: AliyunTicketJwtCreateResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = AliyunTicketJwtCreateResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AliyunUidWhiteListRequest(TeaModel):
    def __init__(
        self,
        aliyun_uid: str = None,
    ):
        self.aliyun_uid = aliyun_uid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_uid is not None:
            result['AliyunUid'] = self.aliyun_uid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunUid') is not None:
            self.aliyun_uid = m.get('AliyunUid')
        return self


class AliyunUidWhiteListResponseBody(TeaModel):
    def __init__(
        self,
        exist: str = None,
        message: str = None,
        request_id: str = None,
    ):
        self.exist = exist
        self.message = message
        # Id of the request
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.exist is not None:
            result['Exist'] = self.exist
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Exist') is not None:
            self.exist = m.get('Exist')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class AliyunUidWhiteListResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: AliyunUidWhiteListResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = AliyunUidWhiteListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class BimBuildModelRequest(TeaModel):
    def __init__(
        self,
        task_id: str = None,
    ):
        # 任务Id
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class BimBuildModelResponseBody(TeaModel):
    def __init__(
        self,
        datas: int = None,
        err_code: int = None,
        err_msg: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.datas = datas
        self.err_code = err_code
        self.err_msg = err_msg
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.datas is not None:
            result['Datas'] = self.datas
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_msg is not None:
            result['ErrMsg'] = self.err_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Datas') is not None:
            self.datas = m.get('Datas')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMsg') is not None:
            self.err_msg = m.get('ErrMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class BimBuildModelResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: BimBuildModelResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = BimBuildModelResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class BimGetStsTokenRequest(TeaModel):
    def __init__(
        self,
        task_id: int = None,
    ):
        # 任务id
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class BimGetStsTokenResponseBodyDatas(TeaModel):
    def __init__(
        self,
        access_key_id: str = None,
        access_key_secret: str = None,
        expiration: int = None,
        oss_bucket: str = None,
        oss_region: str = None,
        security_token: str = None,
    ):
        self.access_key_id = access_key_id
        self.access_key_secret = access_key_secret
        self.expiration = expiration
        self.oss_bucket = oss_bucket
        self.oss_region = oss_region
        self.security_token = security_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.access_key_id is not None:
            result['AccessKeyId'] = self.access_key_id
        if self.access_key_secret is not None:
            result['AccessKeySecret'] = self.access_key_secret
        if self.expiration is not None:
            result['Expiration'] = self.expiration
        if self.oss_bucket is not None:
            result['OssBucket'] = self.oss_bucket
        if self.oss_region is not None:
            result['OssRegion'] = self.oss_region
        if self.security_token is not None:
            result['SecurityToken'] = self.security_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccessKeyId') is not None:
            self.access_key_id = m.get('AccessKeyId')
        if m.get('AccessKeySecret') is not None:
            self.access_key_secret = m.get('AccessKeySecret')
        if m.get('Expiration') is not None:
            self.expiration = m.get('Expiration')
        if m.get('OssBucket') is not None:
            self.oss_bucket = m.get('OssBucket')
        if m.get('OssRegion') is not None:
            self.oss_region = m.get('OssRegion')
        if m.get('SecurityToken') is not None:
            self.security_token = m.get('SecurityToken')
        return self


class BimGetStsTokenResponseBody(TeaModel):
    def __init__(
        self,
        datas: BimGetStsTokenResponseBodyDatas = None,
        err_code: int = None,
        err_msg: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.datas = datas
        self.err_code = err_code
        self.err_msg = err_msg
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.datas:
            self.datas.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.datas is not None:
            result['Datas'] = self.datas.to_map()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_msg is not None:
            result['ErrMsg'] = self.err_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Datas') is not None:
            temp_model = BimGetStsTokenResponseBodyDatas()
            self.datas = temp_model.from_map(m['Datas'])
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMsg') is not None:
            self.err_msg = m.get('ErrMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class BimGetStsTokenResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: BimGetStsTokenResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = BimGetStsTokenResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class BimPreStepRequest(TeaModel):
    def __init__(
        self,
        force: bool = None,
        task_id: int = None,
    ):
        self.force = force
        # 任务id
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.force is not None:
            result['Force'] = self.force
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Force') is not None:
            self.force = m.get('Force')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class BimPreStepResponseBody(TeaModel):
    def __init__(
        self,
        datas: int = None,
        err_code: int = None,
        err_msg: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.datas = datas
        self.err_code = err_code
        self.err_msg = err_msg
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.datas is not None:
            result['Datas'] = self.datas
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_msg is not None:
            result['ErrMsg'] = self.err_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Datas') is not None:
            self.datas = m.get('Datas')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMsg') is not None:
            self.err_msg = m.get('ErrMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class BimPreStepResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: BimPreStepResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = BimPreStepResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class BimProAgainBuildModeRequest(TeaModel):
    def __init__(
        self,
        task_id: int = None,
    ):
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class BimProAgainBuildModeResponseBodyDatas(TeaModel):
    def __init__(
        self,
        status: str = None,
        task_id: int = None,
    ):
        self.status = status
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.status is not None:
            result['Status'] = self.status
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class BimProAgainBuildModeResponseBody(TeaModel):
    def __init__(
        self,
        datas: BimProAgainBuildModeResponseBodyDatas = None,
        err_code: int = None,
        err_msg: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.datas = datas
        self.err_code = err_code
        self.err_msg = err_msg
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.datas:
            self.datas.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.datas is not None:
            result['Datas'] = self.datas.to_map()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_msg is not None:
            result['ErrMsg'] = self.err_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Datas') is not None:
            temp_model = BimProAgainBuildModeResponseBodyDatas()
            self.datas = temp_model.from_map(m['Datas'])
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMsg') is not None:
            self.err_msg = m.get('ErrMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class BimProAgainBuildModeResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: BimProAgainBuildModeResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = BimProAgainBuildModeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class BimProjectDeleteFileRequest(TeaModel):
    def __init__(
        self,
        id: int = None,
    ):
        # 源图纸id
        self.id = id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        return self


class BimProjectDeleteFileResponseBody(TeaModel):
    def __init__(
        self,
        datas: int = None,
        err_code: int = None,
        err_msg: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.datas = datas
        self.err_code = err_code
        self.err_msg = err_msg
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.datas is not None:
            result['Datas'] = self.datas
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_msg is not None:
            result['ErrMsg'] = self.err_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Datas') is not None:
            self.datas = m.get('Datas')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMsg') is not None:
            self.err_msg = m.get('ErrMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class BimProjectDeleteFileResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: BimProjectDeleteFileResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = BimProjectDeleteFileResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class BimProjectShareModelRequest(TeaModel):
    def __init__(
        self,
        task_id: int = None,
    ):
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class BimProjectShareModelResponseBodyDatas(TeaModel):
    def __init__(
        self,
        expire_time: int = None,
        share_id: str = None,
    ):
        # 失效时间
        self.expire_time = expire_time
        # 分享id
        self.share_id = share_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.share_id is not None:
            result['ShareId'] = self.share_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('ShareId') is not None:
            self.share_id = m.get('ShareId')
        return self


class BimProjectShareModelResponseBody(TeaModel):
    def __init__(
        self,
        datas: BimProjectShareModelResponseBodyDatas = None,
        err_code: int = None,
        err_msg: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.datas = datas
        self.err_code = err_code
        self.err_msg = err_msg
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.datas:
            self.datas.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.datas is not None:
            result['Datas'] = self.datas.to_map()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_msg is not None:
            result['ErrMsg'] = self.err_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Datas') is not None:
            temp_model = BimProjectShareModelResponseBodyDatas()
            self.datas = temp_model.from_map(m['Datas'])
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMsg') is not None:
            self.err_msg = m.get('ErrMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class BimProjectShareModelResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: BimProjectShareModelResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = BimProjectShareModelResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class BimRetryTransRequest(TeaModel):
    def __init__(
        self,
        task_id: int = None,
    ):
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class BimRetryTransResponseBody(TeaModel):
    def __init__(
        self,
        datas: int = None,
        err_code: int = None,
        err_msg: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.datas = datas
        self.err_code = err_code
        self.err_msg = err_msg
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.datas is not None:
            result['Datas'] = self.datas
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_msg is not None:
            result['ErrMsg'] = self.err_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Datas') is not None:
            self.datas = m.get('Datas')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMsg') is not None:
            self.err_msg = m.get('ErrMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class BimRetryTransResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: BimRetryTransResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = BimRetryTransResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class BimStandardAutoSalbInfoRequest(TeaModel):
    def __init__(
        self,
        standard_id: int = None,
        task_id: int = None,
    ):
        # 标准图纸id
        self.standard_id = standard_id
        # 任务id
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.standard_id is not None:
            result['StandardId'] = self.standard_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('StandardId') is not None:
            self.standard_id = m.get('StandardId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class BimStandardAutoSalbInfoResponseBody(TeaModel):
    def __init__(
        self,
        datas: int = None,
        err_code: int = None,
        err_msg: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.datas = datas
        self.err_code = err_code
        self.err_msg = err_msg
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.datas is not None:
            result['Datas'] = self.datas
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_msg is not None:
            result['ErrMsg'] = self.err_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Datas') is not None:
            self.datas = m.get('Datas')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMsg') is not None:
            self.err_msg = m.get('ErrMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class BimStandardAutoSalbInfoResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: BimStandardAutoSalbInfoResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = BimStandardAutoSalbInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class BimStandardDetailRequest(TeaModel):
    def __init__(
        self,
        standard_id: str = None,
        task_id: int = None,
    ):
        # 标准图纸id
        self.standard_id = standard_id
        # 任务id
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.standard_id is not None:
            result['StandardId'] = self.standard_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('StandardId') is not None:
            self.standard_id = m.get('StandardId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class BimStandardDetailResponseBodyDatas(TeaModel):
    def __init__(
        self,
        config: Dict[str, Any] = None,
        id: int = None,
        status: int = None,
    ):
        # 门窗表配置
        self.config = config
        # 门窗表图纸id
        self.id = id
        # 门窗表图纸状态
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.config is not None:
            result['Config'] = self.config
        if self.id is not None:
            result['Id'] = self.id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Config') is not None:
            self.config = m.get('Config')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class BimStandardDetailResponseBody(TeaModel):
    def __init__(
        self,
        datas: BimStandardDetailResponseBodyDatas = None,
        err_code: int = None,
        err_msg: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.datas = datas
        self.err_code = err_code
        self.err_msg = err_msg
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.datas:
            self.datas.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.datas is not None:
            result['Datas'] = self.datas.to_map()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_msg is not None:
            result['ErrMsg'] = self.err_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Datas') is not None:
            temp_model = BimStandardDetailResponseBodyDatas()
            self.datas = temp_model.from_map(m['Datas'])
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMsg') is not None:
            self.err_msg = m.get('ErrMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class BimStandardDetailResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: BimStandardDetailResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = BimStandardDetailResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class BimStandardElevationRequest(TeaModel):
    def __init__(
        self,
        standard_id: int = None,
        task_id: int = None,
    ):
        # 标准图纸id
        self.standard_id = standard_id
        # 任务id
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.standard_id is not None:
            result['StandardId'] = self.standard_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('StandardId') is not None:
            self.standard_id = m.get('StandardId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class BimStandardElevationResponseBodyDatas(TeaModel):
    def __init__(
        self,
        config: Dict[str, Any] = None,
        id: int = None,
        status: int = None,
    ):
        # 立面配置信息
        self.config = config
        # 立面标准图纸id
        self.id = id
        # 立面标准图纸状态
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.config is not None:
            result['Config'] = self.config
        if self.id is not None:
            result['Id'] = self.id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Config') is not None:
            self.config = m.get('Config')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class BimStandardElevationResponseBody(TeaModel):
    def __init__(
        self,
        datas: BimStandardElevationResponseBodyDatas = None,
        err_code: int = None,
        err_msg: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.datas = datas
        self.err_code = err_code
        self.err_msg = err_msg
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.datas:
            self.datas.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.datas is not None:
            result['Datas'] = self.datas.to_map()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_msg is not None:
            result['ErrMsg'] = self.err_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Datas') is not None:
            temp_model = BimStandardElevationResponseBodyDatas()
            self.datas = temp_model.from_map(m['Datas'])
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMsg') is not None:
            self.err_msg = m.get('ErrMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class BimStandardElevationResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: BimStandardElevationResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = BimStandardElevationResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class BimTransModelRequest(TeaModel):
    def __init__(
        self,
        task_id: int = None,
        type: str = None,
    ):
        # 任务Id(项目id)
        self.task_id = task_id
        # 转换文件类型
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class BimTransModelResponseBody(TeaModel):
    def __init__(
        self,
        datas: int = None,
        err_code: int = None,
        err_msg: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.datas = datas
        self.err_code = err_code
        self.err_msg = err_msg
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.datas is not None:
            result['Datas'] = self.datas
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_msg is not None:
            result['ErrMsg'] = self.err_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Datas') is not None:
            self.datas = m.get('Datas')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMsg') is not None:
            self.err_msg = m.get('ErrMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class BimTransModelResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: BimTransModelResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = BimTransModelResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class BimTransModelStatusRequest(TeaModel):
    def __init__(
        self,
        ids: List[int] = None,
    ):
        # 转换图纸集合
        self.ids = ids

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ids is not None:
            result['Ids'] = self.ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Ids') is not None:
            self.ids = m.get('Ids')
        return self


class BimTransModelStatusShrinkRequest(TeaModel):
    def __init__(
        self,
        ids_shrink: str = None,
    ):
        # 转换图纸集合
        self.ids_shrink = ids_shrink

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ids_shrink is not None:
            result['Ids'] = self.ids_shrink
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Ids') is not None:
            self.ids_shrink = m.get('Ids')
        return self


class BimTransModelStatusResponseBodyDatas(TeaModel):
    def __init__(
        self,
        id: int = None,
        status: int = None,
    ):
        # 转换模型id
        self.id = id
        # 转换模型状态
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class BimTransModelStatusResponseBody(TeaModel):
    def __init__(
        self,
        datas: List[BimTransModelStatusResponseBodyDatas] = None,
        err_code: int = None,
        err_msg: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.datas = datas
        self.err_code = err_code
        self.err_msg = err_msg
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.datas:
            for k in self.datas:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Datas'] = []
        if self.datas is not None:
            for k in self.datas:
                result['Datas'].append(k.to_map() if k else None)
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_msg is not None:
            result['ErrMsg'] = self.err_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.datas = []
        if m.get('Datas') is not None:
            for k in m.get('Datas'):
                temp_model = BimTransModelStatusResponseBodyDatas()
                self.datas.append(temp_model.from_map(k))
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMsg') is not None:
            self.err_msg = m.get('ErrMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class BimTransModelStatusResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: BimTransModelStatusResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = BimTransModelStatusResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class BimUpdateProjectRequest(TeaModel):
    def __init__(
        self,
        component: List[Dict[str, Any]] = None,
        id: int = None,
        name: str = None,
        remarks: str = None,
        type: str = None,
    ):
        self.component = component
        self.id = id
        # 项目名
        self.name = name
        # 备注
        self.remarks = remarks
        # 类型
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.component is not None:
            result['Component'] = self.component
        if self.id is not None:
            result['Id'] = self.id
        if self.name is not None:
            result['Name'] = self.name
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Component') is not None:
            self.component = m.get('Component')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class BimUpdateProjectShrinkRequest(TeaModel):
    def __init__(
        self,
        component_shrink: str = None,
        id: int = None,
        name: str = None,
        remarks: str = None,
        type: str = None,
    ):
        self.component_shrink = component_shrink
        self.id = id
        # 项目名
        self.name = name
        # 备注
        self.remarks = remarks
        # 类型
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.component_shrink is not None:
            result['Component'] = self.component_shrink
        if self.id is not None:
            result['Id'] = self.id
        if self.name is not None:
            result['Name'] = self.name
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Component') is not None:
            self.component_shrink = m.get('Component')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class BimUpdateProjectResponseBodyDatas(TeaModel):
    def __init__(
        self,
        component: List[Dict[str, Any]] = None,
        id: int = None,
        modeling_status: int = None,
        name: str = None,
        phase: str = None,
        remarks: str = None,
        type: str = None,
    ):
        # 模型构件
        self.component = component
        # 任务id(项目id)
        self.id = id
        self.modeling_status = modeling_status
        self.name = name
        # 阶段
        self.phase = phase
        self.remarks = remarks
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.component is not None:
            result['Component'] = self.component
        if self.id is not None:
            result['Id'] = self.id
        if self.modeling_status is not None:
            result['ModelingStatus'] = self.modeling_status
        if self.name is not None:
            result['Name'] = self.name
        if self.phase is not None:
            result['Phase'] = self.phase
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Component') is not None:
            self.component = m.get('Component')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('ModelingStatus') is not None:
            self.modeling_status = m.get('ModelingStatus')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Phase') is not None:
            self.phase = m.get('Phase')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class BimUpdateProjectResponseBody(TeaModel):
    def __init__(
        self,
        datas: BimUpdateProjectResponseBodyDatas = None,
        err_code: int = None,
        err_msg: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.datas = datas
        self.err_code = err_code
        self.err_msg = err_msg
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.datas:
            self.datas.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.datas is not None:
            result['Datas'] = self.datas.to_map()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_msg is not None:
            result['ErrMsg'] = self.err_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Datas') is not None:
            temp_model = BimUpdateProjectResponseBodyDatas()
            self.datas = temp_model.from_map(m['Datas'])
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMsg') is not None:
            self.err_msg = m.get('ErrMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class BimUpdateProjectResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: BimUpdateProjectResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = BimUpdateProjectResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CheckImageRequest(TeaModel):
    def __init__(
        self,
        image_path: str = None,
    ):
        self.image_path = image_path

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.image_path is not None:
            result['ImagePath'] = self.image_path
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ImagePath') is not None:
            self.image_path = m.get('ImagePath')
        return self


class CheckImageResponseBody(TeaModel):
    def __init__(
        self,
        data: Dict[str, Any] = None,
        error: str = None,
        msg_code: str = None,
        msg_info: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.data = data
        self.error = error
        self.msg_code = msg_code
        self.msg_info = msg_info
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data
        if self.error is not None:
            result['Error'] = self.error
        if self.msg_code is not None:
            result['MsgCode'] = self.msg_code
        if self.msg_info is not None:
            result['MsgInfo'] = self.msg_info
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Error') is not None:
            self.error = m.get('Error')
        if m.get('MsgCode') is not None:
            self.msg_code = m.get('MsgCode')
        if m.get('MsgInfo') is not None:
            self.msg_info = m.get('MsgInfo')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CheckImageResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: CheckImageResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = CheckImageResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CommonRequestRequest(TeaModel):
    def __init__(
        self,
        api: str = None,
        biz_order_no: str = None,
        params: str = None,
        user_id: str = None,
        user_type: str = None,
    ):
        # A short description of struct
        self.api = api
        self.biz_order_no = biz_order_no
        self.params = params
        self.user_id = user_id
        self.user_type = user_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.api is not None:
            result['Api'] = self.api
        if self.biz_order_no is not None:
            result['BizOrderNo'] = self.biz_order_no
        if self.params is not None:
            result['Params'] = self.params
        if self.user_id is not None:
            result['UserId'] = self.user_id
        if self.user_type is not None:
            result['UserType'] = self.user_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Api') is not None:
            self.api = m.get('Api')
        if m.get('BizOrderNo') is not None:
            self.biz_order_no = m.get('BizOrderNo')
        if m.get('Params') is not None:
            self.params = m.get('Params')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        if m.get('UserType') is not None:
            self.user_type = m.get('UserType')
        return self


class CommonRequestResponseBody(TeaModel):
    def __init__(
        self,
        error_code: str = None,
        error_msg: str = None,
        request_id: str = None,
        result_obj: str = None,
        retry: bool = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.error_code = error_code
        self.error_msg = error_msg
        self.request_id = request_id
        self.result_obj = result_obj
        self.retry = retry
        self.success = success
        # Id of the request
        self.trace_id = trace_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.error_msg is not None:
            result['ErrorMsg'] = self.error_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_obj is not None:
            result['ResultObj'] = self.result_obj
        if self.retry is not None:
            result['Retry'] = self.retry
        if self.success is not None:
            result['Success'] = self.success
        if self.trace_id is not None:
            result['TraceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('ErrorMsg') is not None:
            self.error_msg = m.get('ErrorMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultObj') is not None:
            self.result_obj = m.get('ResultObj')
        if m.get('Retry') is not None:
            self.retry = m.get('Retry')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TraceId') is not None:
            self.trace_id = m.get('TraceId')
        return self


class CommonRequestResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: CommonRequestResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = CommonRequestResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CompanyActivateOneRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        id: str = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.id = id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.id is not None:
            result['Id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        return self


class CompanyActivateOneResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        success: str = None,
    ):
        # Id of the request
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CompanyActivateOneResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: CompanyActivateOneResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = CompanyActivateOneResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CompanyAndMainUserCreateRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        company_params: str = None,
        user_params: str = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.company_params = company_params
        self.user_params = user_params

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.company_params is not None:
            result['CompanyParams'] = self.company_params
        if self.user_params is not None:
            result['UserParams'] = self.user_params
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('CompanyParams') is not None:
            self.company_params = m.get('CompanyParams')
        if m.get('UserParams') is not None:
            self.user_params = m.get('UserParams')
        return self


class CompanyAndMainUserCreateResponseBodyCompanyExtraInfo(TeaModel):
    def __init__(
        self,
        ext_info_map: str = None,
        isv_type_enum_list: List[str] = None,
        support_type_enum_list: List[str] = None,
    ):
        self.ext_info_map = ext_info_map
        self.isv_type_enum_list = isv_type_enum_list
        self.support_type_enum_list = support_type_enum_list

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ext_info_map is not None:
            result['ExtInfoMap'] = self.ext_info_map
        if self.isv_type_enum_list is not None:
            result['IsvTypeEnumList'] = self.isv_type_enum_list
        if self.support_type_enum_list is not None:
            result['SupportTypeEnumList'] = self.support_type_enum_list
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ExtInfoMap') is not None:
            self.ext_info_map = m.get('ExtInfoMap')
        if m.get('IsvTypeEnumList') is not None:
            self.isv_type_enum_list = m.get('IsvTypeEnumList')
        if m.get('SupportTypeEnumList') is not None:
            self.support_type_enum_list = m.get('SupportTypeEnumList')
        return self


class CompanyAndMainUserCreateResponseBodyCompany(TeaModel):
    def __init__(
        self,
        contact_person: str = None,
        extra_info: CompanyAndMainUserCreateResponseBodyCompanyExtraInfo = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        id: str = None,
        name: str = None,
        phone: str = None,
        status: str = None,
    ):
        self.contact_person = contact_person
        self.extra_info = extra_info
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.id = id
        self.name = name
        self.phone = phone
        self.status = status

    def validate(self):
        if self.extra_info:
            self.extra_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_person is not None:
            result['ContactPerson'] = self.contact_person
        if self.extra_info is not None:
            result['ExtraInfo'] = self.extra_info.to_map()
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        if self.name is not None:
            result['Name'] = self.name
        if self.phone is not None:
            result['Phone'] = self.phone
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ContactPerson') is not None:
            self.contact_person = m.get('ContactPerson')
        if m.get('ExtraInfo') is not None:
            temp_model = CompanyAndMainUserCreateResponseBodyCompanyExtraInfo()
            self.extra_info = temp_model.from_map(m['ExtraInfo'])
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Phone') is not None:
            self.phone = m.get('Phone')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class CompanyAndMainUserCreateResponseBodyMain(TeaModel):
    def __init__(
        self,
        aliyun_uid: str = None,
        aliyun_uid_type: str = None,
        company_id: int = None,
        company_name: str = None,
        email: str = None,
        ext_1: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        id: int = None,
        name: str = None,
        phone: str = None,
        status: str = None,
    ):
        self.aliyun_uid = aliyun_uid
        self.aliyun_uid_type = aliyun_uid_type
        self.company_id = company_id
        self.company_name = company_name
        self.email = email
        self.ext_1 = ext_1
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.id = id
        self.name = name
        self.phone = phone
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_uid is not None:
            result['AliyunUid'] = self.aliyun_uid
        if self.aliyun_uid_type is not None:
            result['AliyunUidType'] = self.aliyun_uid_type
        if self.company_id is not None:
            result['CompanyId'] = self.company_id
        if self.company_name is not None:
            result['CompanyName'] = self.company_name
        if self.email is not None:
            result['Email'] = self.email
        if self.ext_1 is not None:
            result['Ext1'] = self.ext_1
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        if self.name is not None:
            result['Name'] = self.name
        if self.phone is not None:
            result['Phone'] = self.phone
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunUid') is not None:
            self.aliyun_uid = m.get('AliyunUid')
        if m.get('AliyunUidType') is not None:
            self.aliyun_uid_type = m.get('AliyunUidType')
        if m.get('CompanyId') is not None:
            self.company_id = m.get('CompanyId')
        if m.get('CompanyName') is not None:
            self.company_name = m.get('CompanyName')
        if m.get('Email') is not None:
            self.email = m.get('Email')
        if m.get('Ext1') is not None:
            self.ext_1 = m.get('Ext1')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Phone') is not None:
            self.phone = m.get('Phone')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class CompanyAndMainUserCreateResponseBody(TeaModel):
    def __init__(
        self,
        company: CompanyAndMainUserCreateResponseBodyCompany = None,
        main: CompanyAndMainUserCreateResponseBodyMain = None,
        request_id: str = None,
    ):
        self.company = company
        self.main = main
        # Id of the request
        self.request_id = request_id

    def validate(self):
        if self.company:
            self.company.validate()
        if self.main:
            self.main.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.company is not None:
            result['Company'] = self.company.to_map()
        if self.main is not None:
            result['Main'] = self.main.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Company') is not None:
            temp_model = CompanyAndMainUserCreateResponseBodyCompany()
            self.company = temp_model.from_map(m['Company'])
        if m.get('Main') is not None:
            temp_model = CompanyAndMainUserCreateResponseBodyMain()
            self.main = temp_model.from_map(m['Main'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class CompanyAndMainUserCreateResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: CompanyAndMainUserCreateResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = CompanyAndMainUserCreateResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CompanyCreateOneRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        params: str = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.params = params

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.params is not None:
            result['Params'] = self.params
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('Params') is not None:
            self.params = m.get('Params')
        return self


class CompanyCreateOneResponseBodyExtraInfo(TeaModel):
    def __init__(
        self,
        ext_info_map: str = None,
        isv_type_enum_list: List[str] = None,
        support_type_enum_list: List[str] = None,
    ):
        self.ext_info_map = ext_info_map
        self.isv_type_enum_list = isv_type_enum_list
        self.support_type_enum_list = support_type_enum_list

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ext_info_map is not None:
            result['ExtInfoMap'] = self.ext_info_map
        if self.isv_type_enum_list is not None:
            result['IsvTypeEnumList'] = self.isv_type_enum_list
        if self.support_type_enum_list is not None:
            result['SupportTypeEnumList'] = self.support_type_enum_list
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ExtInfoMap') is not None:
            self.ext_info_map = m.get('ExtInfoMap')
        if m.get('IsvTypeEnumList') is not None:
            self.isv_type_enum_list = m.get('IsvTypeEnumList')
        if m.get('SupportTypeEnumList') is not None:
            self.support_type_enum_list = m.get('SupportTypeEnumList')
        return self


class CompanyCreateOneResponseBody(TeaModel):
    def __init__(
        self,
        contact_person: str = None,
        extra_info: CompanyCreateOneResponseBodyExtraInfo = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        id: int = None,
        name: str = None,
        phone: str = None,
        request_id: str = None,
        status: str = None,
    ):
        self.contact_person = contact_person
        self.extra_info = extra_info
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.id = id
        self.name = name
        self.phone = phone
        self.request_id = request_id
        self.status = status

    def validate(self):
        if self.extra_info:
            self.extra_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_person is not None:
            result['ContactPerson'] = self.contact_person
        if self.extra_info is not None:
            result['ExtraInfo'] = self.extra_info.to_map()
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        if self.name is not None:
            result['Name'] = self.name
        if self.phone is not None:
            result['Phone'] = self.phone
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ContactPerson') is not None:
            self.contact_person = m.get('ContactPerson')
        if m.get('ExtraInfo') is not None:
            temp_model = CompanyCreateOneResponseBodyExtraInfo()
            self.extra_info = temp_model.from_map(m['ExtraInfo'])
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Phone') is not None:
            self.phone = m.get('Phone')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class CompanyCreateOneResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: CompanyCreateOneResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = CompanyCreateOneResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CompanyDisableOneRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        id: int = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.id = id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.id is not None:
            result['Id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        return self


class CompanyDisableOneResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        success: str = None,
    ):
        # Id of the request
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CompanyDisableOneResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: CompanyDisableOneResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = CompanyDisableOneResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CompanyFindAllRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        params: str = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.params = params

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.params is not None:
            result['Params'] = self.params
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('Params') is not None:
            self.params = m.get('Params')
        return self


class CompanyFindAllResponseBodyContentExtraInfo(TeaModel):
    def __init__(
        self,
        ext_info_map: str = None,
        isv_type_enum_list: List[str] = None,
        support_type_enum_list: List[str] = None,
    ):
        self.ext_info_map = ext_info_map
        self.isv_type_enum_list = isv_type_enum_list
        self.support_type_enum_list = support_type_enum_list

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ext_info_map is not None:
            result['ExtInfoMap'] = self.ext_info_map
        if self.isv_type_enum_list is not None:
            result['IsvTypeEnumList'] = self.isv_type_enum_list
        if self.support_type_enum_list is not None:
            result['SupportTypeEnumList'] = self.support_type_enum_list
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ExtInfoMap') is not None:
            self.ext_info_map = m.get('ExtInfoMap')
        if m.get('IsvTypeEnumList') is not None:
            self.isv_type_enum_list = m.get('IsvTypeEnumList')
        if m.get('SupportTypeEnumList') is not None:
            self.support_type_enum_list = m.get('SupportTypeEnumList')
        return self


class CompanyFindAllResponseBodyContent(TeaModel):
    def __init__(
        self,
        account_nums: str = None,
        contact_person: str = None,
        extra_info: CompanyFindAllResponseBodyContentExtraInfo = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        id: int = None,
        name: str = None,
        phone: str = None,
        status: str = None,
    ):
        self.account_nums = account_nums
        self.contact_person = contact_person
        self.extra_info = extra_info
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.id = id
        self.name = name
        self.phone = phone
        self.status = status

    def validate(self):
        if self.extra_info:
            self.extra_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_nums is not None:
            result['AccountNums'] = self.account_nums
        if self.contact_person is not None:
            result['ContactPerson'] = self.contact_person
        if self.extra_info is not None:
            result['ExtraInfo'] = self.extra_info.to_map()
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        if self.name is not None:
            result['Name'] = self.name
        if self.phone is not None:
            result['Phone'] = self.phone
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccountNums') is not None:
            self.account_nums = m.get('AccountNums')
        if m.get('ContactPerson') is not None:
            self.contact_person = m.get('ContactPerson')
        if m.get('ExtraInfo') is not None:
            temp_model = CompanyFindAllResponseBodyContentExtraInfo()
            self.extra_info = temp_model.from_map(m['ExtraInfo'])
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Phone') is not None:
            self.phone = m.get('Phone')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class CompanyFindAllResponseBodyPageableSort(TeaModel):
    def __init__(
        self,
        empty: bool = None,
        sorted: bool = None,
        unsorted: bool = None,
    ):
        self.empty = empty
        self.sorted = sorted
        self.unsorted = unsorted

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.empty is not None:
            result['Empty'] = self.empty
        if self.sorted is not None:
            result['Sorted'] = self.sorted
        if self.unsorted is not None:
            result['Unsorted'] = self.unsorted
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Empty') is not None:
            self.empty = m.get('Empty')
        if m.get('Sorted') is not None:
            self.sorted = m.get('Sorted')
        if m.get('Unsorted') is not None:
            self.unsorted = m.get('Unsorted')
        return self


class CompanyFindAllResponseBodyPageable(TeaModel):
    def __init__(
        self,
        offset: int = None,
        page_number: int = None,
        page_size: int = None,
        paged: bool = None,
        sort: CompanyFindAllResponseBodyPageableSort = None,
        unpaged: bool = None,
    ):
        self.offset = offset
        self.page_number = page_number
        self.page_size = page_size
        self.paged = paged
        self.sort = sort
        self.unpaged = unpaged

    def validate(self):
        if self.sort:
            self.sort.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.offset is not None:
            result['Offset'] = self.offset
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.paged is not None:
            result['Paged'] = self.paged
        if self.sort is not None:
            result['Sort'] = self.sort.to_map()
        if self.unpaged is not None:
            result['Unpaged'] = self.unpaged
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Offset') is not None:
            self.offset = m.get('Offset')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('Paged') is not None:
            self.paged = m.get('Paged')
        if m.get('Sort') is not None:
            temp_model = CompanyFindAllResponseBodyPageableSort()
            self.sort = temp_model.from_map(m['Sort'])
        if m.get('Unpaged') is not None:
            self.unpaged = m.get('Unpaged')
        return self


class CompanyFindAllResponseBodySort(TeaModel):
    def __init__(
        self,
        empty: bool = None,
        sorted: bool = None,
        unsorted: bool = None,
    ):
        self.empty = empty
        self.sorted = sorted
        self.unsorted = unsorted

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.empty is not None:
            result['Empty'] = self.empty
        if self.sorted is not None:
            result['Sorted'] = self.sorted
        if self.unsorted is not None:
            result['Unsorted'] = self.unsorted
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Empty') is not None:
            self.empty = m.get('Empty')
        if m.get('Sorted') is not None:
            self.sorted = m.get('Sorted')
        if m.get('Unsorted') is not None:
            self.unsorted = m.get('Unsorted')
        return self


class CompanyFindAllResponseBody(TeaModel):
    def __init__(
        self,
        content: List[CompanyFindAllResponseBodyContent] = None,
        empty: bool = None,
        first: bool = None,
        last: bool = None,
        number: int = None,
        number_of_elements: int = None,
        pageable: CompanyFindAllResponseBodyPageable = None,
        request_id: str = None,
        size: int = None,
        sort: CompanyFindAllResponseBodySort = None,
        total_elements: int = None,
        total_pages: int = None,
    ):
        self.content = content
        self.empty = empty
        self.first = first
        self.last = last
        self.number = number
        self.number_of_elements = number_of_elements
        self.pageable = pageable
        # Id of the request
        self.request_id = request_id
        self.size = size
        self.sort = sort
        self.total_elements = total_elements
        self.total_pages = total_pages

    def validate(self):
        if self.content:
            for k in self.content:
                if k:
                    k.validate()
        if self.pageable:
            self.pageable.validate()
        if self.sort:
            self.sort.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Content'] = []
        if self.content is not None:
            for k in self.content:
                result['Content'].append(k.to_map() if k else None)
        if self.empty is not None:
            result['Empty'] = self.empty
        if self.first is not None:
            result['First'] = self.first
        if self.last is not None:
            result['Last'] = self.last
        if self.number is not None:
            result['Number'] = self.number
        if self.number_of_elements is not None:
            result['NumberOfElements'] = self.number_of_elements
        if self.pageable is not None:
            result['Pageable'] = self.pageable.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.size is not None:
            result['Size'] = self.size
        if self.sort is not None:
            result['Sort'] = self.sort.to_map()
        if self.total_elements is not None:
            result['TotalElements'] = self.total_elements
        if self.total_pages is not None:
            result['TotalPages'] = self.total_pages
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.content = []
        if m.get('Content') is not None:
            for k in m.get('Content'):
                temp_model = CompanyFindAllResponseBodyContent()
                self.content.append(temp_model.from_map(k))
        if m.get('Empty') is not None:
            self.empty = m.get('Empty')
        if m.get('First') is not None:
            self.first = m.get('First')
        if m.get('Last') is not None:
            self.last = m.get('Last')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('NumberOfElements') is not None:
            self.number_of_elements = m.get('NumberOfElements')
        if m.get('Pageable') is not None:
            temp_model = CompanyFindAllResponseBodyPageable()
            self.pageable = temp_model.from_map(m['Pageable'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Size') is not None:
            self.size = m.get('Size')
        if m.get('Sort') is not None:
            temp_model = CompanyFindAllResponseBodySort()
            self.sort = temp_model.from_map(m['Sort'])
        if m.get('TotalElements') is not None:
            self.total_elements = m.get('TotalElements')
        if m.get('TotalPages') is not None:
            self.total_pages = m.get('TotalPages')
        return self


class CompanyFindAllResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: CompanyFindAllResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = CompanyFindAllResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CompanyFindByIsvTypeRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        isv_type: str = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.isv_type = isv_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.isv_type is not None:
            result['IsvType'] = self.isv_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('IsvType') is not None:
            self.isv_type = m.get('IsvType')
        return self


class CompanyFindByIsvTypeResponseBodyDataExtraInfo(TeaModel):
    def __init__(
        self,
        ext_info_map: str = None,
        isv_type_enum_list: List[str] = None,
        support_type_enum_list: List[str] = None,
    ):
        self.ext_info_map = ext_info_map
        self.isv_type_enum_list = isv_type_enum_list
        self.support_type_enum_list = support_type_enum_list

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ext_info_map is not None:
            result['ExtInfoMap'] = self.ext_info_map
        if self.isv_type_enum_list is not None:
            result['IsvTypeEnumList'] = self.isv_type_enum_list
        if self.support_type_enum_list is not None:
            result['SupportTypeEnumList'] = self.support_type_enum_list
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ExtInfoMap') is not None:
            self.ext_info_map = m.get('ExtInfoMap')
        if m.get('IsvTypeEnumList') is not None:
            self.isv_type_enum_list = m.get('IsvTypeEnumList')
        if m.get('SupportTypeEnumList') is not None:
            self.support_type_enum_list = m.get('SupportTypeEnumList')
        return self


class CompanyFindByIsvTypeResponseBodyData(TeaModel):
    def __init__(
        self,
        contact_person: str = None,
        extra_info: CompanyFindByIsvTypeResponseBodyDataExtraInfo = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        id: int = None,
        name: str = None,
        phone: str = None,
        status: str = None,
    ):
        self.contact_person = contact_person
        self.extra_info = extra_info
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.id = id
        self.name = name
        self.phone = phone
        self.status = status

    def validate(self):
        if self.extra_info:
            self.extra_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_person is not None:
            result['ContactPerson'] = self.contact_person
        if self.extra_info is not None:
            result['ExtraInfo'] = self.extra_info.to_map()
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        if self.name is not None:
            result['Name'] = self.name
        if self.phone is not None:
            result['Phone'] = self.phone
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ContactPerson') is not None:
            self.contact_person = m.get('ContactPerson')
        if m.get('ExtraInfo') is not None:
            temp_model = CompanyFindByIsvTypeResponseBodyDataExtraInfo()
            self.extra_info = temp_model.from_map(m['ExtraInfo'])
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Phone') is not None:
            self.phone = m.get('Phone')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class CompanyFindByIsvTypeResponseBody(TeaModel):
    def __init__(
        self,
        data: List[CompanyFindByIsvTypeResponseBodyData] = None,
        request_id: str = None,
    ):
        self.data = data
        # Id of the request
        self.request_id = request_id

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Data'] = []
        if self.data is not None:
            for k in self.data:
                result['Data'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.data = []
        if m.get('Data') is not None:
            for k in m.get('Data'):
                temp_model = CompanyFindByIsvTypeResponseBodyData()
                self.data.append(temp_model.from_map(k))
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class CompanyFindByIsvTypeResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: CompanyFindByIsvTypeResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = CompanyFindByIsvTypeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CompanyFindOneRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        company_id: int = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.company_id = company_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.company_id is not None:
            result['CompanyId'] = self.company_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('CompanyId') is not None:
            self.company_id = m.get('CompanyId')
        return self


class CompanyFindOneResponseBodyExtraInfo(TeaModel):
    def __init__(
        self,
        ext_info_map: str = None,
        isv_type_enum_list: List[str] = None,
        support_type_enum_list: List[str] = None,
    ):
        self.ext_info_map = ext_info_map
        self.isv_type_enum_list = isv_type_enum_list
        self.support_type_enum_list = support_type_enum_list

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ext_info_map is not None:
            result['ExtInfoMap'] = self.ext_info_map
        if self.isv_type_enum_list is not None:
            result['IsvTypeEnumList'] = self.isv_type_enum_list
        if self.support_type_enum_list is not None:
            result['SupportTypeEnumList'] = self.support_type_enum_list
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ExtInfoMap') is not None:
            self.ext_info_map = m.get('ExtInfoMap')
        if m.get('IsvTypeEnumList') is not None:
            self.isv_type_enum_list = m.get('IsvTypeEnumList')
        if m.get('SupportTypeEnumList') is not None:
            self.support_type_enum_list = m.get('SupportTypeEnumList')
        return self


class CompanyFindOneResponseBody(TeaModel):
    def __init__(
        self,
        contact_person: str = None,
        extra_info: CompanyFindOneResponseBodyExtraInfo = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        id: int = None,
        name: str = None,
        phone: str = None,
        request_id: str = None,
        status: str = None,
    ):
        self.contact_person = contact_person
        self.extra_info = extra_info
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.id = id
        self.name = name
        self.phone = phone
        # Id of the request
        self.request_id = request_id
        self.status = status

    def validate(self):
        if self.extra_info:
            self.extra_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_person is not None:
            result['ContactPerson'] = self.contact_person
        if self.extra_info is not None:
            result['ExtraInfo'] = self.extra_info.to_map()
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        if self.name is not None:
            result['Name'] = self.name
        if self.phone is not None:
            result['Phone'] = self.phone
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ContactPerson') is not None:
            self.contact_person = m.get('ContactPerson')
        if m.get('ExtraInfo') is not None:
            temp_model = CompanyFindOneResponseBodyExtraInfo()
            self.extra_info = temp_model.from_map(m['ExtraInfo'])
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Phone') is not None:
            self.phone = m.get('Phone')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class CompanyFindOneResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: CompanyFindOneResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = CompanyFindOneResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CompanyListByConditionRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        custom_see_self: bool = None,
        isv_type: str = None,
        support_type: str = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.custom_see_self = custom_see_self
        self.isv_type = isv_type
        self.support_type = support_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.custom_see_self is not None:
            result['CustomSeeSelf'] = self.custom_see_self
        if self.isv_type is not None:
            result['IsvType'] = self.isv_type
        if self.support_type is not None:
            result['SupportType'] = self.support_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('CustomSeeSelf') is not None:
            self.custom_see_self = m.get('CustomSeeSelf')
        if m.get('IsvType') is not None:
            self.isv_type = m.get('IsvType')
        if m.get('SupportType') is not None:
            self.support_type = m.get('SupportType')
        return self


class CompanyListByConditionResponseBodyDataExtraInfo(TeaModel):
    def __init__(
        self,
        ext_info_map: str = None,
        isv_type_enum_list: List[str] = None,
        support_type_enum_list: List[str] = None,
    ):
        self.ext_info_map = ext_info_map
        self.isv_type_enum_list = isv_type_enum_list
        self.support_type_enum_list = support_type_enum_list

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ext_info_map is not None:
            result['ExtInfoMap'] = self.ext_info_map
        if self.isv_type_enum_list is not None:
            result['IsvTypeEnumList'] = self.isv_type_enum_list
        if self.support_type_enum_list is not None:
            result['SupportTypeEnumList'] = self.support_type_enum_list
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ExtInfoMap') is not None:
            self.ext_info_map = m.get('ExtInfoMap')
        if m.get('IsvTypeEnumList') is not None:
            self.isv_type_enum_list = m.get('IsvTypeEnumList')
        if m.get('SupportTypeEnumList') is not None:
            self.support_type_enum_list = m.get('SupportTypeEnumList')
        return self


class CompanyListByConditionResponseBodyData(TeaModel):
    def __init__(
        self,
        contact_person: str = None,
        extra_info: CompanyListByConditionResponseBodyDataExtraInfo = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        id: int = None,
        name: str = None,
        phone: str = None,
        status: str = None,
    ):
        self.contact_person = contact_person
        self.extra_info = extra_info
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.id = id
        self.name = name
        self.phone = phone
        self.status = status

    def validate(self):
        if self.extra_info:
            self.extra_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_person is not None:
            result['ContactPerson'] = self.contact_person
        if self.extra_info is not None:
            result['ExtraInfo'] = self.extra_info.to_map()
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        if self.name is not None:
            result['Name'] = self.name
        if self.phone is not None:
            result['Phone'] = self.phone
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ContactPerson') is not None:
            self.contact_person = m.get('ContactPerson')
        if m.get('ExtraInfo') is not None:
            temp_model = CompanyListByConditionResponseBodyDataExtraInfo()
            self.extra_info = temp_model.from_map(m['ExtraInfo'])
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Phone') is not None:
            self.phone = m.get('Phone')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class CompanyListByConditionResponseBody(TeaModel):
    def __init__(
        self,
        data: List[CompanyListByConditionResponseBodyData] = None,
        request_id: str = None,
    ):
        self.data = data
        # Id of the request
        self.request_id = request_id

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Data'] = []
        if self.data is not None:
            for k in self.data:
                result['Data'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.data = []
        if m.get('Data') is not None:
            for k in m.get('Data'):
                temp_model = CompanyListByConditionResponseBodyData()
                self.data.append(temp_model.from_map(k))
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class CompanyListByConditionResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: CompanyListByConditionResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = CompanyListByConditionResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CompanyUpdateOneRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        params: str = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.params = params

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.params is not None:
            result['Params'] = self.params
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('Params') is not None:
            self.params = m.get('Params')
        return self


class CompanyUpdateOneResponseBodyExtraInfo(TeaModel):
    def __init__(
        self,
        ext_info_map: str = None,
        isv_type_enum_list: List[str] = None,
        support_type_enum_list: List[str] = None,
    ):
        self.ext_info_map = ext_info_map
        self.isv_type_enum_list = isv_type_enum_list
        self.support_type_enum_list = support_type_enum_list

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ext_info_map is not None:
            result['ExtInfoMap'] = self.ext_info_map
        if self.isv_type_enum_list is not None:
            result['IsvTypeEnumList'] = self.isv_type_enum_list
        if self.support_type_enum_list is not None:
            result['SupportTypeEnumList'] = self.support_type_enum_list
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ExtInfoMap') is not None:
            self.ext_info_map = m.get('ExtInfoMap')
        if m.get('IsvTypeEnumList') is not None:
            self.isv_type_enum_list = m.get('IsvTypeEnumList')
        if m.get('SupportTypeEnumList') is not None:
            self.support_type_enum_list = m.get('SupportTypeEnumList')
        return self


class CompanyUpdateOneResponseBody(TeaModel):
    def __init__(
        self,
        contact_person: str = None,
        extra_info: CompanyUpdateOneResponseBodyExtraInfo = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        id: int = None,
        name: str = None,
        phone: str = None,
        request_id: str = None,
        status: str = None,
    ):
        self.contact_person = contact_person
        self.extra_info = extra_info
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.id = id
        self.name = name
        self.phone = phone
        self.request_id = request_id
        self.status = status

    def validate(self):
        if self.extra_info:
            self.extra_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_person is not None:
            result['ContactPerson'] = self.contact_person
        if self.extra_info is not None:
            result['ExtraInfo'] = self.extra_info.to_map()
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        if self.name is not None:
            result['Name'] = self.name
        if self.phone is not None:
            result['Phone'] = self.phone
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ContactPerson') is not None:
            self.contact_person = m.get('ContactPerson')
        if m.get('ExtraInfo') is not None:
            temp_model = CompanyUpdateOneResponseBodyExtraInfo()
            self.extra_info = temp_model.from_map(m['ExtraInfo'])
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Phone') is not None:
            self.phone = m.get('Phone')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class CompanyUpdateOneResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: CompanyUpdateOneResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = CompanyUpdateOneResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateBimProjectRequest(TeaModel):
    def __init__(
        self,
        component: List[Dict[str, Any]] = None,
        name: str = None,
        remarks: str = None,
        type: str = None,
    ):
        self.component = component
        # 项目名
        self.name = name
        # 备注
        self.remarks = remarks
        # 类型
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.component is not None:
            result['Component'] = self.component
        if self.name is not None:
            result['Name'] = self.name
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Component') is not None:
            self.component = m.get('Component')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class CreateBimProjectShrinkRequest(TeaModel):
    def __init__(
        self,
        component_shrink: str = None,
        name: str = None,
        remarks: str = None,
        type: str = None,
    ):
        self.component_shrink = component_shrink
        # 项目名
        self.name = name
        # 备注
        self.remarks = remarks
        # 类型
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.component_shrink is not None:
            result['Component'] = self.component_shrink
        if self.name is not None:
            result['Name'] = self.name
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Component') is not None:
            self.component_shrink = m.get('Component')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class CreateBimProjectResponseBodyDatas(TeaModel):
    def __init__(
        self,
        component: List[Dict[str, Any]] = None,
        id: Dict[str, Any] = None,
        modeling_status: int = None,
        name: str = None,
        phase: str = None,
        remarks: str = None,
        type: str = None,
    ):
        # 模型构件
        self.component = component
        # 任务id(项目id)
        self.id = id
        self.modeling_status = modeling_status
        self.name = name
        # 阶段
        self.phase = phase
        self.remarks = remarks
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.component is not None:
            result['Component'] = self.component
        if self.id is not None:
            result['Id'] = self.id
        if self.modeling_status is not None:
            result['ModelingStatus'] = self.modeling_status
        if self.name is not None:
            result['Name'] = self.name
        if self.phase is not None:
            result['Phase'] = self.phase
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Component') is not None:
            self.component = m.get('Component')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('ModelingStatus') is not None:
            self.modeling_status = m.get('ModelingStatus')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Phase') is not None:
            self.phase = m.get('Phase')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class CreateBimProjectResponseBody(TeaModel):
    def __init__(
        self,
        datas: CreateBimProjectResponseBodyDatas = None,
        err_code: int = None,
        err_msg: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.datas = datas
        self.err_code = err_code
        self.err_msg = err_msg
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.datas:
            self.datas.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.datas is not None:
            result['Datas'] = self.datas.to_map()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_msg is not None:
            result['ErrMsg'] = self.err_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Datas') is not None:
            temp_model = CreateBimProjectResponseBodyDatas()
            self.datas = temp_model.from_map(m['Datas'])
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMsg') is not None:
            self.err_msg = m.get('ErrMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateBimProjectResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: CreateBimProjectResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = CreateBimProjectResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateMainUserRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        params: str = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.params = params

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.params is not None:
            result['Params'] = self.params
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('Params') is not None:
            self.params = m.get('Params')
        return self


class CreateMainUserResponseBody(TeaModel):
    def __init__(
        self,
        company_id: int = None,
        company_name: str = None,
        email: str = None,
        ext_1: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        id: int = None,
        name: str = None,
        phone: str = None,
        request_id: str = None,
        status: str = None,
    ):
        self.company_id = company_id
        self.company_name = company_name
        self.email = email
        self.ext_1 = ext_1
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.id = id
        self.name = name
        self.phone = phone
        # Id of the request
        self.request_id = request_id
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.company_id is not None:
            result['CompanyId'] = self.company_id
        if self.company_name is not None:
            result['CompanyName'] = self.company_name
        if self.email is not None:
            result['Email'] = self.email
        if self.ext_1 is not None:
            result['Ext1'] = self.ext_1
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        if self.name is not None:
            result['Name'] = self.name
        if self.phone is not None:
            result['Phone'] = self.phone
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CompanyId') is not None:
            self.company_id = m.get('CompanyId')
        if m.get('CompanyName') is not None:
            self.company_name = m.get('CompanyName')
        if m.get('Email') is not None:
            self.email = m.get('Email')
        if m.get('Ext1') is not None:
            self.ext_1 = m.get('Ext1')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Phone') is not None:
            self.phone = m.get('Phone')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class CreateMainUserResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: CreateMainUserResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = CreateMainUserResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateMaterialRequest(TeaModel):
    def __init__(
        self,
        client_token: str = None,
        name: str = None,
        path: str = None,
        type: str = None,
        uuid: str = None,
    ):
        self.client_token = client_token
        self.name = name
        self.path = path
        self.type = type
        self.uuid = uuid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.client_token is not None:
            result['ClientToken'] = self.client_token
        if self.name is not None:
            result['Name'] = self.name
        if self.path is not None:
            result['Path'] = self.path
        if self.type is not None:
            result['Type'] = self.type
        if self.uuid is not None:
            result['Uuid'] = self.uuid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ClientToken') is not None:
            self.client_token = m.get('ClientToken')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Path') is not None:
            self.path = m.get('Path')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Uuid') is not None:
            self.uuid = m.get('Uuid')
        return self


class CreateMaterialResponseBody(TeaModel):
    def __init__(
        self,
        data: Dict[str, Any] = None,
        error: str = None,
        msg_code: str = None,
        msg_info: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.data = data
        self.error = error
        self.msg_code = msg_code
        self.msg_info = msg_info
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data
        if self.error is not None:
            result['Error'] = self.error
        if self.msg_code is not None:
            result['MsgCode'] = self.msg_code
        if self.msg_info is not None:
            result['MsgInfo'] = self.msg_info
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Error') is not None:
            self.error = m.get('Error')
        if m.get('MsgCode') is not None:
            self.msg_code = m.get('MsgCode')
        if m.get('MsgInfo') is not None:
            self.msg_info = m.get('MsgInfo')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateMaterialResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: CreateMaterialResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = CreateMaterialResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateOrUpdateExtInfoRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        ext_info: str = None,
        project_id: str = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.ext_info = ext_info
        self.project_id = project_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.ext_info is not None:
            result['ExtInfo'] = self.ext_info
        if self.project_id is not None:
            result['ProjectId'] = self.project_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('ExtInfo') is not None:
            self.ext_info = m.get('ExtInfo')
        if m.get('ProjectId') is not None:
            self.project_id = m.get('ProjectId')
        return self


class CreateOrUpdateExtInfoResponseBody(TeaModel):
    def __init__(
        self,
        oss_sts: str = None,
        pipeline_status: str = None,
        project_id: int = None,
        request_id: str = None,
    ):
        self.oss_sts = oss_sts
        self.pipeline_status = pipeline_status
        self.project_id = project_id
        # Id of the request
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.oss_sts is not None:
            result['OssSts'] = self.oss_sts
        if self.pipeline_status is not None:
            result['PipelineStatus'] = self.pipeline_status
        if self.project_id is not None:
            result['ProjectId'] = self.project_id
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OssSts') is not None:
            self.oss_sts = m.get('OssSts')
        if m.get('PipelineStatus') is not None:
            self.pipeline_status = m.get('PipelineStatus')
        if m.get('ProjectId') is not None:
            self.project_id = m.get('ProjectId')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class CreateOrUpdateExtInfoResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: CreateOrUpdateExtInfoResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = CreateOrUpdateExtInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreatePipelineNodeInstanceRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        params: str = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.params = params

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.params is not None:
            result['Params'] = self.params
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('Params') is not None:
            self.params = m.get('Params')
        return self


class CreatePipelineNodeInstanceResponseBody(TeaModel):
    def __init__(
        self,
        error_code: str = None,
        error_msg: str = None,
        request_id: str = None,
        result_obj: Dict[str, Any] = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.error_msg = error_msg
        self.request_id = request_id
        self.result_obj = result_obj
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.error_msg is not None:
            result['ErrorMsg'] = self.error_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_obj is not None:
            result['ResultObj'] = self.result_obj
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('ErrorMsg') is not None:
            self.error_msg = m.get('ErrorMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultObj') is not None:
            self.result_obj = m.get('ResultObj')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreatePipelineNodeInstanceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: CreatePipelineNodeInstanceResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = CreatePipelineNodeInstanceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateRamUserRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        params: str = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.params = params

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.params is not None:
            result['Params'] = self.params
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('Params') is not None:
            self.params = m.get('Params')
        return self


class CreateRamUserResponseBody(TeaModel):
    def __init__(
        self,
        company_id: int = None,
        email: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        id: int = None,
        name: str = None,
        phone: str = None,
        request_id: str = None,
        status: str = None,
    ):
        self.company_id = company_id
        self.email = email
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.id = id
        self.name = name
        self.phone = phone
        # Id of the request
        self.request_id = request_id
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.company_id is not None:
            result['CompanyId'] = self.company_id
        if self.email is not None:
            result['Email'] = self.email
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        if self.name is not None:
            result['Name'] = self.name
        if self.phone is not None:
            result['Phone'] = self.phone
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CompanyId') is not None:
            self.company_id = m.get('CompanyId')
        if m.get('Email') is not None:
            self.email = m.get('Email')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Phone') is not None:
            self.phone = m.get('Phone')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class CreateRamUserResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: CreateRamUserResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = CreateRamUserResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CustomCreateOrderRequest(TeaModel):
    def __init__(
        self,
        item_type: str = None,
        order_name: str = None,
        order_photo_contact: str = None,
        photo_address: str = None,
        photo_environment: str = None,
        photo_floor_num: int = None,
    ):
        self.item_type = item_type
        self.order_name = order_name
        self.order_photo_contact = order_photo_contact
        self.photo_address = photo_address
        self.photo_environment = photo_environment
        self.photo_floor_num = photo_floor_num

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.item_type is not None:
            result['ItemType'] = self.item_type
        if self.order_name is not None:
            result['OrderName'] = self.order_name
        if self.order_photo_contact is not None:
            result['OrderPhotoContact'] = self.order_photo_contact
        if self.photo_address is not None:
            result['PhotoAddress'] = self.photo_address
        if self.photo_environment is not None:
            result['PhotoEnvironment'] = self.photo_environment
        if self.photo_floor_num is not None:
            result['PhotoFloorNum'] = self.photo_floor_num
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ItemType') is not None:
            self.item_type = m.get('ItemType')
        if m.get('OrderName') is not None:
            self.order_name = m.get('OrderName')
        if m.get('OrderPhotoContact') is not None:
            self.order_photo_contact = m.get('OrderPhotoContact')
        if m.get('PhotoAddress') is not None:
            self.photo_address = m.get('PhotoAddress')
        if m.get('PhotoEnvironment') is not None:
            self.photo_environment = m.get('PhotoEnvironment')
        if m.get('PhotoFloorNum') is not None:
            self.photo_floor_num = m.get('PhotoFloorNum')
        return self


class CustomCreateOrderResponseBodyResultObj(TeaModel):
    def __init__(
        self,
        cipher_id: str = None,
        cipher_project_id: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        order_name: str = None,
        order_state: str = None,
    ):
        self.cipher_id = cipher_id
        self.cipher_project_id = cipher_project_id
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.order_name = order_name
        self.order_state = order_state

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cipher_id is not None:
            result['CipherId'] = self.cipher_id
        if self.cipher_project_id is not None:
            result['CipherProjectId'] = self.cipher_project_id
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.order_name is not None:
            result['OrderName'] = self.order_name
        if self.order_state is not None:
            result['OrderState'] = self.order_state
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CipherId') is not None:
            self.cipher_id = m.get('CipherId')
        if m.get('CipherProjectId') is not None:
            self.cipher_project_id = m.get('CipherProjectId')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('OrderName') is not None:
            self.order_name = m.get('OrderName')
        if m.get('OrderState') is not None:
            self.order_state = m.get('OrderState')
        return self


class CustomCreateOrderResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
        result_obj: CustomCreateOrderResponseBodyResultObj = None,
        success: bool = None,
    ):
        self.code = code
        self.message = message
        # Id of the request
        self.request_id = request_id
        self.result_obj = result_obj
        self.success = success

    def validate(self):
        if self.result_obj:
            self.result_obj.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_obj is not None:
            result['ResultObj'] = self.result_obj.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultObj') is not None:
            temp_model = CustomCreateOrderResponseBodyResultObj()
            self.result_obj = temp_model.from_map(m['ResultObj'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CustomCreateOrderResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: CustomCreateOrderResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = CustomCreateOrderResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CustomFindOrderRequest(TeaModel):
    def __init__(
        self,
        order_id_cipher: str = None,
        order_name: str = None,
        order_state: str = None,
        page: int = None,
        size: int = None,
        sort: str = None,
    ):
        self.order_id_cipher = order_id_cipher
        self.order_name = order_name
        self.order_state = order_state
        self.page = page
        self.size = size
        self.sort = sort

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.order_id_cipher is not None:
            result['OrderIdCipher'] = self.order_id_cipher
        if self.order_name is not None:
            result['OrderName'] = self.order_name
        if self.order_state is not None:
            result['OrderState'] = self.order_state
        if self.page is not None:
            result['Page'] = self.page
        if self.size is not None:
            result['Size'] = self.size
        if self.sort is not None:
            result['Sort'] = self.sort
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OrderIdCipher') is not None:
            self.order_id_cipher = m.get('OrderIdCipher')
        if m.get('OrderName') is not None:
            self.order_name = m.get('OrderName')
        if m.get('OrderState') is not None:
            self.order_state = m.get('OrderState')
        if m.get('Page') is not None:
            self.page = m.get('Page')
        if m.get('Size') is not None:
            self.size = m.get('Size')
        if m.get('Sort') is not None:
            self.sort = m.get('Sort')
        return self


class CustomFindOrderResponseBodyResultObjContent(TeaModel):
    def __init__(
        self,
        cipher_id: str = None,
        cipher_project_id: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        order_name: str = None,
        order_state: str = None,
    ):
        self.cipher_id = cipher_id
        self.cipher_project_id = cipher_project_id
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.order_name = order_name
        self.order_state = order_state

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cipher_id is not None:
            result['CipherId'] = self.cipher_id
        if self.cipher_project_id is not None:
            result['CipherProjectId'] = self.cipher_project_id
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.order_name is not None:
            result['OrderName'] = self.order_name
        if self.order_state is not None:
            result['OrderState'] = self.order_state
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CipherId') is not None:
            self.cipher_id = m.get('CipherId')
        if m.get('CipherProjectId') is not None:
            self.cipher_project_id = m.get('CipherProjectId')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('OrderName') is not None:
            self.order_name = m.get('OrderName')
        if m.get('OrderState') is not None:
            self.order_state = m.get('OrderState')
        return self


class CustomFindOrderResponseBodyResultObj(TeaModel):
    def __init__(
        self,
        content: List[CustomFindOrderResponseBodyResultObjContent] = None,
        size: int = None,
        total_elements: int = None,
        total_pages: int = None,
    ):
        self.content = content
        self.size = size
        self.total_elements = total_elements
        self.total_pages = total_pages

    def validate(self):
        if self.content:
            for k in self.content:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Content'] = []
        if self.content is not None:
            for k in self.content:
                result['Content'].append(k.to_map() if k else None)
        if self.size is not None:
            result['Size'] = self.size
        if self.total_elements is not None:
            result['TotalElements'] = self.total_elements
        if self.total_pages is not None:
            result['TotalPages'] = self.total_pages
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.content = []
        if m.get('Content') is not None:
            for k in m.get('Content'):
                temp_model = CustomFindOrderResponseBodyResultObjContent()
                self.content.append(temp_model.from_map(k))
        if m.get('Size') is not None:
            self.size = m.get('Size')
        if m.get('TotalElements') is not None:
            self.total_elements = m.get('TotalElements')
        if m.get('TotalPages') is not None:
            self.total_pages = m.get('TotalPages')
        return self


class CustomFindOrderResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
        result_obj: CustomFindOrderResponseBodyResultObj = None,
        success: bool = None,
    ):
        self.code = code
        self.message = message
        # Id of the request
        self.request_id = request_id
        self.result_obj = result_obj
        self.success = success

    def validate(self):
        if self.result_obj:
            self.result_obj.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_obj is not None:
            result['ResultObj'] = self.result_obj.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultObj') is not None:
            temp_model = CustomFindOrderResponseBodyResultObj()
            self.result_obj = temp_model.from_map(m['ResultObj'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CustomFindOrderResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: CustomFindOrderResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = CustomFindOrderResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CustomFindOrderStatusRequest(TeaModel):
    def __init__(
        self,
        order_id_cipher: str = None,
    ):
        self.order_id_cipher = order_id_cipher

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.order_id_cipher is not None:
            result['OrderIdCipher'] = self.order_id_cipher
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OrderIdCipher') is not None:
            self.order_id_cipher = m.get('OrderIdCipher')
        return self


class CustomFindOrderStatusResponseBodyResultObj(TeaModel):
    def __init__(
        self,
        status: str = None,
    ):
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class CustomFindOrderStatusResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
        result_obj: CustomFindOrderStatusResponseBodyResultObj = None,
        success: bool = None,
    ):
        self.code = code
        self.message = message
        # Id of the request
        self.request_id = request_id
        self.result_obj = result_obj
        self.success = success

    def validate(self):
        if self.result_obj:
            self.result_obj.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_obj is not None:
            result['ResultObj'] = self.result_obj.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultObj') is not None:
            temp_model = CustomFindOrderStatusResponseBodyResultObj()
            self.result_obj = temp_model.from_map(m['ResultObj'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CustomFindOrderStatusResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: CustomFindOrderStatusResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = CustomFindOrderStatusResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CustomGetCdnModelPathRequest(TeaModel):
    def __init__(
        self,
        order_id_cipher: str = None,
    ):
        self.order_id_cipher = order_id_cipher

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.order_id_cipher is not None:
            result['OrderIdCipher'] = self.order_id_cipher
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OrderIdCipher') is not None:
            self.order_id_cipher = m.get('OrderIdCipher')
        return self


class CustomGetCdnModelPathResponseBodyResultObj(TeaModel):
    def __init__(
        self,
        path: str = None,
    ):
        self.path = path

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.path is not None:
            result['Path'] = self.path
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Path') is not None:
            self.path = m.get('Path')
        return self


class CustomGetCdnModelPathResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
        result_obj: CustomGetCdnModelPathResponseBodyResultObj = None,
        success: bool = None,
    ):
        self.code = code
        self.message = message
        # Id of the request
        self.request_id = request_id
        self.result_obj = result_obj
        self.success = success

    def validate(self):
        if self.result_obj:
            self.result_obj.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_obj is not None:
            result['ResultObj'] = self.result_obj.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultObj') is not None:
            temp_model = CustomGetCdnModelPathResponseBodyResultObj()
            self.result_obj = temp_model.from_map(m['ResultObj'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CustomGetCdnModelPathResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: CustomGetCdnModelPathResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = CustomGetCdnModelPathResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DataStoreCredentialRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        type: str = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class DataStoreCredentialResponseBody(TeaModel):
    def __init__(
        self,
        access_key_id: str = None,
        access_key_secret: str = None,
        endpoint: str = None,
        expiration: str = None,
        oss_path: str = None,
        request_id: str = None,
        security_token: str = None,
    ):
        self.access_key_id = access_key_id
        self.access_key_secret = access_key_secret
        self.endpoint = endpoint
        self.expiration = expiration
        self.oss_path = oss_path
        # Id of the request
        self.request_id = request_id
        self.security_token = security_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.access_key_id is not None:
            result['AccessKeyId'] = self.access_key_id
        if self.access_key_secret is not None:
            result['AccessKeySecret'] = self.access_key_secret
        if self.endpoint is not None:
            result['Endpoint'] = self.endpoint
        if self.expiration is not None:
            result['Expiration'] = self.expiration
        if self.oss_path is not None:
            result['OssPath'] = self.oss_path
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.security_token is not None:
            result['SecurityToken'] = self.security_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccessKeyId') is not None:
            self.access_key_id = m.get('AccessKeyId')
        if m.get('AccessKeySecret') is not None:
            self.access_key_secret = m.get('AccessKeySecret')
        if m.get('Endpoint') is not None:
            self.endpoint = m.get('Endpoint')
        if m.get('Expiration') is not None:
            self.expiration = m.get('Expiration')
        if m.get('OssPath') is not None:
            self.oss_path = m.get('OssPath')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('SecurityToken') is not None:
            self.security_token = m.get('SecurityToken')
        return self


class DataStoreCredentialResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: DataStoreCredentialResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = DataStoreCredentialResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DatasetConfigFindAllRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        dataset_id: int = None,
        size: int = None,
        sort: str = None,
        type: str = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.dataset_id = dataset_id
        self.size = size
        self.sort = sort
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.dataset_id is not None:
            result['DatasetId'] = self.dataset_id
        if self.size is not None:
            result['Size'] = self.size
        if self.sort is not None:
            result['Sort'] = self.sort
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('DatasetId') is not None:
            self.dataset_id = m.get('DatasetId')
        if m.get('Size') is not None:
            self.size = m.get('Size')
        if m.get('Sort') is not None:
            self.sort = m.get('Sort')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class DatasetConfigFindAllResponseBodyContent(TeaModel):
    def __init__(
        self,
        gmt_create: str = None,
        gmt_modified: str = None,
        gmt_published: str = None,
        id: int = None,
        key: str = None,
        tag: str = None,
        type: str = None,
        value: Dict[str, Any] = None,
    ):
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.gmt_published = gmt_published
        self.id = id
        self.key = key
        self.tag = tag
        self.type = type
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.gmt_published is not None:
            result['GmtPublished'] = self.gmt_published
        if self.id is not None:
            result['Id'] = self.id
        if self.key is not None:
            result['Key'] = self.key
        if self.tag is not None:
            result['Tag'] = self.tag
        if self.type is not None:
            result['Type'] = self.type
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('GmtPublished') is not None:
            self.gmt_published = m.get('GmtPublished')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Tag') is not None:
            self.tag = m.get('Tag')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class DatasetConfigFindAllResponseBodyPageableSort(TeaModel):
    def __init__(
        self,
        empty: bool = None,
        sorted: bool = None,
        unsorted: bool = None,
    ):
        self.empty = empty
        self.sorted = sorted
        self.unsorted = unsorted

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.empty is not None:
            result['Empty'] = self.empty
        if self.sorted is not None:
            result['Sorted'] = self.sorted
        if self.unsorted is not None:
            result['Unsorted'] = self.unsorted
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Empty') is not None:
            self.empty = m.get('Empty')
        if m.get('Sorted') is not None:
            self.sorted = m.get('Sorted')
        if m.get('Unsorted') is not None:
            self.unsorted = m.get('Unsorted')
        return self


class DatasetConfigFindAllResponseBodyPageable(TeaModel):
    def __init__(
        self,
        offset: int = None,
        page_number: int = None,
        page_size: int = None,
        paged: bool = None,
        sort: DatasetConfigFindAllResponseBodyPageableSort = None,
        unpaged: bool = None,
    ):
        self.offset = offset
        self.page_number = page_number
        self.page_size = page_size
        self.paged = paged
        self.sort = sort
        self.unpaged = unpaged

    def validate(self):
        if self.sort:
            self.sort.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.offset is not None:
            result['Offset'] = self.offset
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.paged is not None:
            result['Paged'] = self.paged
        if self.sort is not None:
            result['Sort'] = self.sort.to_map()
        if self.unpaged is not None:
            result['Unpaged'] = self.unpaged
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Offset') is not None:
            self.offset = m.get('Offset')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('Paged') is not None:
            self.paged = m.get('Paged')
        if m.get('Sort') is not None:
            temp_model = DatasetConfigFindAllResponseBodyPageableSort()
            self.sort = temp_model.from_map(m['Sort'])
        if m.get('Unpaged') is not None:
            self.unpaged = m.get('Unpaged')
        return self


class DatasetConfigFindAllResponseBodySort(TeaModel):
    def __init__(
        self,
        empty: bool = None,
        sorted: bool = None,
        unsorted: bool = None,
    ):
        self.empty = empty
        self.sorted = sorted
        self.unsorted = unsorted

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.empty is not None:
            result['Empty'] = self.empty
        if self.sorted is not None:
            result['Sorted'] = self.sorted
        if self.unsorted is not None:
            result['Unsorted'] = self.unsorted
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Empty') is not None:
            self.empty = m.get('Empty')
        if m.get('Sorted') is not None:
            self.sorted = m.get('Sorted')
        if m.get('Unsorted') is not None:
            self.unsorted = m.get('Unsorted')
        return self


class DatasetConfigFindAllResponseBody(TeaModel):
    def __init__(
        self,
        content: List[DatasetConfigFindAllResponseBodyContent] = None,
        empty: bool = None,
        first: bool = None,
        last: bool = None,
        number: int = None,
        number_of_elements: int = None,
        pageable: DatasetConfigFindAllResponseBodyPageable = None,
        request_id: str = None,
        size: int = None,
        sort: DatasetConfigFindAllResponseBodySort = None,
        total_elements: int = None,
        total_pages: int = None,
    ):
        self.content = content
        self.empty = empty
        self.first = first
        self.last = last
        self.number = number
        self.number_of_elements = number_of_elements
        self.pageable = pageable
        # Id of the request
        self.request_id = request_id
        self.size = size
        self.sort = sort
        self.total_elements = total_elements
        self.total_pages = total_pages

    def validate(self):
        if self.content:
            for k in self.content:
                if k:
                    k.validate()
        if self.pageable:
            self.pageable.validate()
        if self.sort:
            self.sort.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Content'] = []
        if self.content is not None:
            for k in self.content:
                result['Content'].append(k.to_map() if k else None)
        if self.empty is not None:
            result['Empty'] = self.empty
        if self.first is not None:
            result['First'] = self.first
        if self.last is not None:
            result['Last'] = self.last
        if self.number is not None:
            result['Number'] = self.number
        if self.number_of_elements is not None:
            result['NumberOfElements'] = self.number_of_elements
        if self.pageable is not None:
            result['Pageable'] = self.pageable.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.size is not None:
            result['Size'] = self.size
        if self.sort is not None:
            result['Sort'] = self.sort.to_map()
        if self.total_elements is not None:
            result['TotalElements'] = self.total_elements
        if self.total_pages is not None:
            result['TotalPages'] = self.total_pages
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.content = []
        if m.get('Content') is not None:
            for k in m.get('Content'):
                temp_model = DatasetConfigFindAllResponseBodyContent()
                self.content.append(temp_model.from_map(k))
        if m.get('Empty') is not None:
            self.empty = m.get('Empty')
        if m.get('First') is not None:
            self.first = m.get('First')
        if m.get('Last') is not None:
            self.last = m.get('Last')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('NumberOfElements') is not None:
            self.number_of_elements = m.get('NumberOfElements')
        if m.get('Pageable') is not None:
            temp_model = DatasetConfigFindAllResponseBodyPageable()
            self.pageable = temp_model.from_map(m['Pageable'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Size') is not None:
            self.size = m.get('Size')
        if m.get('Sort') is not None:
            temp_model = DatasetConfigFindAllResponseBodySort()
            self.sort = temp_model.from_map(m['Sort'])
        if m.get('TotalElements') is not None:
            self.total_elements = m.get('TotalElements')
        if m.get('TotalPages') is not None:
            self.total_pages = m.get('TotalPages')
        return self


class DatasetConfigFindAllResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: DatasetConfigFindAllResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = DatasetConfigFindAllResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DatasetConfigFindOneRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        dataset_id: int = None,
        key: str = None,
        type: str = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.dataset_id = dataset_id
        self.key = key
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.dataset_id is not None:
            result['DatasetId'] = self.dataset_id
        if self.key is not None:
            result['Key'] = self.key
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('DatasetId') is not None:
            self.dataset_id = m.get('DatasetId')
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class DatasetConfigFindOneResponseBody(TeaModel):
    def __init__(
        self,
        gmt_create: str = None,
        gmt_modified: str = None,
        gmt_published: str = None,
        id: int = None,
        key: str = None,
        request_id: str = None,
        tag: str = None,
        type: str = None,
        value: Dict[str, Any] = None,
    ):
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.gmt_published = gmt_published
        self.id = id
        self.key = key
        # Id of the request
        self.request_id = request_id
        self.tag = tag
        self.type = type
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.gmt_published is not None:
            result['GmtPublished'] = self.gmt_published
        if self.id is not None:
            result['Id'] = self.id
        if self.key is not None:
            result['Key'] = self.key
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.tag is not None:
            result['Tag'] = self.tag
        if self.type is not None:
            result['Type'] = self.type
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('GmtPublished') is not None:
            self.gmt_published = m.get('GmtPublished')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Tag') is not None:
            self.tag = m.get('Tag')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class DatasetConfigFindOneResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: DatasetConfigFindOneResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = DatasetConfigFindOneResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DatasetConfigUpdateOneRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        data: str = None,
        dataset_id: str = None,
        key: str = None,
        type: str = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.data = data
        self.dataset_id = dataset_id
        self.key = key
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.data is not None:
            result['Data'] = self.data
        if self.dataset_id is not None:
            result['DatasetId'] = self.dataset_id
        if self.key is not None:
            result['Key'] = self.key
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('DatasetId') is not None:
            self.dataset_id = m.get('DatasetId')
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class DatasetConfigUpdateOneResponseBody(TeaModel):
    def __init__(
        self,
        gmt_create: str = None,
        gmt_modified: str = None,
        gmt_published: str = None,
        id: int = None,
        key: str = None,
        request_id: str = None,
        tag: str = None,
        type: str = None,
        value: Dict[str, Any] = None,
    ):
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.gmt_published = gmt_published
        self.id = id
        self.key = key
        # Id of the request
        self.request_id = request_id
        self.tag = tag
        self.type = type
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.gmt_published is not None:
            result['GmtPublished'] = self.gmt_published
        if self.id is not None:
            result['Id'] = self.id
        if self.key is not None:
            result['Key'] = self.key
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.tag is not None:
            result['Tag'] = self.tag
        if self.type is not None:
            result['Type'] = self.type
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('GmtPublished') is not None:
            self.gmt_published = m.get('GmtPublished')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Tag') is not None:
            self.tag = m.get('Tag')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class DatasetConfigUpdateOneResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: DatasetConfigUpdateOneResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = DatasetConfigUpdateOneResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DatasetCreateOneRequestBodyNote(TeaModel):
    def __init__(
        self,
        description: str = None,
        name: str = None,
    ):
        self.description = description
        self.name = name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        return self


class DatasetCreateOneRequestBody(TeaModel):
    def __init__(
        self,
        biz_type: str = None,
        note: DatasetCreateOneRequestBodyNote = None,
        type_id: int = None,
    ):
        self.biz_type = biz_type
        self.note = note
        self.type_id = type_id

    def validate(self):
        if self.note:
            self.note.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.note is not None:
            result['Note'] = self.note.to_map()
        if self.type_id is not None:
            result['TypeId'] = self.type_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('Note') is not None:
            temp_model = DatasetCreateOneRequestBodyNote()
            self.note = temp_model.from_map(m['Note'])
        if m.get('TypeId') is not None:
            self.type_id = m.get('TypeId')
        return self


class DatasetCreateOneRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        body: DatasetCreateOneRequestBody = None,
        project_id: int = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.body = body
        self.project_id = project_id

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.body is not None:
            result['Body'] = self.body.to_map()
        if self.project_id is not None:
            result['ProjectId'] = self.project_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('Body') is not None:
            temp_model = DatasetCreateOneRequestBody()
            self.body = temp_model.from_map(m['Body'])
        if m.get('ProjectId') is not None:
            self.project_id = m.get('ProjectId')
        return self


class DatasetCreateOneResponseBodyNote(TeaModel):
    def __init__(
        self,
        description: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        id: int = None,
        name: str = None,
    ):
        self.description = description
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.id = id
        self.name = name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        if self.name is not None:
            result['Name'] = self.name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        return self


class DatasetCreateOneResponseBody(TeaModel):
    def __init__(
        self,
        biz_type: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        gmt_published: str = None,
        id: int = None,
        note: DatasetCreateOneResponseBodyNote = None,
        oss_key: str = None,
        publish_status: str = None,
        request_id: str = None,
        status: str = None,
        type_id: int = None,
    ):
        self.biz_type = biz_type
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.gmt_published = gmt_published
        self.id = id
        self.note = note
        self.oss_key = oss_key
        self.publish_status = publish_status
        # Id of the request
        self.request_id = request_id
        self.status = status
        self.type_id = type_id

    def validate(self):
        if self.note:
            self.note.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.gmt_published is not None:
            result['GmtPublished'] = self.gmt_published
        if self.id is not None:
            result['Id'] = self.id
        if self.note is not None:
            result['Note'] = self.note.to_map()
        if self.oss_key is not None:
            result['OssKey'] = self.oss_key
        if self.publish_status is not None:
            result['PublishStatus'] = self.publish_status
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        if self.type_id is not None:
            result['TypeId'] = self.type_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('GmtPublished') is not None:
            self.gmt_published = m.get('GmtPublished')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Note') is not None:
            temp_model = DatasetCreateOneResponseBodyNote()
            self.note = temp_model.from_map(m['Note'])
        if m.get('OssKey') is not None:
            self.oss_key = m.get('OssKey')
        if m.get('PublishStatus') is not None:
            self.publish_status = m.get('PublishStatus')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TypeId') is not None:
            self.type_id = m.get('TypeId')
        return self


class DatasetCreateOneResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: DatasetCreateOneResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = DatasetCreateOneResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DatasetDeteleOneRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        dataset_id: int = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.dataset_id = dataset_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.dataset_id is not None:
            result['DatasetId'] = self.dataset_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('DatasetId') is not None:
            self.dataset_id = m.get('DatasetId')
        return self


class DatasetDeteleOneResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
    ):
        # Id of the request
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DatasetDeteleOneResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: DatasetDeteleOneResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = DatasetDeteleOneResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DatasetFindAllRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        biz_type: str = None,
        no_project: bool = None,
        not_project_id: int = None,
        note: str = None,
        project_id: int = None,
        size: int = None,
        sort: str = None,
        status: str = None,
        type_id: int = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.biz_type = biz_type
        self.no_project = no_project
        self.not_project_id = not_project_id
        self.note = note
        self.project_id = project_id
        self.size = size
        self.sort = sort
        self.status = status
        self.type_id = type_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.no_project is not None:
            result['NoProject'] = self.no_project
        if self.not_project_id is not None:
            result['NotProjectId'] = self.not_project_id
        if self.note is not None:
            result['Note'] = self.note
        if self.project_id is not None:
            result['ProjectId'] = self.project_id
        if self.size is not None:
            result['Size'] = self.size
        if self.sort is not None:
            result['Sort'] = self.sort
        if self.status is not None:
            result['Status'] = self.status
        if self.type_id is not None:
            result['TypeId'] = self.type_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('NoProject') is not None:
            self.no_project = m.get('NoProject')
        if m.get('NotProjectId') is not None:
            self.not_project_id = m.get('NotProjectId')
        if m.get('Note') is not None:
            self.note = m.get('Note')
        if m.get('ProjectId') is not None:
            self.project_id = m.get('ProjectId')
        if m.get('Size') is not None:
            self.size = m.get('Size')
        if m.get('Sort') is not None:
            self.sort = m.get('Sort')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TypeId') is not None:
            self.type_id = m.get('TypeId')
        return self


class DatasetFindAllResponseBodyContentNote(TeaModel):
    def __init__(
        self,
        description: str = None,
        name: str = None,
    ):
        self.description = description
        self.name = name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        return self


class DatasetFindAllResponseBodyContent(TeaModel):
    def __init__(
        self,
        biz_type: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        gmt_published: str = None,
        id: int = None,
        note: DatasetFindAllResponseBodyContentNote = None,
        oss_key: str = None,
        publish_status: str = None,
        status: str = None,
        type_id: int = None,
    ):
        self.biz_type = biz_type
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.gmt_published = gmt_published
        self.id = id
        self.note = note
        self.oss_key = oss_key
        self.publish_status = publish_status
        self.status = status
        self.type_id = type_id

    def validate(self):
        if self.note:
            self.note.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.gmt_published is not None:
            result['GmtPublished'] = self.gmt_published
        if self.id is not None:
            result['Id'] = self.id
        if self.note is not None:
            result['Note'] = self.note.to_map()
        if self.oss_key is not None:
            result['OssKey'] = self.oss_key
        if self.publish_status is not None:
            result['PublishStatus'] = self.publish_status
        if self.status is not None:
            result['Status'] = self.status
        if self.type_id is not None:
            result['TypeId'] = self.type_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('GmtPublished') is not None:
            self.gmt_published = m.get('GmtPublished')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Note') is not None:
            temp_model = DatasetFindAllResponseBodyContentNote()
            self.note = temp_model.from_map(m['Note'])
        if m.get('OssKey') is not None:
            self.oss_key = m.get('OssKey')
        if m.get('PublishStatus') is not None:
            self.publish_status = m.get('PublishStatus')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TypeId') is not None:
            self.type_id = m.get('TypeId')
        return self


class DatasetFindAllResponseBodyPageableSort(TeaModel):
    def __init__(
        self,
        empty: bool = None,
        sorted: bool = None,
        unsorted: bool = None,
    ):
        self.empty = empty
        self.sorted = sorted
        self.unsorted = unsorted

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.empty is not None:
            result['Empty'] = self.empty
        if self.sorted is not None:
            result['Sorted'] = self.sorted
        if self.unsorted is not None:
            result['Unsorted'] = self.unsorted
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Empty') is not None:
            self.empty = m.get('Empty')
        if m.get('Sorted') is not None:
            self.sorted = m.get('Sorted')
        if m.get('Unsorted') is not None:
            self.unsorted = m.get('Unsorted')
        return self


class DatasetFindAllResponseBodyPageable(TeaModel):
    def __init__(
        self,
        offset: int = None,
        page_number: int = None,
        page_size: int = None,
        paged: bool = None,
        sort: DatasetFindAllResponseBodyPageableSort = None,
        unpaged: bool = None,
    ):
        self.offset = offset
        self.page_number = page_number
        self.page_size = page_size
        self.paged = paged
        self.sort = sort
        self.unpaged = unpaged

    def validate(self):
        if self.sort:
            self.sort.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.offset is not None:
            result['Offset'] = self.offset
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.paged is not None:
            result['Paged'] = self.paged
        if self.sort is not None:
            result['Sort'] = self.sort.to_map()
        if self.unpaged is not None:
            result['Unpaged'] = self.unpaged
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Offset') is not None:
            self.offset = m.get('Offset')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('Paged') is not None:
            self.paged = m.get('Paged')
        if m.get('Sort') is not None:
            temp_model = DatasetFindAllResponseBodyPageableSort()
            self.sort = temp_model.from_map(m['Sort'])
        if m.get('Unpaged') is not None:
            self.unpaged = m.get('Unpaged')
        return self


class DatasetFindAllResponseBodySort(TeaModel):
    def __init__(
        self,
        empty: bool = None,
        sorted: bool = None,
        unsorted: bool = None,
    ):
        self.empty = empty
        self.sorted = sorted
        self.unsorted = unsorted

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.empty is not None:
            result['Empty'] = self.empty
        if self.sorted is not None:
            result['Sorted'] = self.sorted
        if self.unsorted is not None:
            result['Unsorted'] = self.unsorted
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Empty') is not None:
            self.empty = m.get('Empty')
        if m.get('Sorted') is not None:
            self.sorted = m.get('Sorted')
        if m.get('Unsorted') is not None:
            self.unsorted = m.get('Unsorted')
        return self


class DatasetFindAllResponseBody(TeaModel):
    def __init__(
        self,
        content: List[DatasetFindAllResponseBodyContent] = None,
        empty: bool = None,
        first: bool = None,
        last: bool = None,
        number: int = None,
        number_of_elements: int = None,
        pageable: DatasetFindAllResponseBodyPageable = None,
        request_id: str = None,
        size: int = None,
        sort: DatasetFindAllResponseBodySort = None,
        total_elements: int = None,
        total_pages: int = None,
    ):
        self.content = content
        self.empty = empty
        self.first = first
        self.last = last
        self.number = number
        self.number_of_elements = number_of_elements
        self.pageable = pageable
        # Id of the request
        self.request_id = request_id
        self.size = size
        self.sort = sort
        self.total_elements = total_elements
        self.total_pages = total_pages

    def validate(self):
        if self.content:
            for k in self.content:
                if k:
                    k.validate()
        if self.pageable:
            self.pageable.validate()
        if self.sort:
            self.sort.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Content'] = []
        if self.content is not None:
            for k in self.content:
                result['Content'].append(k.to_map() if k else None)
        if self.empty is not None:
            result['Empty'] = self.empty
        if self.first is not None:
            result['First'] = self.first
        if self.last is not None:
            result['Last'] = self.last
        if self.number is not None:
            result['Number'] = self.number
        if self.number_of_elements is not None:
            result['NumberOfElements'] = self.number_of_elements
        if self.pageable is not None:
            result['Pageable'] = self.pageable.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.size is not None:
            result['Size'] = self.size
        if self.sort is not None:
            result['Sort'] = self.sort.to_map()
        if self.total_elements is not None:
            result['TotalElements'] = self.total_elements
        if self.total_pages is not None:
            result['TotalPages'] = self.total_pages
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.content = []
        if m.get('Content') is not None:
            for k in m.get('Content'):
                temp_model = DatasetFindAllResponseBodyContent()
                self.content.append(temp_model.from_map(k))
        if m.get('Empty') is not None:
            self.empty = m.get('Empty')
        if m.get('First') is not None:
            self.first = m.get('First')
        if m.get('Last') is not None:
            self.last = m.get('Last')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('NumberOfElements') is not None:
            self.number_of_elements = m.get('NumberOfElements')
        if m.get('Pageable') is not None:
            temp_model = DatasetFindAllResponseBodyPageable()
            self.pageable = temp_model.from_map(m['Pageable'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Size') is not None:
            self.size = m.get('Size')
        if m.get('Sort') is not None:
            temp_model = DatasetFindAllResponseBodySort()
            self.sort = temp_model.from_map(m['Sort'])
        if m.get('TotalElements') is not None:
            self.total_elements = m.get('TotalElements')
        if m.get('TotalPages') is not None:
            self.total_pages = m.get('TotalPages')
        return self


class DatasetFindAllResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: DatasetFindAllResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = DatasetFindAllResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DatasetPublishPublishRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        dataset_id: int = None,
        overwrite_latest: bool = None,
        project_id: int = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.dataset_id = dataset_id
        self.overwrite_latest = overwrite_latest
        self.project_id = project_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.dataset_id is not None:
            result['DatasetId'] = self.dataset_id
        if self.overwrite_latest is not None:
            result['OverwriteLatest'] = self.overwrite_latest
        if self.project_id is not None:
            result['ProjectId'] = self.project_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('DatasetId') is not None:
            self.dataset_id = m.get('DatasetId')
        if m.get('OverwriteLatest') is not None:
            self.overwrite_latest = m.get('OverwriteLatest')
        if m.get('ProjectId') is not None:
            self.project_id = m.get('ProjectId')
        return self


class DatasetPublishPublishResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        submit: str = None,
    ):
        # Id of the request
        self.request_id = request_id
        self.submit = submit

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.submit is not None:
            result['Submit'] = self.submit
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Submit') is not None:
            self.submit = m.get('Submit')
        return self


class DatasetPublishPublishResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: DatasetPublishPublishResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = DatasetPublishPublishResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DatasetTypeFindAllRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        size: int = None,
        sort: str = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.size = size
        self.sort = sort

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.size is not None:
            result['Size'] = self.size
        if self.sort is not None:
            result['Sort'] = self.sort
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('Size') is not None:
            self.size = m.get('Size')
        if m.get('Sort') is not None:
            self.sort = m.get('Sort')
        return self


class DatasetTypeFindAllResponseBodyContent(TeaModel):
    def __init__(
        self,
        code: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        id: int = None,
        note: str = None,
    ):
        self.code = code
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.id = id
        self.note = note

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        if self.note is not None:
            result['Note'] = self.note
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Note') is not None:
            self.note = m.get('Note')
        return self


class DatasetTypeFindAllResponseBodyPageableSort(TeaModel):
    def __init__(
        self,
        empty: bool = None,
        sorted: bool = None,
        unsorted: bool = None,
    ):
        self.empty = empty
        self.sorted = sorted
        self.unsorted = unsorted

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.empty is not None:
            result['Empty'] = self.empty
        if self.sorted is not None:
            result['Sorted'] = self.sorted
        if self.unsorted is not None:
            result['Unsorted'] = self.unsorted
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Empty') is not None:
            self.empty = m.get('Empty')
        if m.get('Sorted') is not None:
            self.sorted = m.get('Sorted')
        if m.get('Unsorted') is not None:
            self.unsorted = m.get('Unsorted')
        return self


class DatasetTypeFindAllResponseBodyPageable(TeaModel):
    def __init__(
        self,
        offset: int = None,
        page_number: int = None,
        page_size: int = None,
        paged: bool = None,
        sort: DatasetTypeFindAllResponseBodyPageableSort = None,
        unpaged: bool = None,
    ):
        self.offset = offset
        self.page_number = page_number
        self.page_size = page_size
        self.paged = paged
        self.sort = sort
        self.unpaged = unpaged

    def validate(self):
        if self.sort:
            self.sort.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.offset is not None:
            result['Offset'] = self.offset
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.paged is not None:
            result['Paged'] = self.paged
        if self.sort is not None:
            result['Sort'] = self.sort.to_map()
        if self.unpaged is not None:
            result['Unpaged'] = self.unpaged
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Offset') is not None:
            self.offset = m.get('Offset')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('Paged') is not None:
            self.paged = m.get('Paged')
        if m.get('Sort') is not None:
            temp_model = DatasetTypeFindAllResponseBodyPageableSort()
            self.sort = temp_model.from_map(m['Sort'])
        if m.get('Unpaged') is not None:
            self.unpaged = m.get('Unpaged')
        return self


class DatasetTypeFindAllResponseBodySort(TeaModel):
    def __init__(
        self,
        empty: bool = None,
        sorted: bool = None,
        unsorted: bool = None,
    ):
        self.empty = empty
        self.sorted = sorted
        self.unsorted = unsorted

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.empty is not None:
            result['Empty'] = self.empty
        if self.sorted is not None:
            result['Sorted'] = self.sorted
        if self.unsorted is not None:
            result['Unsorted'] = self.unsorted
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Empty') is not None:
            self.empty = m.get('Empty')
        if m.get('Sorted') is not None:
            self.sorted = m.get('Sorted')
        if m.get('Unsorted') is not None:
            self.unsorted = m.get('Unsorted')
        return self


class DatasetTypeFindAllResponseBody(TeaModel):
    def __init__(
        self,
        content: List[DatasetTypeFindAllResponseBodyContent] = None,
        empty: bool = None,
        first: bool = None,
        last: bool = None,
        number: int = None,
        number_of_elements: int = None,
        pageable: DatasetTypeFindAllResponseBodyPageable = None,
        request_id: str = None,
        size: int = None,
        sort: DatasetTypeFindAllResponseBodySort = None,
        total_elements: int = None,
        total_pages: int = None,
    ):
        self.content = content
        self.empty = empty
        self.first = first
        self.last = last
        self.number = number
        self.number_of_elements = number_of_elements
        self.pageable = pageable
        # Id of the request
        self.request_id = request_id
        self.size = size
        self.sort = sort
        self.total_elements = total_elements
        self.total_pages = total_pages

    def validate(self):
        if self.content:
            for k in self.content:
                if k:
                    k.validate()
        if self.pageable:
            self.pageable.validate()
        if self.sort:
            self.sort.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Content'] = []
        if self.content is not None:
            for k in self.content:
                result['Content'].append(k.to_map() if k else None)
        if self.empty is not None:
            result['Empty'] = self.empty
        if self.first is not None:
            result['First'] = self.first
        if self.last is not None:
            result['Last'] = self.last
        if self.number is not None:
            result['Number'] = self.number
        if self.number_of_elements is not None:
            result['NumberOfElements'] = self.number_of_elements
        if self.pageable is not None:
            result['Pageable'] = self.pageable.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.size is not None:
            result['Size'] = self.size
        if self.sort is not None:
            result['Sort'] = self.sort.to_map()
        if self.total_elements is not None:
            result['TotalElements'] = self.total_elements
        if self.total_pages is not None:
            result['TotalPages'] = self.total_pages
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.content = []
        if m.get('Content') is not None:
            for k in m.get('Content'):
                temp_model = DatasetTypeFindAllResponseBodyContent()
                self.content.append(temp_model.from_map(k))
        if m.get('Empty') is not None:
            self.empty = m.get('Empty')
        if m.get('First') is not None:
            self.first = m.get('First')
        if m.get('Last') is not None:
            self.last = m.get('Last')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('NumberOfElements') is not None:
            self.number_of_elements = m.get('NumberOfElements')
        if m.get('Pageable') is not None:
            temp_model = DatasetTypeFindAllResponseBodyPageable()
            self.pageable = temp_model.from_map(m['Pageable'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Size') is not None:
            self.size = m.get('Size')
        if m.get('Sort') is not None:
            temp_model = DatasetTypeFindAllResponseBodySort()
            self.sort = temp_model.from_map(m['Sort'])
        if m.get('TotalElements') is not None:
            self.total_elements = m.get('TotalElements')
        if m.get('TotalPages') is not None:
            self.total_pages = m.get('TotalPages')
        return self


class DatasetTypeFindAllResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: DatasetTypeFindAllResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = DatasetTypeFindAllResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DatasetUnbindProjectRequest(TeaModel):
    def __init__(
        self,
        dataset_id: int = None,
    ):
        self.dataset_id = dataset_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dataset_id is not None:
            result['DatasetId'] = self.dataset_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DatasetId') is not None:
            self.dataset_id = m.get('DatasetId')
        return self


class DatasetUnbindProjectResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
    ):
        # Id of the request
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DatasetUnbindProjectResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: DatasetUnbindProjectResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = DatasetUnbindProjectResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DatasetUpdateOneRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        biz_type: str = None,
        dataset_id: int = None,
        status: str = None,
        type_id: int = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.biz_type = biz_type
        self.dataset_id = dataset_id
        self.status = status
        self.type_id = type_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.dataset_id is not None:
            result['DatasetId'] = self.dataset_id
        if self.status is not None:
            result['Status'] = self.status
        if self.type_id is not None:
            result['TypeId'] = self.type_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('DatasetId') is not None:
            self.dataset_id = m.get('DatasetId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TypeId') is not None:
            self.type_id = m.get('TypeId')
        return self


class DatasetUpdateOneResponseBodyNote(TeaModel):
    def __init__(
        self,
        description: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        id: int = None,
        name: str = None,
    ):
        self.description = description
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.id = id
        self.name = name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        if self.name is not None:
            result['Name'] = self.name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        return self


class DatasetUpdateOneResponseBody(TeaModel):
    def __init__(
        self,
        biz_type: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        gmt_published: str = None,
        id: int = None,
        note: DatasetUpdateOneResponseBodyNote = None,
        oss_key: str = None,
        publish_status: str = None,
        request_id: str = None,
        status: str = None,
        type_id: int = None,
    ):
        self.biz_type = biz_type
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.gmt_published = gmt_published
        self.id = id
        self.note = note
        self.oss_key = oss_key
        self.publish_status = publish_status
        # Id of the request
        self.request_id = request_id
        self.status = status
        self.type_id = type_id

    def validate(self):
        if self.note:
            self.note.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.gmt_published is not None:
            result['GmtPublished'] = self.gmt_published
        if self.id is not None:
            result['Id'] = self.id
        if self.note is not None:
            result['Note'] = self.note.to_map()
        if self.oss_key is not None:
            result['OssKey'] = self.oss_key
        if self.publish_status is not None:
            result['PublishStatus'] = self.publish_status
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        if self.type_id is not None:
            result['TypeId'] = self.type_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('GmtPublished') is not None:
            self.gmt_published = m.get('GmtPublished')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Note') is not None:
            temp_model = DatasetUpdateOneResponseBodyNote()
            self.note = temp_model.from_map(m['Note'])
        if m.get('OssKey') is not None:
            self.oss_key = m.get('OssKey')
        if m.get('PublishStatus') is not None:
            self.publish_status = m.get('PublishStatus')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TypeId') is not None:
            self.type_id = m.get('TypeId')
        return self


class DatasetUpdateOneResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: DatasetUpdateOneResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = DatasetUpdateOneResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DatasetUploadCreateOneRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        dataset_id: int = None,
        device_key: str = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.dataset_id = dataset_id
        self.device_key = device_key

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.dataset_id is not None:
            result['DatasetId'] = self.dataset_id
        if self.device_key is not None:
            result['DeviceKey'] = self.device_key
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('DatasetId') is not None:
            self.dataset_id = m.get('DatasetId')
        if m.get('DeviceKey') is not None:
            self.device_key = m.get('DeviceKey')
        return self


class DatasetUploadCreateOneResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        dataset_id: int = None,
        device_key: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        id: int = None,
        message: str = None,
        progress: int = None,
        request_id: str = None,
        status: str = None,
    ):
        self.code = code
        self.dataset_id = dataset_id
        self.device_key = device_key
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.id = id
        self.message = message
        self.progress = progress
        # Id of the request
        self.request_id = request_id
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.dataset_id is not None:
            result['DatasetId'] = self.dataset_id
        if self.device_key is not None:
            result['DeviceKey'] = self.device_key
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        if self.message is not None:
            result['Message'] = self.message
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('DatasetId') is not None:
            self.dataset_id = m.get('DatasetId')
        if m.get('DeviceKey') is not None:
            self.device_key = m.get('DeviceKey')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DatasetUploadCreateOneResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: DatasetUploadCreateOneResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = DatasetUploadCreateOneResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DatasetUploadDeleteOneRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        dataset_id: int = None,
        project_id: int = None,
        upload_id: int = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.dataset_id = dataset_id
        self.project_id = project_id
        self.upload_id = upload_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.dataset_id is not None:
            result['DatasetId'] = self.dataset_id
        if self.project_id is not None:
            result['ProjectId'] = self.project_id
        if self.upload_id is not None:
            result['UploadId'] = self.upload_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('DatasetId') is not None:
            self.dataset_id = m.get('DatasetId')
        if m.get('ProjectId') is not None:
            self.project_id = m.get('ProjectId')
        if m.get('UploadId') is not None:
            self.upload_id = m.get('UploadId')
        return self


class DatasetUploadDeleteOneResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
    ):
        # Id of the request
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DatasetUploadDeleteOneResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: DatasetUploadDeleteOneResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = DatasetUploadDeleteOneResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DatasetUploadDeleteOssFileRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        dataset_id: int = None,
        upload_id: int = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.dataset_id = dataset_id
        self.upload_id = upload_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.dataset_id is not None:
            result['DatasetId'] = self.dataset_id
        if self.upload_id is not None:
            result['UploadId'] = self.upload_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('DatasetId') is not None:
            self.dataset_id = m.get('DatasetId')
        if m.get('UploadId') is not None:
            self.upload_id = m.get('UploadId')
        return self


class DatasetUploadDeleteOssFileResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
    ):
        # Id of the request
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DatasetUploadDeleteOssFileResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: DatasetUploadDeleteOssFileResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = DatasetUploadDeleteOssFileResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DatasetUploadFindByDatasetIdRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        dataset_id: str = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.dataset_id = dataset_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.dataset_id is not None:
            result['DatasetId'] = self.dataset_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('DatasetId') is not None:
            self.dataset_id = m.get('DatasetId')
        return self


class DatasetUploadFindByDatasetIdResponseBodyContent(TeaModel):
    def __init__(
        self,
        code: int = None,
        dataset_id: int = None,
        device_key: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        id: int = None,
        message: str = None,
        progress: int = None,
        status: str = None,
    ):
        self.code = code
        self.dataset_id = dataset_id
        self.device_key = device_key
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.id = id
        self.message = message
        self.progress = progress
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.dataset_id is not None:
            result['DatasetId'] = self.dataset_id
        if self.device_key is not None:
            result['DeviceKey'] = self.device_key
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        if self.message is not None:
            result['Message'] = self.message
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('DatasetId') is not None:
            self.dataset_id = m.get('DatasetId')
        if m.get('DeviceKey') is not None:
            self.device_key = m.get('DeviceKey')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DatasetUploadFindByDatasetIdResponseBodyPageableSort(TeaModel):
    def __init__(
        self,
        empty: bool = None,
        sorted: bool = None,
        unsorted: bool = None,
    ):
        self.empty = empty
        self.sorted = sorted
        self.unsorted = unsorted

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.empty is not None:
            result['Empty'] = self.empty
        if self.sorted is not None:
            result['Sorted'] = self.sorted
        if self.unsorted is not None:
            result['Unsorted'] = self.unsorted
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Empty') is not None:
            self.empty = m.get('Empty')
        if m.get('Sorted') is not None:
            self.sorted = m.get('Sorted')
        if m.get('Unsorted') is not None:
            self.unsorted = m.get('Unsorted')
        return self


class DatasetUploadFindByDatasetIdResponseBodyPageable(TeaModel):
    def __init__(
        self,
        offset: int = None,
        page_number: int = None,
        page_size: int = None,
        paged: bool = None,
        sort: DatasetUploadFindByDatasetIdResponseBodyPageableSort = None,
        unpaged: bool = None,
    ):
        self.offset = offset
        self.page_number = page_number
        self.page_size = page_size
        self.paged = paged
        self.sort = sort
        self.unpaged = unpaged

    def validate(self):
        if self.sort:
            self.sort.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.offset is not None:
            result['Offset'] = self.offset
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.paged is not None:
            result['Paged'] = self.paged
        if self.sort is not None:
            result['Sort'] = self.sort.to_map()
        if self.unpaged is not None:
            result['Unpaged'] = self.unpaged
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Offset') is not None:
            self.offset = m.get('Offset')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('Paged') is not None:
            self.paged = m.get('Paged')
        if m.get('Sort') is not None:
            temp_model = DatasetUploadFindByDatasetIdResponseBodyPageableSort()
            self.sort = temp_model.from_map(m['Sort'])
        if m.get('Unpaged') is not None:
            self.unpaged = m.get('Unpaged')
        return self


class DatasetUploadFindByDatasetIdResponseBodySort(TeaModel):
    def __init__(
        self,
        empty: bool = None,
        sorted: bool = None,
        unsorted: bool = None,
    ):
        self.empty = empty
        self.sorted = sorted
        self.unsorted = unsorted

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.empty is not None:
            result['Empty'] = self.empty
        if self.sorted is not None:
            result['Sorted'] = self.sorted
        if self.unsorted is not None:
            result['Unsorted'] = self.unsorted
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Empty') is not None:
            self.empty = m.get('Empty')
        if m.get('Sorted') is not None:
            self.sorted = m.get('Sorted')
        if m.get('Unsorted') is not None:
            self.unsorted = m.get('Unsorted')
        return self


class DatasetUploadFindByDatasetIdResponseBody(TeaModel):
    def __init__(
        self,
        content: List[DatasetUploadFindByDatasetIdResponseBodyContent] = None,
        empty: bool = None,
        first: bool = None,
        last: bool = None,
        number: int = None,
        number_of_elements: int = None,
        pageable: DatasetUploadFindByDatasetIdResponseBodyPageable = None,
        request_id: str = None,
        size: int = None,
        sort: DatasetUploadFindByDatasetIdResponseBodySort = None,
        total_elements: int = None,
        total_pages: int = None,
    ):
        self.content = content
        self.empty = empty
        self.first = first
        self.last = last
        self.number = number
        self.number_of_elements = number_of_elements
        self.pageable = pageable
        # Id of the request
        self.request_id = request_id
        self.size = size
        self.sort = sort
        self.total_elements = total_elements
        self.total_pages = total_pages

    def validate(self):
        if self.content:
            for k in self.content:
                if k:
                    k.validate()
        if self.pageable:
            self.pageable.validate()
        if self.sort:
            self.sort.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Content'] = []
        if self.content is not None:
            for k in self.content:
                result['Content'].append(k.to_map() if k else None)
        if self.empty is not None:
            result['Empty'] = self.empty
        if self.first is not None:
            result['First'] = self.first
        if self.last is not None:
            result['Last'] = self.last
        if self.number is not None:
            result['Number'] = self.number
        if self.number_of_elements is not None:
            result['NumberOfElements'] = self.number_of_elements
        if self.pageable is not None:
            result['Pageable'] = self.pageable.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.size is not None:
            result['Size'] = self.size
        if self.sort is not None:
            result['Sort'] = self.sort.to_map()
        if self.total_elements is not None:
            result['TotalElements'] = self.total_elements
        if self.total_pages is not None:
            result['TotalPages'] = self.total_pages
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.content = []
        if m.get('Content') is not None:
            for k in m.get('Content'):
                temp_model = DatasetUploadFindByDatasetIdResponseBodyContent()
                self.content.append(temp_model.from_map(k))
        if m.get('Empty') is not None:
            self.empty = m.get('Empty')
        if m.get('First') is not None:
            self.first = m.get('First')
        if m.get('Last') is not None:
            self.last = m.get('Last')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('NumberOfElements') is not None:
            self.number_of_elements = m.get('NumberOfElements')
        if m.get('Pageable') is not None:
            temp_model = DatasetUploadFindByDatasetIdResponseBodyPageable()
            self.pageable = temp_model.from_map(m['Pageable'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Size') is not None:
            self.size = m.get('Size')
        if m.get('Sort') is not None:
            temp_model = DatasetUploadFindByDatasetIdResponseBodySort()
            self.sort = temp_model.from_map(m['Sort'])
        if m.get('TotalElements') is not None:
            self.total_elements = m.get('TotalElements')
        if m.get('TotalPages') is not None:
            self.total_pages = m.get('TotalPages')
        return self


class DatasetUploadFindByDatasetIdResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: DatasetUploadFindByDatasetIdResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = DatasetUploadFindByDatasetIdResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DatasetUploadFindByProjectIdRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        project_id: int = None,
        size: int = None,
        type_id: int = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.project_id = project_id
        self.size = size
        self.type_id = type_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.project_id is not None:
            result['ProjectId'] = self.project_id
        if self.size is not None:
            result['Size'] = self.size
        if self.type_id is not None:
            result['TypeId'] = self.type_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('ProjectId') is not None:
            self.project_id = m.get('ProjectId')
        if m.get('Size') is not None:
            self.size = m.get('Size')
        if m.get('TypeId') is not None:
            self.type_id = m.get('TypeId')
        return self


class DatasetUploadFindByProjectIdResponseBodyDatasetUploadInfoResponseList(TeaModel):
    def __init__(
        self,
        dataset_id: int = None,
        dataset_oss_key: str = None,
        dataset_upload_id: int = None,
        device_key: str = None,
        ext_info: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        id: int = None,
        progress: int = None,
        status: str = None,
    ):
        self.dataset_id = dataset_id
        self.dataset_oss_key = dataset_oss_key
        self.dataset_upload_id = dataset_upload_id
        self.device_key = device_key
        self.ext_info = ext_info
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.id = id
        self.progress = progress
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dataset_id is not None:
            result['DatasetId'] = self.dataset_id
        if self.dataset_oss_key is not None:
            result['DatasetOssKey'] = self.dataset_oss_key
        if self.dataset_upload_id is not None:
            result['DatasetUploadId'] = self.dataset_upload_id
        if self.device_key is not None:
            result['DeviceKey'] = self.device_key
        if self.ext_info is not None:
            result['ExtInfo'] = self.ext_info
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DatasetId') is not None:
            self.dataset_id = m.get('DatasetId')
        if m.get('DatasetOssKey') is not None:
            self.dataset_oss_key = m.get('DatasetOssKey')
        if m.get('DatasetUploadId') is not None:
            self.dataset_upload_id = m.get('DatasetUploadId')
        if m.get('DeviceKey') is not None:
            self.device_key = m.get('DeviceKey')
        if m.get('ExtInfo') is not None:
            self.ext_info = m.get('ExtInfo')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DatasetUploadFindByProjectIdResponseBody(TeaModel):
    def __init__(
        self,
        dataset_upload_info_response_list: List[DatasetUploadFindByProjectIdResponseBodyDatasetUploadInfoResponseList] = None,
        request_id: str = None,
    ):
        self.dataset_upload_info_response_list = dataset_upload_info_response_list
        # Id of the request
        self.request_id = request_id

    def validate(self):
        if self.dataset_upload_info_response_list:
            for k in self.dataset_upload_info_response_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['DatasetUploadInfoResponseList'] = []
        if self.dataset_upload_info_response_list is not None:
            for k in self.dataset_upload_info_response_list:
                result['DatasetUploadInfoResponseList'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.dataset_upload_info_response_list = []
        if m.get('DatasetUploadInfoResponseList') is not None:
            for k in m.get('DatasetUploadInfoResponseList'):
                temp_model = DatasetUploadFindByProjectIdResponseBodyDatasetUploadInfoResponseList()
                self.dataset_upload_info_response_list.append(temp_model.from_map(k))
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DatasetUploadFindByProjectIdResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: DatasetUploadFindByProjectIdResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = DatasetUploadFindByProjectIdResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DatasetUploadFindByProjectIdAppRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        project_id: int = None,
        type_id: int = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.project_id = project_id
        self.type_id = type_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.project_id is not None:
            result['ProjectId'] = self.project_id
        if self.type_id is not None:
            result['TypeId'] = self.type_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('ProjectId') is not None:
            self.project_id = m.get('ProjectId')
        if m.get('TypeId') is not None:
            self.type_id = m.get('TypeId')
        return self


class DatasetUploadFindByProjectIdAppResponseBodyDatasetUploadInfoResponseList(TeaModel):
    def __init__(
        self,
        dataset_id: int = None,
        dataset_upload_id: int = None,
        device_key: str = None,
        ext_info: Dict[str, Any] = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        id: int = None,
        progress: int = None,
        status: str = None,
    ):
        self.dataset_id = dataset_id
        self.dataset_upload_id = dataset_upload_id
        self.device_key = device_key
        self.ext_info = ext_info
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.id = id
        self.progress = progress
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dataset_id is not None:
            result['DatasetId'] = self.dataset_id
        if self.dataset_upload_id is not None:
            result['DatasetUploadId'] = self.dataset_upload_id
        if self.device_key is not None:
            result['DeviceKey'] = self.device_key
        if self.ext_info is not None:
            result['ExtInfo'] = self.ext_info
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DatasetId') is not None:
            self.dataset_id = m.get('DatasetId')
        if m.get('DatasetUploadId') is not None:
            self.dataset_upload_id = m.get('DatasetUploadId')
        if m.get('DeviceKey') is not None:
            self.device_key = m.get('DeviceKey')
        if m.get('ExtInfo') is not None:
            self.ext_info = m.get('ExtInfo')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DatasetUploadFindByProjectIdAppResponseBody(TeaModel):
    def __init__(
        self,
        dataset_upload_info_response_list: List[DatasetUploadFindByProjectIdAppResponseBodyDatasetUploadInfoResponseList] = None,
        request_id: str = None,
    ):
        self.dataset_upload_info_response_list = dataset_upload_info_response_list
        # Id of the request
        self.request_id = request_id

    def validate(self):
        if self.dataset_upload_info_response_list:
            for k in self.dataset_upload_info_response_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['DatasetUploadInfoResponseList'] = []
        if self.dataset_upload_info_response_list is not None:
            for k in self.dataset_upload_info_response_list:
                result['DatasetUploadInfoResponseList'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.dataset_upload_info_response_list = []
        if m.get('DatasetUploadInfoResponseList') is not None:
            for k in m.get('DatasetUploadInfoResponseList'):
                temp_model = DatasetUploadFindByProjectIdAppResponseBodyDatasetUploadInfoResponseList()
                self.dataset_upload_info_response_list.append(temp_model.from_map(k))
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DatasetUploadFindByProjectIdAppResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: DatasetUploadFindByProjectIdAppResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = DatasetUploadFindByProjectIdAppResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DelBimDrawingRequest(TeaModel):
    def __init__(
        self,
        id: int = None,
        task_id: str = None,
    ):
        # 归类id
        self.id = id
        # taskId
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class DelBimDrawingResponseBodyDatas(TeaModel):
    def __init__(
        self,
        drawing_id: int = None,
        drawing_mode: str = None,
        id: int = None,
    ):
        # 源图纸id
        self.drawing_id = drawing_id
        # 源图纸操作状态
        self.drawing_mode = drawing_mode
        # 归类id
        self.id = id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.drawing_id is not None:
            result['DrawingId'] = self.drawing_id
        if self.drawing_mode is not None:
            result['DrawingMode'] = self.drawing_mode
        if self.id is not None:
            result['Id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DrawingId') is not None:
            self.drawing_id = m.get('DrawingId')
        if m.get('DrawingMode') is not None:
            self.drawing_mode = m.get('DrawingMode')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        return self


class DelBimDrawingResponseBody(TeaModel):
    def __init__(
        self,
        datas: DelBimDrawingResponseBodyDatas = None,
        err_code: int = None,
        err_msg: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.datas = datas
        self.err_code = err_code
        self.err_msg = err_msg
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.datas:
            self.datas.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.datas is not None:
            result['Datas'] = self.datas.to_map()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_msg is not None:
            result['ErrMsg'] = self.err_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Datas') is not None:
            temp_model = DelBimDrawingResponseBodyDatas()
            self.datas = temp_model.from_map(m['Datas'])
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMsg') is not None:
            self.err_msg = m.get('ErrMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DelBimDrawingResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: DelBimDrawingResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = DelBimDrawingResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DelBimProjectRequest(TeaModel):
    def __init__(
        self,
        id: int = None,
    ):
        # 项目id
        self.id = id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        return self


class DelBimProjectResponseBody(TeaModel):
    def __init__(
        self,
        datas: int = None,
        err_code: int = None,
        err_msg: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.datas = datas
        self.err_code = err_code
        self.err_msg = err_msg
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.datas is not None:
            result['Datas'] = self.datas
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_msg is not None:
            result['ErrMsg'] = self.err_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Datas') is not None:
            self.datas = m.get('Datas')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMsg') is not None:
            self.err_msg = m.get('ErrMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DelBimProjectResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: DelBimProjectResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = DelBimProjectResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteMaterialRequest(TeaModel):
    def __init__(
        self,
        id: int = None,
    ):
        self.id = id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        return self


class DeleteMaterialResponseBody(TeaModel):
    def __init__(
        self,
        data: Dict[str, Any] = None,
        error: str = None,
        msg_code: str = None,
        msg_info: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.data = data
        self.error = error
        self.msg_code = msg_code
        self.msg_info = msg_info
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data
        if self.error is not None:
            result['Error'] = self.error
        if self.msg_code is not None:
            result['MsgCode'] = self.msg_code
        if self.msg_info is not None:
            result['MsgInfo'] = self.msg_info
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Error') is not None:
            self.error = m.get('Error')
        if m.get('MsgCode') is not None:
            self.msg_code = m.get('MsgCode')
        if m.get('MsgInfo') is not None:
            self.msg_info = m.get('MsgInfo')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteMaterialResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: DeleteMaterialResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = DeleteMaterialResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteMaterialsRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        params: str = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.params = params

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.params is not None:
            result['Params'] = self.params
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('Params') is not None:
            self.params = m.get('Params')
        return self


class DeleteMaterialsResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
    ):
        # Id of the request
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DeleteMaterialsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: DeleteMaterialsResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = DeleteMaterialsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteOneRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        project_id: int = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.project_id = project_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.project_id is not None:
            result['ProjectId'] = self.project_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('ProjectId') is not None:
            self.project_id = m.get('ProjectId')
        return self


class DeleteOneResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
    ):
        # Id of the request
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DeleteOneResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: DeleteOneResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = DeleteOneResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteProjectTransModelRequest(TeaModel):
    def __init__(
        self,
        task_id: int = None,
        trans_model_id: int = None,
    ):
        self.task_id = task_id
        # 转换图纸id
        self.trans_model_id = trans_model_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.trans_model_id is not None:
            result['TransModelId'] = self.trans_model_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('TransModelId') is not None:
            self.trans_model_id = m.get('TransModelId')
        return self


class DeleteProjectTransModelResponseBody(TeaModel):
    def __init__(
        self,
        datas: int = None,
        err_code: int = None,
        err_msg: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.datas = datas
        self.err_code = err_code
        self.err_msg = err_msg
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.datas is not None:
            result['Datas'] = self.datas
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_msg is not None:
            result['ErrMsg'] = self.err_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Datas') is not None:
            self.datas = m.get('Datas')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMsg') is not None:
            self.err_msg = m.get('ErrMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteProjectTransModelResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: DeleteProjectTransModelResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = DeleteProjectTransModelResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteQRCodeRequest(TeaModel):
    def __init__(
        self,
        sid: str = None,
    ):
        # sId
        self.sid = sid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.sid is not None:
            result['SId'] = self.sid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('SId') is not None:
            self.sid = m.get('SId')
        return self


class DeleteQRCodeResponseBody(TeaModel):
    def __init__(
        self,
        data: str = None,
        error: str = None,
        msg_code: str = None,
        msg_info: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        # data
        self.data = data
        # error
        self.error = error
        # msgCode
        self.msg_code = msg_code
        # msgInfo
        self.msg_info = msg_info
        # traceId
        self.request_id = request_id
        # success
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data
        if self.error is not None:
            result['Error'] = self.error
        if self.msg_code is not None:
            result['MsgCode'] = self.msg_code
        if self.msg_info is not None:
            result['MsgInfo'] = self.msg_info
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Error') is not None:
            self.error = m.get('Error')
        if m.get('MsgCode') is not None:
            self.msg_code = m.get('MsgCode')
        if m.get('MsgInfo') is not None:
            self.msg_info = m.get('MsgInfo')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteQRCodeResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: DeleteQRCodeResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = DeleteQRCodeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DisabelUserRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        user_id: int = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class DisabelUserResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        success: str = None,
    ):
        # Id of the request
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DisabelUserResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: DisabelUserResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = DisabelUserResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FindRegionRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        region_code: int = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.region_code = region_code

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.region_code is not None:
            result['RegionCode'] = self.region_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('RegionCode') is not None:
            self.region_code = m.get('RegionCode')
        return self


class FindRegionResponseBodyResultObj(TeaModel):
    def __init__(
        self,
        region_list: List[Dict[str, Any]] = None,
    ):
        self.region_list = region_list

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.region_list is not None:
            result['RegionList'] = self.region_list
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RegionList') is not None:
            self.region_list = m.get('RegionList')
        return self


class FindRegionResponseBody(TeaModel):
    def __init__(
        self,
        async_: bool = None,
        async_token: str = None,
        error_code: str = None,
        error_msg: float = None,
        request_id: str = None,
        result_obj: FindRegionResponseBodyResultObj = None,
        retry: bool = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.async_ = async_
        self.async_token = async_token
        self.error_code = error_code
        self.error_msg = error_msg
        # Id of the request
        self.request_id = request_id
        self.result_obj = result_obj
        self.retry = retry
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.result_obj:
            self.result_obj.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.async_ is not None:
            result['Async'] = self.async_
        if self.async_token is not None:
            result['AsyncToken'] = self.async_token
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.error_msg is not None:
            result['ErrorMsg'] = self.error_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_obj is not None:
            result['ResultObj'] = self.result_obj.to_map()
        if self.retry is not None:
            result['Retry'] = self.retry
        if self.success is not None:
            result['Success'] = self.success
        if self.trace_id is not None:
            result['TraceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Async') is not None:
            self.async_ = m.get('Async')
        if m.get('AsyncToken') is not None:
            self.async_token = m.get('AsyncToken')
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('ErrorMsg') is not None:
            self.error_msg = m.get('ErrorMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultObj') is not None:
            temp_model = FindRegionResponseBodyResultObj()
            self.result_obj = temp_model.from_map(m['ResultObj'])
        if m.get('Retry') is not None:
            self.retry = m.get('Retry')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TraceId') is not None:
            self.trace_id = m.get('TraceId')
        return self


class FindRegionResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: FindRegionResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = FindRegionResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FloorPlanRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        body: str = None,
        oss_key: str = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.body = body
        self.oss_key = oss_key

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.body is not None:
            result['Body'] = self.body
        if self.oss_key is not None:
            result['OssKey'] = self.oss_key
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('Body') is not None:
            self.body = m.get('Body')
        if m.get('OssKey') is not None:
            self.oss_key = m.get('OssKey')
        return self


class FloorPlanResponseBody(TeaModel):
    def __init__(
        self,
        code: int = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.message = message
        # Id of the request
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class FloorPlanResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: FloorPlanResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = FloorPlanResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetBimDrawingDetailRequest(TeaModel):
    def __init__(
        self,
        drawing_id: int = None,
        task_id: int = None,
    ):
        self.drawing_id = drawing_id
        # 任务id
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.drawing_id is not None:
            result['DrawingId'] = self.drawing_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DrawingId') is not None:
            self.drawing_id = m.get('DrawingId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class GetBimDrawingDetailResponseBody(TeaModel):
    def __init__(
        self,
        datas: Dict[str, Any] = None,
        err_code: int = None,
        err_msg: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.datas = datas
        self.err_code = err_code
        self.err_msg = err_msg
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.datas is not None:
            result['Datas'] = self.datas
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_msg is not None:
            result['ErrMsg'] = self.err_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Datas') is not None:
            self.datas = m.get('Datas')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMsg') is not None:
            self.err_msg = m.get('ErrMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetBimDrawingDetailResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: GetBimDrawingDetailResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetBimDrawingDetailResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetBimDrawingListRequest(TeaModel):
    def __init__(
        self,
        task_id: str = None,
    ):
        # 任务id
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class GetBimDrawingListResponseBodyDatasArchitecture(TeaModel):
    def __init__(
        self,
        file_id: int = None,
        id: int = None,
        mode: str = None,
        name: str = None,
        status: str = None,
        subject: str = None,
        task_id: int = None,
    ):
        self.file_id = file_id
        self.id = id
        self.mode = mode
        self.name = name
        self.status = status
        self.subject = subject
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.file_id is not None:
            result['FileId'] = self.file_id
        if self.id is not None:
            result['Id'] = self.id
        if self.mode is not None:
            result['Mode'] = self.mode
        if self.name is not None:
            result['Name'] = self.name
        if self.status is not None:
            result['Status'] = self.status
        if self.subject is not None:
            result['Subject'] = self.subject
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('FileId') is not None:
            self.file_id = m.get('FileId')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Mode') is not None:
            self.mode = m.get('Mode')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Subject') is not None:
            self.subject = m.get('Subject')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class GetBimDrawingListResponseBodyDatasStructure(TeaModel):
    def __init__(
        self,
        file_id: int = None,
        id: int = None,
        mode: str = None,
        name: str = None,
        status: str = None,
        subject: str = None,
        task_id: int = None,
    ):
        self.file_id = file_id
        self.id = id
        self.mode = mode
        self.name = name
        self.status = status
        self.subject = subject
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.file_id is not None:
            result['FileId'] = self.file_id
        if self.id is not None:
            result['Id'] = self.id
        if self.mode is not None:
            result['Mode'] = self.mode
        if self.name is not None:
            result['Name'] = self.name
        if self.status is not None:
            result['Status'] = self.status
        if self.subject is not None:
            result['Subject'] = self.subject
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('FileId') is not None:
            self.file_id = m.get('FileId')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Mode') is not None:
            self.mode = m.get('Mode')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Subject') is not None:
            self.subject = m.get('Subject')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class GetBimDrawingListResponseBodyDatas(TeaModel):
    def __init__(
        self,
        architecture: List[GetBimDrawingListResponseBodyDatasArchitecture] = None,
        structure: List[GetBimDrawingListResponseBodyDatasStructure] = None,
    ):
        self.architecture = architecture
        self.structure = structure

    def validate(self):
        if self.architecture:
            for k in self.architecture:
                if k:
                    k.validate()
        if self.structure:
            for k in self.structure:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Architecture'] = []
        if self.architecture is not None:
            for k in self.architecture:
                result['Architecture'].append(k.to_map() if k else None)
        result['Structure'] = []
        if self.structure is not None:
            for k in self.structure:
                result['Structure'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.architecture = []
        if m.get('Architecture') is not None:
            for k in m.get('Architecture'):
                temp_model = GetBimDrawingListResponseBodyDatasArchitecture()
                self.architecture.append(temp_model.from_map(k))
        self.structure = []
        if m.get('Structure') is not None:
            for k in m.get('Structure'):
                temp_model = GetBimDrawingListResponseBodyDatasStructure()
                self.structure.append(temp_model.from_map(k))
        return self


class GetBimDrawingListResponseBody(TeaModel):
    def __init__(
        self,
        datas: GetBimDrawingListResponseBodyDatas = None,
        err_code: int = None,
        err_msg: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.datas = datas
        self.err_code = err_code
        self.err_msg = err_msg
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.datas:
            self.datas.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.datas is not None:
            result['Datas'] = self.datas.to_map()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_msg is not None:
            result['ErrMsg'] = self.err_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Datas') is not None:
            temp_model = GetBimDrawingListResponseBodyDatas()
            self.datas = temp_model.from_map(m['Datas'])
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMsg') is not None:
            self.err_msg = m.get('ErrMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetBimDrawingListResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: GetBimDrawingListResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetBimDrawingListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetBimDrawingRenderRequest(TeaModel):
    def __init__(
        self,
        drawing_id: int = None,
        task_id: int = None,
    ):
        # 源图纸id
        self.drawing_id = drawing_id
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.drawing_id is not None:
            result['DrawingId'] = self.drawing_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DrawingId') is not None:
            self.drawing_id = m.get('DrawingId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class GetBimDrawingRenderResponseBodyDatas(TeaModel):
    def __init__(
        self,
        blocks: Dict[str, Any] = None,
        font_prefix: str = None,
        geometry_prefix: str = None,
        path: str = None,
    ):
        self.blocks = blocks
        self.font_prefix = font_prefix
        self.geometry_prefix = geometry_prefix
        self.path = path

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.blocks is not None:
            result['Blocks'] = self.blocks
        if self.font_prefix is not None:
            result['FontPrefix'] = self.font_prefix
        if self.geometry_prefix is not None:
            result['GeometryPrefix'] = self.geometry_prefix
        if self.path is not None:
            result['Path'] = self.path
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Blocks') is not None:
            self.blocks = m.get('Blocks')
        if m.get('FontPrefix') is not None:
            self.font_prefix = m.get('FontPrefix')
        if m.get('GeometryPrefix') is not None:
            self.geometry_prefix = m.get('GeometryPrefix')
        if m.get('Path') is not None:
            self.path = m.get('Path')
        return self


class GetBimDrawingRenderResponseBody(TeaModel):
    def __init__(
        self,
        datas: GetBimDrawingRenderResponseBodyDatas = None,
        err_code: int = None,
        err_msg: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.datas = datas
        self.err_code = err_code
        self.err_msg = err_msg
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.datas:
            self.datas.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.datas is not None:
            result['Datas'] = self.datas.to_map()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_msg is not None:
            result['ErrMsg'] = self.err_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Datas') is not None:
            temp_model = GetBimDrawingRenderResponseBodyDatas()
            self.datas = temp_model.from_map(m['Datas'])
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMsg') is not None:
            self.err_msg = m.get('ErrMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetBimDrawingRenderResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: GetBimDrawingRenderResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetBimDrawingRenderResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetBimDrawingStatusRequest(TeaModel):
    def __init__(
        self,
        ids: List[int] = None,
    ):
        # 原图纸id
        self.ids = ids

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ids is not None:
            result['Ids'] = self.ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Ids') is not None:
            self.ids = m.get('Ids')
        return self


class GetBimDrawingStatusShrinkRequest(TeaModel):
    def __init__(
        self,
        ids_shrink: str = None,
    ):
        # 原图纸id
        self.ids_shrink = ids_shrink

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ids_shrink is not None:
            result['Ids'] = self.ids_shrink
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Ids') is not None:
            self.ids_shrink = m.get('Ids')
        return self


class GetBimDrawingStatusResponseBodyDatas(TeaModel):
    def __init__(
        self,
        id: int = None,
        mode: str = None,
        status: str = None,
    ):
        self.id = id
        self.mode = mode
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        if self.mode is not None:
            result['Mode'] = self.mode
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Mode') is not None:
            self.mode = m.get('Mode')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetBimDrawingStatusResponseBody(TeaModel):
    def __init__(
        self,
        datas: List[GetBimDrawingStatusResponseBodyDatas] = None,
        err_code: int = None,
        err_msg: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.datas = datas
        self.err_code = err_code
        self.err_msg = err_msg
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.datas:
            for k in self.datas:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Datas'] = []
        if self.datas is not None:
            for k in self.datas:
                result['Datas'].append(k.to_map() if k else None)
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_msg is not None:
            result['ErrMsg'] = self.err_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.datas = []
        if m.get('Datas') is not None:
            for k in m.get('Datas'):
                temp_model = GetBimDrawingStatusResponseBodyDatas()
                self.datas.append(temp_model.from_map(k))
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMsg') is not None:
            self.err_msg = m.get('ErrMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetBimDrawingStatusResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: GetBimDrawingStatusResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetBimDrawingStatusResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetBimFragmentListRequest(TeaModel):
    def __init__(
        self,
        drawing_id: int = None,
        task_id: int = None,
    ):
        self.drawing_id = drawing_id
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.drawing_id is not None:
            result['DrawingId'] = self.drawing_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DrawingId') is not None:
            self.drawing_id = m.get('DrawingId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class GetBimFragmentListResponseBodyDatasFloorInfo(TeaModel):
    def __init__(
        self,
        floor_name: str = None,
        floor_num: str = None,
    ):
        self.floor_name = floor_name
        self.floor_num = floor_num

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.floor_name is not None:
            result['FloorName'] = self.floor_name
        if self.floor_num is not None:
            result['FloorNum'] = self.floor_num
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('FloorName') is not None:
            self.floor_name = m.get('FloorName')
        if m.get('FloorNum') is not None:
            self.floor_num = m.get('FloorNum')
        return self


class GetBimFragmentListResponseBodyDatas(TeaModel):
    def __init__(
        self,
        building_no: str = None,
        coordinates: List[List[float]] = None,
        drawing_id: int = None,
        floor_info: List[GetBimFragmentListResponseBodyDatasFloorInfo] = None,
        id: int = None,
        selection_mode: str = None,
        sub_type: str = None,
        subject: str = None,
        suffix: str = None,
        type: str = None,
    ):
        self.building_no = building_no
        self.coordinates = coordinates
        self.drawing_id = drawing_id
        self.floor_info = floor_info
        self.id = id
        self.selection_mode = selection_mode
        self.sub_type = sub_type
        self.subject = subject
        self.suffix = suffix
        self.type = type

    def validate(self):
        if self.floor_info:
            for k in self.floor_info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.building_no is not None:
            result['BuildingNo'] = self.building_no
        if self.coordinates is not None:
            result['Coordinates'] = self.coordinates
        if self.drawing_id is not None:
            result['DrawingId'] = self.drawing_id
        result['FloorInfo'] = []
        if self.floor_info is not None:
            for k in self.floor_info:
                result['FloorInfo'].append(k.to_map() if k else None)
        if self.id is not None:
            result['Id'] = self.id
        if self.selection_mode is not None:
            result['SelectionMode'] = self.selection_mode
        if self.sub_type is not None:
            result['SubType'] = self.sub_type
        if self.subject is not None:
            result['Subject'] = self.subject
        if self.suffix is not None:
            result['Suffix'] = self.suffix
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BuildingNo') is not None:
            self.building_no = m.get('BuildingNo')
        if m.get('Coordinates') is not None:
            self.coordinates = m.get('Coordinates')
        if m.get('DrawingId') is not None:
            self.drawing_id = m.get('DrawingId')
        self.floor_info = []
        if m.get('FloorInfo') is not None:
            for k in m.get('FloorInfo'):
                temp_model = GetBimFragmentListResponseBodyDatasFloorInfo()
                self.floor_info.append(temp_model.from_map(k))
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('SelectionMode') is not None:
            self.selection_mode = m.get('SelectionMode')
        if m.get('SubType') is not None:
            self.sub_type = m.get('SubType')
        if m.get('Subject') is not None:
            self.subject = m.get('Subject')
        if m.get('Suffix') is not None:
            self.suffix = m.get('Suffix')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class GetBimFragmentListResponseBody(TeaModel):
    def __init__(
        self,
        datas: List[GetBimFragmentListResponseBodyDatas] = None,
        err_code: int = None,
        err_msg: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.datas = datas
        self.err_code = err_code
        self.err_msg = err_msg
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.datas:
            for k in self.datas:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Datas'] = []
        if self.datas is not None:
            for k in self.datas:
                result['Datas'].append(k.to_map() if k else None)
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_msg is not None:
            result['ErrMsg'] = self.err_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.datas = []
        if m.get('Datas') is not None:
            for k in m.get('Datas'):
                temp_model = GetBimFragmentListResponseBodyDatas()
                self.datas.append(temp_model.from_map(k))
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMsg') is not None:
            self.err_msg = m.get('ErrMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetBimFragmentListResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: GetBimFragmentListResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetBimFragmentListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetBimGlbModelListRequest(TeaModel):
    def __init__(
        self,
        task_id: int = None,
    ):
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class GetBimGlbModelListResponseBodyDatasBounds(TeaModel):
    def __init__(
        self,
        max: List[int] = None,
        min: List[int] = None,
    ):
        self.max = max
        self.min = min

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.max is not None:
            result['Max'] = self.max
        if self.min is not None:
            result['Min'] = self.min
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Max') is not None:
            self.max = m.get('Max')
        if m.get('Min') is not None:
            self.min = m.get('Min')
        return self


class GetBimGlbModelListResponseBodyDatasBuildingsFloors(TeaModel):
    def __init__(
        self,
        architecture: str = None,
        floor_no: str = None,
        floor_type: str = None,
        structure: str = None,
    ):
        self.architecture = architecture
        self.floor_no = floor_no
        self.floor_type = floor_type
        self.structure = structure

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.architecture is not None:
            result['Architecture'] = self.architecture
        if self.floor_no is not None:
            result['FloorNo'] = self.floor_no
        if self.floor_type is not None:
            result['FloorType'] = self.floor_type
        if self.structure is not None:
            result['Structure'] = self.structure
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Architecture') is not None:
            self.architecture = m.get('Architecture')
        if m.get('FloorNo') is not None:
            self.floor_no = m.get('FloorNo')
        if m.get('FloorType') is not None:
            self.floor_type = m.get('FloorType')
        if m.get('Structure') is not None:
            self.structure = m.get('Structure')
        return self


class GetBimGlbModelListResponseBodyDatasBuildings(TeaModel):
    def __init__(
        self,
        building_no: str = None,
        floors: List[GetBimGlbModelListResponseBodyDatasBuildingsFloors] = None,
    ):
        self.building_no = building_no
        self.floors = floors

    def validate(self):
        if self.floors:
            for k in self.floors:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.building_no is not None:
            result['BuildingNo'] = self.building_no
        result['Floors'] = []
        if self.floors is not None:
            for k in self.floors:
                result['Floors'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BuildingNo') is not None:
            self.building_no = m.get('BuildingNo')
        self.floors = []
        if m.get('Floors') is not None:
            for k in m.get('Floors'):
                temp_model = GetBimGlbModelListResponseBodyDatasBuildingsFloors()
                self.floors.append(temp_model.from_map(k))
        return self


class GetBimGlbModelListResponseBodyDatasStsToken(TeaModel):
    def __init__(
        self,
        access_key_id: str = None,
        access_key_secret: str = None,
        expiration: int = None,
        oss_bucket: str = None,
        oss_region: str = None,
        security_token: str = None,
    ):
        self.access_key_id = access_key_id
        self.access_key_secret = access_key_secret
        self.expiration = expiration
        self.oss_bucket = oss_bucket
        self.oss_region = oss_region
        self.security_token = security_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.access_key_id is not None:
            result['AccessKeyId'] = self.access_key_id
        if self.access_key_secret is not None:
            result['AccessKeySecret'] = self.access_key_secret
        if self.expiration is not None:
            result['Expiration'] = self.expiration
        if self.oss_bucket is not None:
            result['OssBucket'] = self.oss_bucket
        if self.oss_region is not None:
            result['OssRegion'] = self.oss_region
        if self.security_token is not None:
            result['SecurityToken'] = self.security_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccessKeyId') is not None:
            self.access_key_id = m.get('AccessKeyId')
        if m.get('AccessKeySecret') is not None:
            self.access_key_secret = m.get('AccessKeySecret')
        if m.get('Expiration') is not None:
            self.expiration = m.get('Expiration')
        if m.get('OssBucket') is not None:
            self.oss_bucket = m.get('OssBucket')
        if m.get('OssRegion') is not None:
            self.oss_region = m.get('OssRegion')
        if m.get('SecurityToken') is not None:
            self.security_token = m.get('SecurityToken')
        return self


class GetBimGlbModelListResponseBodyDatas(TeaModel):
    def __init__(
        self,
        bounds: GetBimGlbModelListResponseBodyDatasBounds = None,
        buildings: List[GetBimGlbModelListResponseBodyDatasBuildings] = None,
        name: str = None,
        sts_token: GetBimGlbModelListResponseBodyDatasStsToken = None,
    ):
        self.bounds = bounds
        self.buildings = buildings
        self.name = name
        self.sts_token = sts_token

    def validate(self):
        if self.bounds:
            self.bounds.validate()
        if self.buildings:
            for k in self.buildings:
                if k:
                    k.validate()
        if self.sts_token:
            self.sts_token.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bounds is not None:
            result['Bounds'] = self.bounds.to_map()
        result['Buildings'] = []
        if self.buildings is not None:
            for k in self.buildings:
                result['Buildings'].append(k.to_map() if k else None)
        if self.name is not None:
            result['Name'] = self.name
        if self.sts_token is not None:
            result['StsToken'] = self.sts_token.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bounds') is not None:
            temp_model = GetBimGlbModelListResponseBodyDatasBounds()
            self.bounds = temp_model.from_map(m['Bounds'])
        self.buildings = []
        if m.get('Buildings') is not None:
            for k in m.get('Buildings'):
                temp_model = GetBimGlbModelListResponseBodyDatasBuildings()
                self.buildings.append(temp_model.from_map(k))
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('StsToken') is not None:
            temp_model = GetBimGlbModelListResponseBodyDatasStsToken()
            self.sts_token = temp_model.from_map(m['StsToken'])
        return self


class GetBimGlbModelListResponseBody(TeaModel):
    def __init__(
        self,
        datas: GetBimGlbModelListResponseBodyDatas = None,
        err_code: int = None,
        err_msg: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.datas = datas
        self.err_code = err_code
        self.err_msg = err_msg
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.datas:
            self.datas.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.datas is not None:
            result['Datas'] = self.datas.to_map()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_msg is not None:
            result['ErrMsg'] = self.err_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Datas') is not None:
            temp_model = GetBimGlbModelListResponseBodyDatas()
            self.datas = temp_model.from_map(m['Datas'])
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMsg') is not None:
            self.err_msg = m.get('ErrMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetBimGlbModelListResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: GetBimGlbModelListResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetBimGlbModelListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetBimModelConfigRequest(TeaModel):
    def __init__(
        self,
        task_id: int = None,
    ):
        # 任务id
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class GetBimModelConfigResponseBodyDatas(TeaModel):
    def __init__(
        self,
        beam_height: int = None,
        beam_mode: int = None,
        beam_offset: int = None,
        door_height: int = None,
        door_offset: int = None,
        id: int = None,
        room_mode: int = None,
        slab_mode: int = None,
        slab_thickness: int = None,
        window_height: int = None,
        window_offset: int = None,
    ):
        # 梁高
        self.beam_height = beam_height
        # 梁模式
        self.beam_mode = beam_mode
        # 梁偏移
        self.beam_offset = beam_offset
        # 门高
        self.door_height = door_height
        # 门偏移
        self.door_offset = door_offset
        # 模型规则id
        self.id = id
        # 房间模式
        self.room_mode = room_mode
        # 板模式
        self.slab_mode = slab_mode
        # 板厚度
        self.slab_thickness = slab_thickness
        # 窗高
        self.window_height = window_height
        # 窗偏移量
        self.window_offset = window_offset

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.beam_height is not None:
            result['BeamHeight'] = self.beam_height
        if self.beam_mode is not None:
            result['BeamMode'] = self.beam_mode
        if self.beam_offset is not None:
            result['BeamOffset'] = self.beam_offset
        if self.door_height is not None:
            result['DoorHeight'] = self.door_height
        if self.door_offset is not None:
            result['DoorOffset'] = self.door_offset
        if self.id is not None:
            result['Id'] = self.id
        if self.room_mode is not None:
            result['RoomMode'] = self.room_mode
        if self.slab_mode is not None:
            result['SlabMode'] = self.slab_mode
        if self.slab_thickness is not None:
            result['SlabThickness'] = self.slab_thickness
        if self.window_height is not None:
            result['WindowHeight'] = self.window_height
        if self.window_offset is not None:
            result['WindowOffset'] = self.window_offset
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BeamHeight') is not None:
            self.beam_height = m.get('BeamHeight')
        if m.get('BeamMode') is not None:
            self.beam_mode = m.get('BeamMode')
        if m.get('BeamOffset') is not None:
            self.beam_offset = m.get('BeamOffset')
        if m.get('DoorHeight') is not None:
            self.door_height = m.get('DoorHeight')
        if m.get('DoorOffset') is not None:
            self.door_offset = m.get('DoorOffset')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('RoomMode') is not None:
            self.room_mode = m.get('RoomMode')
        if m.get('SlabMode') is not None:
            self.slab_mode = m.get('SlabMode')
        if m.get('SlabThickness') is not None:
            self.slab_thickness = m.get('SlabThickness')
        if m.get('WindowHeight') is not None:
            self.window_height = m.get('WindowHeight')
        if m.get('WindowOffset') is not None:
            self.window_offset = m.get('WindowOffset')
        return self


class GetBimModelConfigResponseBody(TeaModel):
    def __init__(
        self,
        datas: GetBimModelConfigResponseBodyDatas = None,
        err_code: int = None,
        err_msg: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.datas = datas
        self.err_code = err_code
        self.err_msg = err_msg
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.datas:
            self.datas.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.datas is not None:
            result['Datas'] = self.datas.to_map()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_msg is not None:
            result['ErrMsg'] = self.err_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Datas') is not None:
            temp_model = GetBimModelConfigResponseBodyDatas()
            self.datas = temp_model.from_map(m['Datas'])
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMsg') is not None:
            self.err_msg = m.get('ErrMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetBimModelConfigResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: GetBimModelConfigResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetBimModelConfigResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetBimOriginModelRequest(TeaModel):
    def __init__(
        self,
        task_id: int = None,
    ):
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class GetBimOriginModelResponseBodyDatas(TeaModel):
    def __init__(
        self,
        file_id: int = None,
        id: int = None,
        model_name: str = None,
        path: str = None,
        task_id: int = None,
        type: str = None,
    ):
        self.file_id = file_id
        self.id = id
        self.model_name = model_name
        self.path = path
        self.task_id = task_id
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.file_id is not None:
            result['FileId'] = self.file_id
        if self.id is not None:
            result['Id'] = self.id
        if self.model_name is not None:
            result['ModelName'] = self.model_name
        if self.path is not None:
            result['Path'] = self.path
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('FileId') is not None:
            self.file_id = m.get('FileId')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('ModelName') is not None:
            self.model_name = m.get('ModelName')
        if m.get('Path') is not None:
            self.path = m.get('Path')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class GetBimOriginModelResponseBody(TeaModel):
    def __init__(
        self,
        datas: GetBimOriginModelResponseBodyDatas = None,
        err_code: int = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.datas = datas
        self.err_code = err_code
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.datas:
            self.datas.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.datas is not None:
            result['Datas'] = self.datas.to_map()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.trace_id is not None:
            result['TraceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Datas') is not None:
            temp_model = GetBimOriginModelResponseBodyDatas()
            self.datas = temp_model.from_map(m['Datas'])
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TraceId') is not None:
            self.trace_id = m.get('TraceId')
        return self


class GetBimOriginModelResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: GetBimOriginModelResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetBimOriginModelResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetBimProjectDetailRequest(TeaModel):
    def __init__(
        self,
        task_id: int = None,
    ):
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class GetBimProjectDetailResponseBodyDatas(TeaModel):
    def __init__(
        self,
        component: List[str] = None,
        create_time: str = None,
        id: int = None,
        modeling_status: int = None,
        name: str = None,
        phase: str = None,
        remarks: str = None,
        renderable: int = None,
        status: str = None,
        tenant_id: int = None,
        trans_status: int = None,
        type: str = None,
    ):
        # 模型构件
        self.component = component
        self.create_time = create_time
        # 任务id（项目id）
        self.id = id
        self.modeling_status = modeling_status
        # 项目名称
        self.name = name
        # 阶段
        self.phase = phase
        # 备注
        self.remarks = remarks
        self.renderable = renderable
        self.status = status
        # 租户id
        self.tenant_id = tenant_id
        # 图纸转换状态
        self.trans_status = trans_status
        # 类型
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.component is not None:
            result['Component'] = self.component
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.id is not None:
            result['Id'] = self.id
        if self.modeling_status is not None:
            result['ModelingStatus'] = self.modeling_status
        if self.name is not None:
            result['Name'] = self.name
        if self.phase is not None:
            result['Phase'] = self.phase
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.renderable is not None:
            result['Renderable'] = self.renderable
        if self.status is not None:
            result['Status'] = self.status
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.trans_status is not None:
            result['TransStatus'] = self.trans_status
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Component') is not None:
            self.component = m.get('Component')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('ModelingStatus') is not None:
            self.modeling_status = m.get('ModelingStatus')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Phase') is not None:
            self.phase = m.get('Phase')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('Renderable') is not None:
            self.renderable = m.get('Renderable')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('TransStatus') is not None:
            self.trans_status = m.get('TransStatus')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class GetBimProjectDetailResponseBody(TeaModel):
    def __init__(
        self,
        datas: GetBimProjectDetailResponseBodyDatas = None,
        err_code: int = None,
        err_msg: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.datas = datas
        self.err_code = err_code
        self.err_msg = err_msg
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.datas:
            self.datas.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.datas is not None:
            result['Datas'] = self.datas.to_map()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_msg is not None:
            result['ErrMsg'] = self.err_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Datas') is not None:
            temp_model = GetBimProjectDetailResponseBodyDatas()
            self.datas = temp_model.from_map(m['Datas'])
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMsg') is not None:
            self.err_msg = m.get('ErrMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetBimProjectDetailResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: GetBimProjectDetailResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetBimProjectDetailResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetBimProjectDrawFilesRequest(TeaModel):
    def __init__(
        self,
        subject: str = None,
        task_id: int = None,
    ):
        self.subject = subject
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.subject is not None:
            result['Subject'] = self.subject
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Subject') is not None:
            self.subject = m.get('Subject')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class GetBimProjectDrawFilesResponseBodyDatas(TeaModel):
    def __init__(
        self,
        id: int = None,
        mode: str = None,
        name: str = None,
        status: str = None,
        subject: str = None,
        task_id: int = None,
    ):
        self.id = id
        self.mode = mode
        self.name = name
        self.status = status
        self.subject = subject
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        if self.mode is not None:
            result['Mode'] = self.mode
        if self.name is not None:
            result['Name'] = self.name
        if self.status is not None:
            result['Status'] = self.status
        if self.subject is not None:
            result['Subject'] = self.subject
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Mode') is not None:
            self.mode = m.get('Mode')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Subject') is not None:
            self.subject = m.get('Subject')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class GetBimProjectDrawFilesResponseBody(TeaModel):
    def __init__(
        self,
        datas: List[GetBimProjectDrawFilesResponseBodyDatas] = None,
        err_code: int = None,
        err_msg: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.datas = datas
        self.err_code = err_code
        self.err_msg = err_msg
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.datas:
            for k in self.datas:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Datas'] = []
        if self.datas is not None:
            for k in self.datas:
                result['Datas'].append(k.to_map() if k else None)
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_msg is not None:
            result['ErrMsg'] = self.err_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.datas = []
        if m.get('Datas') is not None:
            for k in m.get('Datas'):
                temp_model = GetBimProjectDrawFilesResponseBodyDatas()
                self.datas.append(temp_model.from_map(k))
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMsg') is not None:
            self.err_msg = m.get('ErrMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetBimProjectDrawFilesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: GetBimProjectDrawFilesResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetBimProjectDrawFilesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetBimProjectListRequest(TeaModel):
    def __init__(
        self,
        name: str = None,
        page_num: int = None,
        page_size: int = None,
        phase: str = None,
        status: str = None,
        type: str = None,
    ):
        self.name = name
        self.page_num = page_num
        self.page_size = page_size
        self.phase = phase
        self.status = status
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.name is not None:
            result['Name'] = self.name
        if self.page_num is not None:
            result['PageNum'] = self.page_num
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.phase is not None:
            result['Phase'] = self.phase
        if self.status is not None:
            result['Status'] = self.status
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('PageNum') is not None:
            self.page_num = m.get('PageNum')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('Phase') is not None:
            self.phase = m.get('Phase')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class GetBimProjectListResponseBodyDatasList(TeaModel):
    def __init__(
        self,
        create_time: str = None,
        id: int = None,
        modeling_status: int = None,
        name: str = None,
        phase: str = None,
        remarks: str = None,
        renderable: int = None,
        status: int = None,
        tenant_id: int = None,
        trans_status: int = None,
        type: str = None,
        update_time: str = None,
    ):
        # 创建时间
        self.create_time = create_time
        # 项目id
        self.id = id
        # 模型构建状态
        self.modeling_status = modeling_status
        # 项目名
        self.name = name
        # 当前阶段
        self.phase = phase
        # 备注
        self.remarks = remarks
        # 是否可以渲染3d；1是0否
        self.renderable = renderable
        # 当前项目状态
        self.status = status
        # 租户id
        self.tenant_id = tenant_id
        # 图纸转换状态
        self.trans_status = trans_status
        # 类型
        self.type = type
        # 修改时间
        self.update_time = update_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.id is not None:
            result['Id'] = self.id
        if self.modeling_status is not None:
            result['ModelingStatus'] = self.modeling_status
        if self.name is not None:
            result['Name'] = self.name
        if self.phase is not None:
            result['Phase'] = self.phase
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.renderable is not None:
            result['Renderable'] = self.renderable
        if self.status is not None:
            result['Status'] = self.status
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.trans_status is not None:
            result['TransStatus'] = self.trans_status
        if self.type is not None:
            result['Type'] = self.type
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('ModelingStatus') is not None:
            self.modeling_status = m.get('ModelingStatus')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Phase') is not None:
            self.phase = m.get('Phase')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('Renderable') is not None:
            self.renderable = m.get('Renderable')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('TransStatus') is not None:
            self.trans_status = m.get('TransStatus')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        return self


class GetBimProjectListResponseBodyDatas(TeaModel):
    def __init__(
        self,
        count: int = None,
        list: List[GetBimProjectListResponseBodyDatasList] = None,
        page_num: int = None,
        page_size: int = None,
        pages: int = None,
    ):
        # 总条数
        self.count = count
        # 返回数据集合
        self.list = list
        # 当前页
        self.page_num = page_num
        # 每页大小
        self.page_size = page_size
        # 总共多少页
        self.pages = pages

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.count is not None:
            result['Count'] = self.count
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.page_num is not None:
            result['PageNum'] = self.page_num
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.pages is not None:
            result['Pages'] = self.pages
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Count') is not None:
            self.count = m.get('Count')
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = GetBimProjectListResponseBodyDatasList()
                self.list.append(temp_model.from_map(k))
        if m.get('PageNum') is not None:
            self.page_num = m.get('PageNum')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('Pages') is not None:
            self.pages = m.get('Pages')
        return self


class GetBimProjectListResponseBody(TeaModel):
    def __init__(
        self,
        datas: GetBimProjectListResponseBodyDatas = None,
        err_code: int = None,
        err_msg: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.datas = datas
        self.err_code = err_code
        self.err_msg = err_msg
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.datas:
            self.datas.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.datas is not None:
            result['Datas'] = self.datas.to_map()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_msg is not None:
            result['ErrMsg'] = self.err_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Datas') is not None:
            temp_model = GetBimProjectListResponseBodyDatas()
            self.datas = temp_model.from_map(m['Datas'])
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMsg') is not None:
            self.err_msg = m.get('ErrMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetBimProjectListResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: GetBimProjectListResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetBimProjectListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetBimProjectListStatusRequest(TeaModel):
    def __init__(
        self,
        ids: List[int] = None,
    ):
        self.ids = ids

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ids is not None:
            result['Ids'] = self.ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Ids') is not None:
            self.ids = m.get('Ids')
        return self


class GetBimProjectListStatusShrinkRequest(TeaModel):
    def __init__(
        self,
        ids_shrink: str = None,
    ):
        self.ids_shrink = ids_shrink

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ids_shrink is not None:
            result['Ids'] = self.ids_shrink
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Ids') is not None:
            self.ids_shrink = m.get('Ids')
        return self


class GetBimProjectListStatusResponseBodyDatas(TeaModel):
    def __init__(
        self,
        id: int = None,
        modeling_status: int = None,
        phase: str = None,
        status: str = None,
        trans_status: int = None,
    ):
        self.id = id
        self.modeling_status = modeling_status
        self.phase = phase
        self.status = status
        self.trans_status = trans_status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        if self.modeling_status is not None:
            result['ModelingStatus'] = self.modeling_status
        if self.phase is not None:
            result['Phase'] = self.phase
        if self.status is not None:
            result['Status'] = self.status
        if self.trans_status is not None:
            result['TransStatus'] = self.trans_status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('ModelingStatus') is not None:
            self.modeling_status = m.get('ModelingStatus')
        if m.get('Phase') is not None:
            self.phase = m.get('Phase')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TransStatus') is not None:
            self.trans_status = m.get('TransStatus')
        return self


class GetBimProjectListStatusResponseBody(TeaModel):
    def __init__(
        self,
        datas: List[GetBimProjectListStatusResponseBodyDatas] = None,
        err_code: int = None,
        err_msg: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.datas = datas
        self.err_code = err_code
        self.err_msg = err_msg
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.datas:
            for k in self.datas:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Datas'] = []
        if self.datas is not None:
            for k in self.datas:
                result['Datas'].append(k.to_map() if k else None)
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_msg is not None:
            result['ErrMsg'] = self.err_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.datas = []
        if m.get('Datas') is not None:
            for k in m.get('Datas'):
                temp_model = GetBimProjectListStatusResponseBodyDatas()
                self.datas.append(temp_model.from_map(k))
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMsg') is not None:
            self.err_msg = m.get('ErrMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetBimProjectListStatusResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: GetBimProjectListStatusResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetBimProjectListStatusResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetBimProjectShareModelListRequest(TeaModel):
    def __init__(
        self,
        share_id: str = None,
    ):
        self.share_id = share_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.share_id is not None:
            result['ShareId'] = self.share_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ShareId') is not None:
            self.share_id = m.get('ShareId')
        return self


class GetBimProjectShareModelListResponseBodyDatasBounds(TeaModel):
    def __init__(
        self,
        max: List[int] = None,
        min: List[int] = None,
    ):
        self.max = max
        self.min = min

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.max is not None:
            result['Max'] = self.max
        if self.min is not None:
            result['Min'] = self.min
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Max') is not None:
            self.max = m.get('Max')
        if m.get('Min') is not None:
            self.min = m.get('Min')
        return self


class GetBimProjectShareModelListResponseBodyDatasBuildingsFloors(TeaModel):
    def __init__(
        self,
        architecture: str = None,
        floor_no: str = None,
        floor_type: str = None,
        structure: str = None,
    ):
        self.architecture = architecture
        self.floor_no = floor_no
        self.floor_type = floor_type
        self.structure = structure

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.architecture is not None:
            result['Architecture'] = self.architecture
        if self.floor_no is not None:
            result['FloorNo'] = self.floor_no
        if self.floor_type is not None:
            result['FloorType'] = self.floor_type
        if self.structure is not None:
            result['Structure'] = self.structure
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Architecture') is not None:
            self.architecture = m.get('Architecture')
        if m.get('FloorNo') is not None:
            self.floor_no = m.get('FloorNo')
        if m.get('FloorType') is not None:
            self.floor_type = m.get('FloorType')
        if m.get('Structure') is not None:
            self.structure = m.get('Structure')
        return self


class GetBimProjectShareModelListResponseBodyDatasBuildings(TeaModel):
    def __init__(
        self,
        building_no: str = None,
        floors: List[GetBimProjectShareModelListResponseBodyDatasBuildingsFloors] = None,
    ):
        self.building_no = building_no
        self.floors = floors

    def validate(self):
        if self.floors:
            for k in self.floors:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.building_no is not None:
            result['BuildingNo'] = self.building_no
        result['Floors'] = []
        if self.floors is not None:
            for k in self.floors:
                result['Floors'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BuildingNo') is not None:
            self.building_no = m.get('BuildingNo')
        self.floors = []
        if m.get('Floors') is not None:
            for k in m.get('Floors'):
                temp_model = GetBimProjectShareModelListResponseBodyDatasBuildingsFloors()
                self.floors.append(temp_model.from_map(k))
        return self


class GetBimProjectShareModelListResponseBodyDatasStsToken(TeaModel):
    def __init__(
        self,
        access_key_id: str = None,
        access_key_secret: str = None,
        expiration: int = None,
        oss_bucket: str = None,
        oss_region: str = None,
        security_token: str = None,
    ):
        self.access_key_id = access_key_id
        self.access_key_secret = access_key_secret
        self.expiration = expiration
        self.oss_bucket = oss_bucket
        self.oss_region = oss_region
        self.security_token = security_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.access_key_id is not None:
            result['AccessKeyId'] = self.access_key_id
        if self.access_key_secret is not None:
            result['AccessKeySecret'] = self.access_key_secret
        if self.expiration is not None:
            result['Expiration'] = self.expiration
        if self.oss_bucket is not None:
            result['OssBucket'] = self.oss_bucket
        if self.oss_region is not None:
            result['OssRegion'] = self.oss_region
        if self.security_token is not None:
            result['SecurityToken'] = self.security_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccessKeyId') is not None:
            self.access_key_id = m.get('AccessKeyId')
        if m.get('AccessKeySecret') is not None:
            self.access_key_secret = m.get('AccessKeySecret')
        if m.get('Expiration') is not None:
            self.expiration = m.get('Expiration')
        if m.get('OssBucket') is not None:
            self.oss_bucket = m.get('OssBucket')
        if m.get('OssRegion') is not None:
            self.oss_region = m.get('OssRegion')
        if m.get('SecurityToken') is not None:
            self.security_token = m.get('SecurityToken')
        return self


class GetBimProjectShareModelListResponseBodyDatas(TeaModel):
    def __init__(
        self,
        bounds: GetBimProjectShareModelListResponseBodyDatasBounds = None,
        buildings: List[GetBimProjectShareModelListResponseBodyDatasBuildings] = None,
        name: str = None,
        sts_token: GetBimProjectShareModelListResponseBodyDatasStsToken = None,
    ):
        self.bounds = bounds
        self.buildings = buildings
        self.name = name
        self.sts_token = sts_token

    def validate(self):
        if self.bounds:
            self.bounds.validate()
        if self.buildings:
            for k in self.buildings:
                if k:
                    k.validate()
        if self.sts_token:
            self.sts_token.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bounds is not None:
            result['Bounds'] = self.bounds.to_map()
        result['Buildings'] = []
        if self.buildings is not None:
            for k in self.buildings:
                result['Buildings'].append(k.to_map() if k else None)
        if self.name is not None:
            result['Name'] = self.name
        if self.sts_token is not None:
            result['StsToken'] = self.sts_token.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bounds') is not None:
            temp_model = GetBimProjectShareModelListResponseBodyDatasBounds()
            self.bounds = temp_model.from_map(m['Bounds'])
        self.buildings = []
        if m.get('Buildings') is not None:
            for k in m.get('Buildings'):
                temp_model = GetBimProjectShareModelListResponseBodyDatasBuildings()
                self.buildings.append(temp_model.from_map(k))
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('StsToken') is not None:
            temp_model = GetBimProjectShareModelListResponseBodyDatasStsToken()
            self.sts_token = temp_model.from_map(m['StsToken'])
        return self


class GetBimProjectShareModelListResponseBody(TeaModel):
    def __init__(
        self,
        datas: GetBimProjectShareModelListResponseBodyDatas = None,
        err_code: int = None,
        err_msg: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.datas = datas
        self.err_code = err_code
        self.err_msg = err_msg
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.datas:
            self.datas.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.datas is not None:
            result['Datas'] = self.datas.to_map()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_msg is not None:
            result['ErrMsg'] = self.err_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Datas') is not None:
            temp_model = GetBimProjectShareModelListResponseBodyDatas()
            self.datas = temp_model.from_map(m['Datas'])
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMsg') is not None:
            self.err_msg = m.get('ErrMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetBimProjectShareModelListResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: GetBimProjectShareModelListResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetBimProjectShareModelListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetBimStandardAutoMarkRequest(TeaModel):
    def __init__(
        self,
        standard_id: int = None,
        task_id: int = None,
    ):
        # 标准图纸id
        self.standard_id = standard_id
        # 任务id
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.standard_id is not None:
            result['StandardId'] = self.standard_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('StandardId') is not None:
            self.standard_id = m.get('StandardId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class GetBimStandardAutoMarkResponseBody(TeaModel):
    def __init__(
        self,
        datas: int = None,
        err_code: int = None,
        err_msg: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.datas = datas
        self.err_code = err_code
        self.err_msg = err_msg
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.datas is not None:
            result['Datas'] = self.datas
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_msg is not None:
            result['ErrMsg'] = self.err_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Datas') is not None:
            self.datas = m.get('Datas')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMsg') is not None:
            self.err_msg = m.get('ErrMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetBimStandardAutoMarkResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: GetBimStandardAutoMarkResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetBimStandardAutoMarkResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetBimStandardListRequest(TeaModel):
    def __init__(
        self,
        task_id: int = None,
    ):
        # 任务id
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class GetBimStandardListResponseBodyDatasArchitecture(TeaModel):
    def __init__(
        self,
        detail: List[Dict[str, Any]] = None,
        elevation: List[Dict[str, Any]] = None,
        plan: List[Dict[str, Any]] = None,
    ):
        self.detail = detail
        self.elevation = elevation
        self.plan = plan

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.detail is not None:
            result['Detail'] = self.detail
        if self.elevation is not None:
            result['Elevation'] = self.elevation
        if self.plan is not None:
            result['Plan'] = self.plan
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Detail') is not None:
            self.detail = m.get('Detail')
        if m.get('Elevation') is not None:
            self.elevation = m.get('Elevation')
        if m.get('Plan') is not None:
            self.plan = m.get('Plan')
        return self


class GetBimStandardListResponseBodyDatasStructure(TeaModel):
    def __init__(
        self,
        detail: List[Dict[str, Any]] = None,
        elevation: List[Dict[str, Any]] = None,
        plan: List[Dict[str, Any]] = None,
        sample: List[Dict[str, Any]] = None,
    ):
        self.detail = detail
        self.elevation = elevation
        self.plan = plan
        self.sample = sample

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.detail is not None:
            result['Detail'] = self.detail
        if self.elevation is not None:
            result['Elevation'] = self.elevation
        if self.plan is not None:
            result['Plan'] = self.plan
        if self.sample is not None:
            result['Sample'] = self.sample
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Detail') is not None:
            self.detail = m.get('Detail')
        if m.get('Elevation') is not None:
            self.elevation = m.get('Elevation')
        if m.get('Plan') is not None:
            self.plan = m.get('Plan')
        if m.get('Sample') is not None:
            self.sample = m.get('Sample')
        return self


class GetBimStandardListResponseBodyDatas(TeaModel):
    def __init__(
        self,
        architecture: GetBimStandardListResponseBodyDatasArchitecture = None,
        building_no: str = None,
        structure: GetBimStandardListResponseBodyDatasStructure = None,
    ):
        self.architecture = architecture
        self.building_no = building_no
        self.structure = structure

    def validate(self):
        if self.architecture:
            self.architecture.validate()
        if self.structure:
            self.structure.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.architecture is not None:
            result['Architecture'] = self.architecture.to_map()
        if self.building_no is not None:
            result['BuildingNo'] = self.building_no
        if self.structure is not None:
            result['Structure'] = self.structure.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Architecture') is not None:
            temp_model = GetBimStandardListResponseBodyDatasArchitecture()
            self.architecture = temp_model.from_map(m['Architecture'])
        if m.get('BuildingNo') is not None:
            self.building_no = m.get('BuildingNo')
        if m.get('Structure') is not None:
            temp_model = GetBimStandardListResponseBodyDatasStructure()
            self.structure = temp_model.from_map(m['Structure'])
        return self


class GetBimStandardListResponseBody(TeaModel):
    def __init__(
        self,
        datas: List[GetBimStandardListResponseBodyDatas] = None,
        err_code: int = None,
        err_msg: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.datas = datas
        self.err_code = err_code
        self.err_msg = err_msg
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.datas:
            for k in self.datas:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Datas'] = []
        if self.datas is not None:
            for k in self.datas:
                result['Datas'].append(k.to_map() if k else None)
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_msg is not None:
            result['ErrMsg'] = self.err_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.datas = []
        if m.get('Datas') is not None:
            for k in m.get('Datas'):
                temp_model = GetBimStandardListResponseBodyDatas()
                self.datas.append(temp_model.from_map(k))
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMsg') is not None:
            self.err_msg = m.get('ErrMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetBimStandardListResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: GetBimStandardListResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetBimStandardListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetBimStandardPlanRequest(TeaModel):
    def __init__(
        self,
        standard: int = None,
        task_id: int = None,
    ):
        # 标准图纸id
        self.standard = standard
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.standard is not None:
            result['Standard'] = self.standard
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Standard') is not None:
            self.standard = m.get('Standard')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class GetBimStandardPlanResponseBodyDatasConfigMapInfoList(TeaModel):
    def __init__(
        self,
        id: int = None,
        name: str = None,
    ):
        # 图层id
        self.id = id
        # 图层名
        self.name = name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        if self.name is not None:
            result['Name'] = self.name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        return self


class GetBimStandardPlanResponseBodyDatasConfigMapInfo(TeaModel):
    def __init__(
        self,
        layer: str = None,
        list: List[GetBimStandardPlanResponseBodyDatasConfigMapInfoList] = None,
    ):
        # 图层归类名
        self.layer = layer
        # 图层信息
        self.list = list

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.layer is not None:
            result['Layer'] = self.layer
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Layer') is not None:
            self.layer = m.get('Layer')
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = GetBimStandardPlanResponseBodyDatasConfigMapInfoList()
                self.list.append(temp_model.from_map(k))
        return self


class GetBimStandardPlanResponseBodyDatasConfig(TeaModel):
    def __init__(
        self,
        id: int = None,
        map_info: List[GetBimStandardPlanResponseBodyDatasConfigMapInfo] = None,
    ):
        # 标注信息id
        self.id = id
        # 图层归类信息
        self.map_info = map_info

    def validate(self):
        if self.map_info:
            for k in self.map_info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        result['MapInfo'] = []
        if self.map_info is not None:
            for k in self.map_info:
                result['MapInfo'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        self.map_info = []
        if m.get('MapInfo') is not None:
            for k in m.get('MapInfo'):
                temp_model = GetBimStandardPlanResponseBodyDatasConfigMapInfo()
                self.map_info.append(temp_model.from_map(k))
        return self


class GetBimStandardPlanResponseBodyDatasTemplateConfigMapInfoList(TeaModel):
    def __init__(
        self,
        id: int = None,
        name: str = None,
    ):
        self.id = id
        self.name = name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        if self.name is not None:
            result['Name'] = self.name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        return self


class GetBimStandardPlanResponseBodyDatasTemplateConfigMapInfo(TeaModel):
    def __init__(
        self,
        layer: str = None,
        list: List[GetBimStandardPlanResponseBodyDatasTemplateConfigMapInfoList] = None,
    ):
        # 最近一次图层名
        self.layer = layer
        # 最近一次图层id
        self.list = list

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.layer is not None:
            result['Layer'] = self.layer
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Layer') is not None:
            self.layer = m.get('Layer')
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = GetBimStandardPlanResponseBodyDatasTemplateConfigMapInfoList()
                self.list.append(temp_model.from_map(k))
        return self


class GetBimStandardPlanResponseBodyDatasTemplateConfig(TeaModel):
    def __init__(
        self,
        id: int = None,
        map_info: List[GetBimStandardPlanResponseBodyDatasTemplateConfigMapInfo] = None,
    ):
        # 最近一次标注配置id
        self.id = id
        # 最近一次图层信息
        self.map_info = map_info

    def validate(self):
        if self.map_info:
            for k in self.map_info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        result['MapInfo'] = []
        if self.map_info is not None:
            for k in self.map_info:
                result['MapInfo'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        self.map_info = []
        if m.get('MapInfo') is not None:
            for k in m.get('MapInfo'):
                temp_model = GetBimStandardPlanResponseBodyDatasTemplateConfigMapInfo()
                self.map_info.append(temp_model.from_map(k))
        return self


class GetBimStandardPlanResponseBodyDatas(TeaModel):
    def __init__(
        self,
        config: GetBimStandardPlanResponseBodyDatasConfig = None,
        id: int = None,
        status: int = None,
        template_config: GetBimStandardPlanResponseBodyDatasTemplateConfig = None,
    ):
        # 标注配置信息
        self.config = config
        # 标准图纸id
        self.id = id
        # 标准图纸状态
        self.status = status
        # 最近一次标注配置
        self.template_config = template_config

    def validate(self):
        if self.config:
            self.config.validate()
        if self.template_config:
            self.template_config.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.config is not None:
            result['Config'] = self.config.to_map()
        if self.id is not None:
            result['Id'] = self.id
        if self.status is not None:
            result['Status'] = self.status
        if self.template_config is not None:
            result['TemplateConfig'] = self.template_config.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Config') is not None:
            temp_model = GetBimStandardPlanResponseBodyDatasConfig()
            self.config = temp_model.from_map(m['Config'])
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TemplateConfig') is not None:
            temp_model = GetBimStandardPlanResponseBodyDatasTemplateConfig()
            self.template_config = temp_model.from_map(m['TemplateConfig'])
        return self


class GetBimStandardPlanResponseBody(TeaModel):
    def __init__(
        self,
        datas: GetBimStandardPlanResponseBodyDatas = None,
        err_code: int = None,
        err_msg: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.datas = datas
        self.err_code = err_code
        self.err_msg = err_msg
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.datas:
            self.datas.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.datas is not None:
            result['Datas'] = self.datas.to_map()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_msg is not None:
            result['ErrMsg'] = self.err_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Datas') is not None:
            temp_model = GetBimStandardPlanResponseBodyDatas()
            self.datas = temp_model.from_map(m['Datas'])
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMsg') is not None:
            self.err_msg = m.get('ErrMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetBimStandardPlanResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: GetBimStandardPlanResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetBimStandardPlanResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetBimStandardRenderRequest(TeaModel):
    def __init__(
        self,
        standard_id: int = None,
        task_id: int = None,
    ):
        # 标准图纸id
        self.standard_id = standard_id
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.standard_id is not None:
            result['StandardId'] = self.standard_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('StandardId') is not None:
            self.standard_id = m.get('StandardId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class GetBimStandardRenderResponseBodyDatas(TeaModel):
    def __init__(
        self,
        blocks: Dict[str, Any] = None,
        font_prefix: str = None,
        geometry_prefix: str = None,
        path: str = None,
    ):
        self.blocks = blocks
        self.font_prefix = font_prefix
        self.geometry_prefix = geometry_prefix
        self.path = path

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.blocks is not None:
            result['Blocks'] = self.blocks
        if self.font_prefix is not None:
            result['FontPrefix'] = self.font_prefix
        if self.geometry_prefix is not None:
            result['GeometryPrefix'] = self.geometry_prefix
        if self.path is not None:
            result['Path'] = self.path
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Blocks') is not None:
            self.blocks = m.get('Blocks')
        if m.get('FontPrefix') is not None:
            self.font_prefix = m.get('FontPrefix')
        if m.get('GeometryPrefix') is not None:
            self.geometry_prefix = m.get('GeometryPrefix')
        if m.get('Path') is not None:
            self.path = m.get('Path')
        return self


class GetBimStandardRenderResponseBody(TeaModel):
    def __init__(
        self,
        datas: GetBimStandardRenderResponseBodyDatas = None,
        err_code: int = None,
        err_msg: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.datas = datas
        self.err_code = err_code
        self.err_msg = err_msg
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.datas:
            self.datas.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.datas is not None:
            result['Datas'] = self.datas.to_map()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_msg is not None:
            result['ErrMsg'] = self.err_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Datas') is not None:
            temp_model = GetBimStandardRenderResponseBodyDatas()
            self.datas = temp_model.from_map(m['Datas'])
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMsg') is not None:
            self.err_msg = m.get('ErrMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetBimStandardRenderResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: GetBimStandardRenderResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetBimStandardRenderResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetBimStandardSampleRequest(TeaModel):
    def __init__(
        self,
        standard_id: int = None,
        task_id: int = None,
    ):
        # 标准图纸id
        self.standard_id = standard_id
        # 任务id
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.standard_id is not None:
            result['StandardId'] = self.standard_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('StandardId') is not None:
            self.standard_id = m.get('StandardId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class GetBimStandardSampleResponseBodyDatasDataLegends(TeaModel):
    def __init__(
        self,
        elevation_height: Dict[str, Any] = None,
        elevation_mode: str = None,
        elevation_operator: str = None,
        pattern_name: str = None,
        picture: str = None,
        thickness: int = None,
    ):
        # 底标高
        self.elevation_height = elevation_height
        # 标高模式
        self.elevation_mode = elevation_mode
        # 标高运算
        self.elevation_operator = elevation_operator
        # 板名
        self.pattern_name = pattern_name
        # 板图片
        self.picture = picture
        # 板厚度
        self.thickness = thickness

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.elevation_height is not None:
            result['ElevationHeight'] = self.elevation_height
        if self.elevation_mode is not None:
            result['ElevationMode'] = self.elevation_mode
        if self.elevation_operator is not None:
            result['ElevationOperator'] = self.elevation_operator
        if self.pattern_name is not None:
            result['PatternName'] = self.pattern_name
        if self.picture is not None:
            result['Picture'] = self.picture
        if self.thickness is not None:
            result['Thickness'] = self.thickness
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ElevationHeight') is not None:
            self.elevation_height = m.get('ElevationHeight')
        if m.get('ElevationMode') is not None:
            self.elevation_mode = m.get('ElevationMode')
        if m.get('ElevationOperator') is not None:
            self.elevation_operator = m.get('ElevationOperator')
        if m.get('PatternName') is not None:
            self.pattern_name = m.get('PatternName')
        if m.get('Picture') is not None:
            self.picture = m.get('Picture')
        if m.get('Thickness') is not None:
            self.thickness = m.get('Thickness')
        return self


class GetBimStandardSampleResponseBodyDatasData(TeaModel):
    def __init__(
        self,
        legends: List[GetBimStandardSampleResponseBodyDatasDataLegends] = None,
        root_dir: str = None,
        thickness: int = None,
    ):
        self.legends = legends
        # 根文件夹
        self.root_dir = root_dir
        # 默认厚度
        self.thickness = thickness

    def validate(self):
        if self.legends:
            for k in self.legends:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Legends'] = []
        if self.legends is not None:
            for k in self.legends:
                result['Legends'].append(k.to_map() if k else None)
        if self.root_dir is not None:
            result['RootDir'] = self.root_dir
        if self.thickness is not None:
            result['Thickness'] = self.thickness
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.legends = []
        if m.get('Legends') is not None:
            for k in m.get('Legends'):
                temp_model = GetBimStandardSampleResponseBodyDatasDataLegends()
                self.legends.append(temp_model.from_map(k))
        if m.get('RootDir') is not None:
            self.root_dir = m.get('RootDir')
        if m.get('Thickness') is not None:
            self.thickness = m.get('Thickness')
        return self


class GetBimStandardSampleResponseBodyDatas(TeaModel):
    def __init__(
        self,
        data: GetBimStandardSampleResponseBodyDatasData = None,
        id: int = None,
        status: int = None,
    ):
        # 大样结构板数据
        self.data = data
        # 标准图纸id
        self.id = id
        # 图纸状态
        self.status = status

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.id is not None:
            result['Id'] = self.id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Data') is not None:
            temp_model = GetBimStandardSampleResponseBodyDatasData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetBimStandardSampleResponseBody(TeaModel):
    def __init__(
        self,
        datas: GetBimStandardSampleResponseBodyDatas = None,
        err_code: int = None,
        err_msg: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        # 接口返回数据
        self.datas = datas
        self.err_code = err_code
        self.err_msg = err_msg
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.datas:
            self.datas.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.datas is not None:
            result['Datas'] = self.datas.to_map()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_msg is not None:
            result['ErrMsg'] = self.err_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Datas') is not None:
            temp_model = GetBimStandardSampleResponseBodyDatas()
            self.datas = temp_model.from_map(m['Datas'])
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMsg') is not None:
            self.err_msg = m.get('ErrMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetBimStandardSampleResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: GetBimStandardSampleResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetBimStandardSampleResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetBimStandardStatusByIdsRequest(TeaModel):
    def __init__(
        self,
        ids: List[int] = None,
        task_id: int = None,
    ):
        self.ids = ids
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ids is not None:
            result['Ids'] = self.ids
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Ids') is not None:
            self.ids = m.get('Ids')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class GetBimStandardStatusByIdsShrinkRequest(TeaModel):
    def __init__(
        self,
        ids_shrink: str = None,
        task_id: int = None,
    ):
        self.ids_shrink = ids_shrink
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ids_shrink is not None:
            result['Ids'] = self.ids_shrink
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Ids') is not None:
            self.ids_shrink = m.get('Ids')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class GetBimStandardStatusByIdsResponseBodyDatas(TeaModel):
    def __init__(
        self,
        id: int = None,
        status: int = None,
    ):
        # 标准图纸id
        self.id = id
        # 标准图纸状态
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetBimStandardStatusByIdsResponseBody(TeaModel):
    def __init__(
        self,
        datas: List[GetBimStandardStatusByIdsResponseBodyDatas] = None,
        err_code: int = None,
        err_msg: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.datas = datas
        self.err_code = err_code
        self.err_msg = err_msg
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.datas:
            for k in self.datas:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Datas'] = []
        if self.datas is not None:
            for k in self.datas:
                result['Datas'].append(k.to_map() if k else None)
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_msg is not None:
            result['ErrMsg'] = self.err_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.datas = []
        if m.get('Datas') is not None:
            for k in m.get('Datas'):
                temp_model = GetBimStandardStatusByIdsResponseBodyDatas()
                self.datas.append(temp_model.from_map(k))
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMsg') is not None:
            self.err_msg = m.get('ErrMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetBimStandardStatusByIdsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: GetBimStandardStatusByIdsResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetBimStandardStatusByIdsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetBimTaskDetailRequest(TeaModel):
    def __init__(
        self,
        task_id: int = None,
    ):
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class GetBimTaskDetailResponseBodyDatas(TeaModel):
    def __init__(
        self,
        id: int = None,
        modeling_status: int = None,
        phase: str = None,
    ):
        # 任务id
        self.id = id
        # 模型状态
        self.modeling_status = modeling_status
        # 阶段
        self.phase = phase

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        if self.modeling_status is not None:
            result['ModelingStatus'] = self.modeling_status
        if self.phase is not None:
            result['Phase'] = self.phase
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('ModelingStatus') is not None:
            self.modeling_status = m.get('ModelingStatus')
        if m.get('Phase') is not None:
            self.phase = m.get('Phase')
        return self


class GetBimTaskDetailResponseBody(TeaModel):
    def __init__(
        self,
        datas: GetBimTaskDetailResponseBodyDatas = None,
        err_code: int = None,
        err_msg: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.datas = datas
        self.err_code = err_code
        self.err_msg = err_msg
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.datas:
            self.datas.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.datas is not None:
            result['Datas'] = self.datas.to_map()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_msg is not None:
            result['ErrMsg'] = self.err_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Datas') is not None:
            temp_model = GetBimTaskDetailResponseBodyDatas()
            self.datas = temp_model.from_map(m['Datas'])
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMsg') is not None:
            self.err_msg = m.get('ErrMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetBimTaskDetailResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: GetBimTaskDetailResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetBimTaskDetailResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetBimTenantFlowRequest(TeaModel):
    def __init__(
        self,
        region_id: str = None,
    ):
        self.region_id = region_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        return self


class GetBimTenantFlowResponseBodyDatas(TeaModel):
    def __init__(
        self,
        company: str = None,
        flow: int = None,
        used_flow: int = None,
    ):
        # 单位（B,KB,M）
        self.company = company
        # 总流量
        self.flow = flow
        # 已用流量
        self.used_flow = used_flow

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.company is not None:
            result['Company'] = self.company
        if self.flow is not None:
            result['Flow'] = self.flow
        if self.used_flow is not None:
            result['UsedFlow'] = self.used_flow
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Company') is not None:
            self.company = m.get('Company')
        if m.get('Flow') is not None:
            self.flow = m.get('Flow')
        if m.get('UsedFlow') is not None:
            self.used_flow = m.get('UsedFlow')
        return self


class GetBimTenantFlowResponseBody(TeaModel):
    def __init__(
        self,
        datas: GetBimTenantFlowResponseBodyDatas = None,
        err_code: int = None,
        err_msg: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.datas = datas
        self.err_code = err_code
        self.err_msg = err_msg
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.datas:
            self.datas.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.datas is not None:
            result['Datas'] = self.datas.to_map()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_msg is not None:
            result['ErrMsg'] = self.err_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Datas') is not None:
            temp_model = GetBimTenantFlowResponseBodyDatas()
            self.datas = temp_model.from_map(m['Datas'])
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMsg') is not None:
            self.err_msg = m.get('ErrMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetBimTenantFlowResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: GetBimTenantFlowResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetBimTenantFlowResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetBimTransModelListRequest(TeaModel):
    def __init__(
        self,
        task_id: int = None,
    ):
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class GetBimTransModelListResponseBodyDatas(TeaModel):
    def __init__(
        self,
        commpany: str = None,
        end_time: str = None,
        file_id: int = None,
        id: int = None,
        model_name: str = None,
        path: str = None,
        size: int = None,
        status: int = None,
        task_id: int = None,
        type: str = None,
    ):
        # 单位（B,MB）
        self.commpany = commpany
        self.end_time = end_time
        self.file_id = file_id
        # 转换模型id
        self.id = id
        # 模型名称
        self.model_name = model_name
        self.path = path
        # 大小
        self.size = size
        self.status = status
        self.task_id = task_id
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.commpany is not None:
            result['Commpany'] = self.commpany
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.file_id is not None:
            result['FileId'] = self.file_id
        if self.id is not None:
            result['Id'] = self.id
        if self.model_name is not None:
            result['ModelName'] = self.model_name
        if self.path is not None:
            result['Path'] = self.path
        if self.size is not None:
            result['Size'] = self.size
        if self.status is not None:
            result['Status'] = self.status
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Commpany') is not None:
            self.commpany = m.get('Commpany')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('FileId') is not None:
            self.file_id = m.get('FileId')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('ModelName') is not None:
            self.model_name = m.get('ModelName')
        if m.get('Path') is not None:
            self.path = m.get('Path')
        if m.get('Size') is not None:
            self.size = m.get('Size')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class GetBimTransModelListResponseBody(TeaModel):
    def __init__(
        self,
        datas: List[GetBimTransModelListResponseBodyDatas] = None,
        err_code: int = None,
        err_msg: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.datas = datas
        self.err_code = err_code
        self.err_msg = err_msg
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.datas:
            for k in self.datas:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Datas'] = []
        if self.datas is not None:
            for k in self.datas:
                result['Datas'].append(k.to_map() if k else None)
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_msg is not None:
            result['ErrMsg'] = self.err_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.datas = []
        if m.get('Datas') is not None:
            for k in m.get('Datas'):
                temp_model = GetBimTransModelListResponseBodyDatas()
                self.datas.append(temp_model.from_map(k))
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMsg') is not None:
            self.err_msg = m.get('ErrMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetBimTransModelListResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: GetBimTransModelListResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetBimTransModelListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetBimUploadStsTokenRequest(TeaModel):
    def __init__(
        self,
        task_id: int = None,
    ):
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class GetBimUploadStsTokenResponseBodyDatas(TeaModel):
    def __init__(
        self,
        access_key_id: str = None,
        access_key_secret: str = None,
        expiration: int = None,
        oss_bucket: str = None,
        oss_region: str = None,
        path: str = None,
        security_token: str = None,
    ):
        self.access_key_id = access_key_id
        self.access_key_secret = access_key_secret
        self.expiration = expiration
        self.oss_bucket = oss_bucket
        self.oss_region = oss_region
        # 路径
        self.path = path
        self.security_token = security_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.access_key_id is not None:
            result['AccessKeyId'] = self.access_key_id
        if self.access_key_secret is not None:
            result['AccessKeySecret'] = self.access_key_secret
        if self.expiration is not None:
            result['Expiration'] = self.expiration
        if self.oss_bucket is not None:
            result['OssBucket'] = self.oss_bucket
        if self.oss_region is not None:
            result['OssRegion'] = self.oss_region
        if self.path is not None:
            result['Path'] = self.path
        if self.security_token is not None:
            result['SecurityToken'] = self.security_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccessKeyId') is not None:
            self.access_key_id = m.get('AccessKeyId')
        if m.get('AccessKeySecret') is not None:
            self.access_key_secret = m.get('AccessKeySecret')
        if m.get('Expiration') is not None:
            self.expiration = m.get('Expiration')
        if m.get('OssBucket') is not None:
            self.oss_bucket = m.get('OssBucket')
        if m.get('OssRegion') is not None:
            self.oss_region = m.get('OssRegion')
        if m.get('Path') is not None:
            self.path = m.get('Path')
        if m.get('SecurityToken') is not None:
            self.security_token = m.get('SecurityToken')
        return self


class GetBimUploadStsTokenResponseBody(TeaModel):
    def __init__(
        self,
        datas: GetBimUploadStsTokenResponseBodyDatas = None,
        err_code: int = None,
        err_msg: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.datas = datas
        self.err_code = err_code
        self.err_msg = err_msg
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.datas:
            self.datas.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.datas is not None:
            result['Datas'] = self.datas.to_map()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_msg is not None:
            result['ErrMsg'] = self.err_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Datas') is not None:
            temp_model = GetBimUploadStsTokenResponseBodyDatas()
            self.datas = temp_model.from_map(m['Datas'])
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMsg') is not None:
            self.err_msg = m.get('ErrMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetBimUploadStsTokenResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: GetBimUploadStsTokenResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetBimUploadStsTokenResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetCurrentUserRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
    ):
        self.aliyun_jwt = aliyun_jwt

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        return self


class GetCurrentUserResponseBodyMenus(TeaModel):
    def __init__(
        self,
        gmt_create: str = None,
        gmt_modified: str = None,
        id: int = None,
        name: str = None,
        status: str = None,
        url: str = None,
    ):
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.id = id
        self.name = name
        self.status = status
        self.url = url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        if self.name is not None:
            result['Name'] = self.name
        if self.status is not None:
            result['Status'] = self.status
        if self.url is not None:
            result['Url'] = self.url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Url') is not None:
            self.url = m.get('Url')
        return self


class GetCurrentUserResponseBodyRoles(TeaModel):
    def __init__(
        self,
        gmt_create: str = None,
        gmt_modified: str = None,
        id: int = None,
        name: str = None,
        parent_id: int = None,
        status: str = None,
        type: str = None,
    ):
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.id = id
        self.name = name
        self.parent_id = parent_id
        self.status = status
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        if self.name is not None:
            result['Name'] = self.name
        if self.parent_id is not None:
            result['ParentId'] = self.parent_id
        if self.status is not None:
            result['Status'] = self.status
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('ParentId') is not None:
            self.parent_id = m.get('ParentId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class GetCurrentUserResponseBody(TeaModel):
    def __init__(
        self,
        company_id: int = None,
        company_name: str = None,
        email: str = None,
        ext_1: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        id: int = None,
        menus: List[GetCurrentUserResponseBodyMenus] = None,
        name: str = None,
        phone: str = None,
        request_id: str = None,
        roles: List[GetCurrentUserResponseBodyRoles] = None,
        status: str = None,
    ):
        self.company_id = company_id
        self.company_name = company_name
        self.email = email
        self.ext_1 = ext_1
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.id = id
        self.menus = menus
        self.name = name
        self.phone = phone
        # Id of the request
        self.request_id = request_id
        self.roles = roles
        self.status = status

    def validate(self):
        if self.menus:
            for k in self.menus:
                if k:
                    k.validate()
        if self.roles:
            for k in self.roles:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.company_id is not None:
            result['CompanyId'] = self.company_id
        if self.company_name is not None:
            result['CompanyName'] = self.company_name
        if self.email is not None:
            result['Email'] = self.email
        if self.ext_1 is not None:
            result['Ext1'] = self.ext_1
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        result['Menus'] = []
        if self.menus is not None:
            for k in self.menus:
                result['Menus'].append(k.to_map() if k else None)
        if self.name is not None:
            result['Name'] = self.name
        if self.phone is not None:
            result['Phone'] = self.phone
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Roles'] = []
        if self.roles is not None:
            for k in self.roles:
                result['Roles'].append(k.to_map() if k else None)
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CompanyId') is not None:
            self.company_id = m.get('CompanyId')
        if m.get('CompanyName') is not None:
            self.company_name = m.get('CompanyName')
        if m.get('Email') is not None:
            self.email = m.get('Email')
        if m.get('Ext1') is not None:
            self.ext_1 = m.get('Ext1')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        self.menus = []
        if m.get('Menus') is not None:
            for k in m.get('Menus'):
                temp_model = GetCurrentUserResponseBodyMenus()
                self.menus.append(temp_model.from_map(k))
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Phone') is not None:
            self.phone = m.get('Phone')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.roles = []
        if m.get('Roles') is not None:
            for k in m.get('Roles'):
                temp_model = GetCurrentUserResponseBodyRoles()
                self.roles.append(temp_model.from_map(k))
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetCurrentUserResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: GetCurrentUserResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetCurrentUserResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetInstancesRequest(TeaModel):
    def __init__(
        self,
        pipeline_node_id: str = None,
    ):
        self.pipeline_node_id = pipeline_node_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.pipeline_node_id is not None:
            result['PipelineNodeId'] = self.pipeline_node_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PipelineNodeId') is not None:
            self.pipeline_node_id = m.get('PipelineNodeId')
        return self


class GetInstancesResponseBodyPageableSort(TeaModel):
    def __init__(
        self,
        empty: bool = None,
        sorted: bool = None,
        unsorted: bool = None,
    ):
        self.empty = empty
        self.sorted = sorted
        self.unsorted = unsorted

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.empty is not None:
            result['Empty'] = self.empty
        if self.sorted is not None:
            result['Sorted'] = self.sorted
        if self.unsorted is not None:
            result['Unsorted'] = self.unsorted
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Empty') is not None:
            self.empty = m.get('Empty')
        if m.get('Sorted') is not None:
            self.sorted = m.get('Sorted')
        if m.get('Unsorted') is not None:
            self.unsorted = m.get('Unsorted')
        return self


class GetInstancesResponseBodyPageable(TeaModel):
    def __init__(
        self,
        offset: int = None,
        page_number: int = None,
        page_size: int = None,
        paged: bool = None,
        sort: GetInstancesResponseBodyPageableSort = None,
        unpaged: bool = None,
    ):
        self.offset = offset
        self.page_number = page_number
        self.page_size = page_size
        self.paged = paged
        self.sort = sort
        self.unpaged = unpaged

    def validate(self):
        if self.sort:
            self.sort.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.offset is not None:
            result['Offset'] = self.offset
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.paged is not None:
            result['Paged'] = self.paged
        if self.sort is not None:
            result['Sort'] = self.sort.to_map()
        if self.unpaged is not None:
            result['Unpaged'] = self.unpaged
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Offset') is not None:
            self.offset = m.get('Offset')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('Paged') is not None:
            self.paged = m.get('Paged')
        if m.get('Sort') is not None:
            temp_model = GetInstancesResponseBodyPageableSort()
            self.sort = temp_model.from_map(m['Sort'])
        if m.get('Unpaged') is not None:
            self.unpaged = m.get('Unpaged')
        return self


class GetInstancesResponseBodySort(TeaModel):
    def __init__(
        self,
        empty: bool = None,
        sorted: bool = None,
        unsorted: bool = None,
    ):
        self.empty = empty
        self.sorted = sorted
        self.unsorted = unsorted

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.empty is not None:
            result['Empty'] = self.empty
        if self.sorted is not None:
            result['Sorted'] = self.sorted
        if self.unsorted is not None:
            result['Unsorted'] = self.unsorted
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Empty') is not None:
            self.empty = m.get('Empty')
        if m.get('Sorted') is not None:
            self.sorted = m.get('Sorted')
        if m.get('Unsorted') is not None:
            self.unsorted = m.get('Unsorted')
        return self


class GetInstancesResponseBody(TeaModel):
    def __init__(
        self,
        content: str = None,
        empty: bool = None,
        first: bool = None,
        last: bool = None,
        number: int = None,
        number_of_elements: int = None,
        pageable: GetInstancesResponseBodyPageable = None,
        request_id: str = None,
        size: int = None,
        sort: GetInstancesResponseBodySort = None,
        total_elements: int = None,
        total_pages: int = None,
    ):
        self.content = content
        self.empty = empty
        self.first = first
        self.last = last
        self.number = number
        self.number_of_elements = number_of_elements
        self.pageable = pageable
        # Id of the request
        self.request_id = request_id
        self.size = size
        self.sort = sort
        self.total_elements = total_elements
        self.total_pages = total_pages

    def validate(self):
        if self.pageable:
            self.pageable.validate()
        if self.sort:
            self.sort.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['Content'] = self.content
        if self.empty is not None:
            result['Empty'] = self.empty
        if self.first is not None:
            result['First'] = self.first
        if self.last is not None:
            result['Last'] = self.last
        if self.number is not None:
            result['Number'] = self.number
        if self.number_of_elements is not None:
            result['NumberOfElements'] = self.number_of_elements
        if self.pageable is not None:
            result['Pageable'] = self.pageable.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.size is not None:
            result['Size'] = self.size
        if self.sort is not None:
            result['Sort'] = self.sort.to_map()
        if self.total_elements is not None:
            result['TotalElements'] = self.total_elements
        if self.total_pages is not None:
            result['TotalPages'] = self.total_pages
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('Empty') is not None:
            self.empty = m.get('Empty')
        if m.get('First') is not None:
            self.first = m.get('First')
        if m.get('Last') is not None:
            self.last = m.get('Last')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('NumberOfElements') is not None:
            self.number_of_elements = m.get('NumberOfElements')
        if m.get('Pageable') is not None:
            temp_model = GetInstancesResponseBodyPageable()
            self.pageable = temp_model.from_map(m['Pageable'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Size') is not None:
            self.size = m.get('Size')
        if m.get('Sort') is not None:
            temp_model = GetInstancesResponseBodySort()
            self.sort = temp_model.from_map(m['Sort'])
        if m.get('TotalElements') is not None:
            self.total_elements = m.get('TotalElements')
        if m.get('TotalPages') is not None:
            self.total_pages = m.get('TotalPages')
        return self


class GetInstancesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: GetInstancesResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetInstancesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetLatestNodeByTypeRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        pipeline_node_type: str = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.pipeline_node_type = pipeline_node_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.pipeline_node_type is not None:
            result['PipelineNodeType'] = self.pipeline_node_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('PipelineNodeType') is not None:
            self.pipeline_node_type = m.get('PipelineNodeType')
        return self


class GetLatestNodeByTypeResponseBody(TeaModel):
    def __init__(
        self,
        enabled: str = None,
        exposed: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        id: str = None,
        order: str = None,
        parent_id: str = None,
        request_id: str = None,
        usage: str = None,
    ):
        self.enabled = enabled
        self.exposed = exposed
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.id = id
        self.order = order
        self.parent_id = parent_id
        # Id of the request
        self.request_id = request_id
        self.usage = usage

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.enabled is not None:
            result['Enabled'] = self.enabled
        if self.exposed is not None:
            result['Exposed'] = self.exposed
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        if self.order is not None:
            result['Order'] = self.order
        if self.parent_id is not None:
            result['ParentId'] = self.parent_id
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.usage is not None:
            result['Usage'] = self.usage
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Enabled') is not None:
            self.enabled = m.get('Enabled')
        if m.get('Exposed') is not None:
            self.exposed = m.get('Exposed')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Order') is not None:
            self.order = m.get('Order')
        if m.get('ParentId') is not None:
            self.parent_id = m.get('ParentId')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Usage') is not None:
            self.usage = m.get('Usage')
        return self


class GetLatestNodeByTypeResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: GetLatestNodeByTypeResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetLatestNodeByTypeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetMaterialListRequest(TeaModel):
    def __init__(
        self,
        current: int = None,
        name: str = None,
        size: int = None,
        type: str = None,
    ):
        self.current = current
        self.name = name
        self.size = size
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.current is not None:
            result['Current'] = self.current
        if self.name is not None:
            result['Name'] = self.name
        if self.size is not None:
            result['Size'] = self.size
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Current') is not None:
            self.current = m.get('Current')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Size') is not None:
            self.size = m.get('Size')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class GetMaterialListResponseBody(TeaModel):
    def __init__(
        self,
        data: Dict[str, Any] = None,
        error: str = None,
        msg_code: str = None,
        msg_info: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.data = data
        self.error = error
        self.msg_code = msg_code
        self.msg_info = msg_info
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data
        if self.error is not None:
            result['Error'] = self.error
        if self.msg_code is not None:
            result['MsgCode'] = self.msg_code
        if self.msg_info is not None:
            result['MsgInfo'] = self.msg_info
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Error') is not None:
            self.error = m.get('Error')
        if m.get('MsgCode') is not None:
            self.msg_code = m.get('MsgCode')
        if m.get('MsgInfo') is not None:
            self.msg_info = m.get('MsgInfo')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetMaterialListResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: GetMaterialListResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetMaterialListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetOssCredentialRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        dataset_id: int = None,
        type: str = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.dataset_id = dataset_id
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.dataset_id is not None:
            result['DatasetId'] = self.dataset_id
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('DatasetId') is not None:
            self.dataset_id = m.get('DatasetId')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class GetOssCredentialResponseBody(TeaModel):
    def __init__(
        self,
        access_key_id: str = None,
        access_key_secret: str = None,
        endpoint: str = None,
        expiration: str = None,
        oss_path: str = None,
        request_id: BaseRequest = None,
        security_token: str = None,
    ):
        self.access_key_id = access_key_id
        self.access_key_secret = access_key_secret
        self.endpoint = endpoint
        self.expiration = expiration
        self.oss_path = oss_path
        self.request_id = request_id
        self.security_token = security_token

    def validate(self):
        if self.request_id:
            self.request_id.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.access_key_id is not None:
            result['AccessKeyId'] = self.access_key_id
        if self.access_key_secret is not None:
            result['AccessKeySecret'] = self.access_key_secret
        if self.endpoint is not None:
            result['Endpoint'] = self.endpoint
        if self.expiration is not None:
            result['Expiration'] = self.expiration
        if self.oss_path is not None:
            result['OssPath'] = self.oss_path
        if self.request_id is not None:
            result['RequestId'] = self.request_id.to_map()
        if self.security_token is not None:
            result['SecurityToken'] = self.security_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccessKeyId') is not None:
            self.access_key_id = m.get('AccessKeyId')
        if m.get('AccessKeySecret') is not None:
            self.access_key_secret = m.get('AccessKeySecret')
        if m.get('Endpoint') is not None:
            self.endpoint = m.get('Endpoint')
        if m.get('Expiration') is not None:
            self.expiration = m.get('Expiration')
        if m.get('OssPath') is not None:
            self.oss_path = m.get('OssPath')
        if m.get('RequestId') is not None:
            temp_model = BaseRequest()
            self.request_id = temp_model.from_map(m['RequestId'])
        if m.get('SecurityToken') is not None:
            self.security_token = m.get('SecurityToken')
        return self


class GetOssCredentialResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: GetOssCredentialResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetOssCredentialResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetProjectPhaseDetailRequest(TeaModel):
    def __init__(
        self,
        task_id: int = None,
    ):
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class GetProjectPhaseDetailResponseBodyDatasList(TeaModel):
    def __init__(
        self,
        end_time: str = None,
        phase: str = None,
        status: int = None,
    ):
        self.end_time = end_time
        self.phase = phase
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.phase is not None:
            result['Phase'] = self.phase
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('Phase') is not None:
            self.phase = m.get('Phase')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetProjectPhaseDetailResponseBodyDatas(TeaModel):
    def __init__(
        self,
        current_phase: int = None,
        list: List[GetProjectPhaseDetailResponseBodyDatasList] = None,
    ):
        # 当前阶段返回时list下标
        self.current_phase = current_phase
        self.list = list

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.current_phase is not None:
            result['CurrentPhase'] = self.current_phase
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CurrentPhase') is not None:
            self.current_phase = m.get('CurrentPhase')
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = GetProjectPhaseDetailResponseBodyDatasList()
                self.list.append(temp_model.from_map(k))
        return self


class GetProjectPhaseDetailResponseBody(TeaModel):
    def __init__(
        self,
        datas: GetProjectPhaseDetailResponseBodyDatas = None,
        err_code: int = None,
        err_msg: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.datas = datas
        self.err_code = err_code
        self.err_msg = err_msg
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.datas:
            self.datas.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.datas is not None:
            result['Datas'] = self.datas.to_map()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_msg is not None:
            result['ErrMsg'] = self.err_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Datas') is not None:
            temp_model = GetProjectPhaseDetailResponseBodyDatas()
            self.datas = temp_model.from_map(m['Datas'])
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMsg') is not None:
            self.err_msg = m.get('ErrMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetProjectPhaseDetailResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: GetProjectPhaseDetailResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetProjectPhaseDetailResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetStatusAndOssRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        body: str = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.body = body

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.body is not None:
            result['body'] = self.body
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('body') is not None:
            self.body = m.get('body')
        return self


class GetStatusAndOssResponseBody(TeaModel):
    def __init__(
        self,
        dataset_publish_status: str = None,
        full_name: str = None,
        gmt_published: str = None,
        icon: str = None,
        nick_name: str = None,
        pipeline_status: str = None,
        project_id: int = None,
        request_id: str = None,
    ):
        self.dataset_publish_status = dataset_publish_status
        self.full_name = full_name
        self.gmt_published = gmt_published
        self.icon = icon
        self.nick_name = nick_name
        self.pipeline_status = pipeline_status
        self.project_id = project_id
        # Id of the request
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dataset_publish_status is not None:
            result['DatasetPublishStatus'] = self.dataset_publish_status
        if self.full_name is not None:
            result['FullName'] = self.full_name
        if self.gmt_published is not None:
            result['GmtPublished'] = self.gmt_published
        if self.icon is not None:
            result['Icon'] = self.icon
        if self.nick_name is not None:
            result['NickName'] = self.nick_name
        if self.pipeline_status is not None:
            result['PipelineStatus'] = self.pipeline_status
        if self.project_id is not None:
            result['ProjectId'] = self.project_id
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DatasetPublishStatus') is not None:
            self.dataset_publish_status = m.get('DatasetPublishStatus')
        if m.get('FullName') is not None:
            self.full_name = m.get('FullName')
        if m.get('GmtPublished') is not None:
            self.gmt_published = m.get('GmtPublished')
        if m.get('Icon') is not None:
            self.icon = m.get('Icon')
        if m.get('NickName') is not None:
            self.nick_name = m.get('NickName')
        if m.get('PipelineStatus') is not None:
            self.pipeline_status = m.get('PipelineStatus')
        if m.get('ProjectId') is not None:
            self.project_id = m.get('ProjectId')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class GetStatusAndOssResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: GetStatusAndOssResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetStatusAndOssResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetTemplateListRequest(TeaModel):
    def __init__(
        self,
        current: int = None,
        id: int = None,
        name: str = None,
        size: int = None,
        spec: str = None,
        style: str = None,
        type: str = None,
    ):
        self.current = current
        self.id = id
        self.name = name
        self.size = size
        self.spec = spec
        self.style = style
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.current is not None:
            result['Current'] = self.current
        if self.id is not None:
            result['Id'] = self.id
        if self.name is not None:
            result['Name'] = self.name
        if self.size is not None:
            result['Size'] = self.size
        if self.spec is not None:
            result['Spec'] = self.spec
        if self.style is not None:
            result['Style'] = self.style
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Current') is not None:
            self.current = m.get('Current')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Size') is not None:
            self.size = m.get('Size')
        if m.get('Spec') is not None:
            self.spec = m.get('Spec')
        if m.get('Style') is not None:
            self.style = m.get('Style')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class GetTemplateListResponseBody(TeaModel):
    def __init__(
        self,
        data: Dict[str, Any] = None,
        error: str = None,
        msg_code: str = None,
        msg_info: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.data = data
        self.error = error
        self.msg_code = msg_code
        self.msg_info = msg_info
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data
        if self.error is not None:
            result['Error'] = self.error
        if self.msg_code is not None:
            result['MsgCode'] = self.msg_code
        if self.msg_info is not None:
            result['MsgInfo'] = self.msg_info
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Error') is not None:
            self.error = m.get('Error')
        if m.get('MsgCode') is not None:
            self.msg_code = m.get('MsgCode')
        if m.get('MsgInfo') is not None:
            self.msg_info = m.get('MsgInfo')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetTemplateListResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: GetTemplateListResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetTemplateListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetTokenRequest(TeaModel):
    def __init__(
        self,
        path_type: str = None,
    ):
        self.path_type = path_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.path_type is not None:
            result['PathType'] = self.path_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PathType') is not None:
            self.path_type = m.get('PathType')
        return self


class GetTokenResponseBody(TeaModel):
    def __init__(
        self,
        data: Dict[str, Any] = None,
        error: str = None,
        msg_code: str = None,
        msg_info: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.data = data
        self.error = error
        self.msg_code = msg_code
        self.msg_info = msg_info
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data
        if self.error is not None:
            result['Error'] = self.error
        if self.msg_code is not None:
            result['MsgCode'] = self.msg_code
        if self.msg_info is not None:
            result['MsgInfo'] = self.msg_info
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Error') is not None:
            self.error = m.get('Error')
        if m.get('MsgCode') is not None:
            self.msg_code = m.get('MsgCode')
        if m.get('MsgInfo') is not None:
            self.msg_info = m.get('MsgInfo')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetTokenResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: GetTokenResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetTokenResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class MaterialCreateOnePictureRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        params: str = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.params = params

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.params is not None:
            result['Params'] = self.params
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('Params') is not None:
            self.params = m.get('Params')
        return self


class MaterialCreateOnePictureResponseBody(TeaModel):
    def __init__(
        self,
        audit_status: str = None,
        end_time: int = None,
        file_name: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        id: int = None,
        oss_key: str = None,
        remarks: str = None,
        request_id: str = None,
        source: str = None,
        start_time: int = None,
        thumbnail: str = None,
        upload_status: str = None,
        uploader: str = None,
    ):
        self.audit_status = audit_status
        self.end_time = end_time
        self.file_name = file_name
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.id = id
        self.oss_key = oss_key
        self.remarks = remarks
        # Id of the request
        self.request_id = request_id
        self.source = source
        self.start_time = start_time
        self.thumbnail = thumbnail
        self.upload_status = upload_status
        self.uploader = uploader

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.audit_status is not None:
            result['AuditStatus'] = self.audit_status
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        if self.oss_key is not None:
            result['OssKey'] = self.oss_key
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.source is not None:
            result['Source'] = self.source
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.thumbnail is not None:
            result['Thumbnail'] = self.thumbnail
        if self.upload_status is not None:
            result['UploadStatus'] = self.upload_status
        if self.uploader is not None:
            result['Uploader'] = self.uploader
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AuditStatus') is not None:
            self.audit_status = m.get('AuditStatus')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('OssKey') is not None:
            self.oss_key = m.get('OssKey')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Source') is not None:
            self.source = m.get('Source')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('Thumbnail') is not None:
            self.thumbnail = m.get('Thumbnail')
        if m.get('UploadStatus') is not None:
            self.upload_status = m.get('UploadStatus')
        if m.get('Uploader') is not None:
            self.uploader = m.get('Uploader')
        return self


class MaterialCreateOnePictureResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: MaterialCreateOnePictureResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = MaterialCreateOnePictureResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class MaterialCreateOneVideoRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        params: str = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.params = params

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.params is not None:
            result['Params'] = self.params
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('Params') is not None:
            self.params = m.get('Params')
        return self


class MaterialCreateOneVideoResponseBody(TeaModel):
    def __init__(
        self,
        audit_status: str = None,
        end_time: int = None,
        file_name: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        id: int = None,
        oss_key: str = None,
        remarks: str = None,
        request_id: str = None,
        source: str = None,
        start_time: int = None,
        thumbnail: str = None,
        upload_status: str = None,
        uploader: str = None,
    ):
        self.audit_status = audit_status
        self.end_time = end_time
        self.file_name = file_name
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.id = id
        self.oss_key = oss_key
        self.remarks = remarks
        # Id of the request
        self.request_id = request_id
        self.source = source
        self.start_time = start_time
        self.thumbnail = thumbnail
        self.upload_status = upload_status
        self.uploader = uploader

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.audit_status is not None:
            result['AuditStatus'] = self.audit_status
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        if self.oss_key is not None:
            result['OssKey'] = self.oss_key
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.source is not None:
            result['Source'] = self.source
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.thumbnail is not None:
            result['Thumbnail'] = self.thumbnail
        if self.upload_status is not None:
            result['UploadStatus'] = self.upload_status
        if self.uploader is not None:
            result['Uploader'] = self.uploader
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AuditStatus') is not None:
            self.audit_status = m.get('AuditStatus')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('OssKey') is not None:
            self.oss_key = m.get('OssKey')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Source') is not None:
            self.source = m.get('Source')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('Thumbnail') is not None:
            self.thumbnail = m.get('Thumbnail')
        if m.get('UploadStatus') is not None:
            self.upload_status = m.get('UploadStatus')
        if m.get('Uploader') is not None:
            self.uploader = m.get('Uploader')
        return self


class MaterialCreateOneVideoResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: MaterialCreateOneVideoResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = MaterialCreateOneVideoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class MaterialDeleteOneRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        id: str = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.id = id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.id is not None:
            result['Id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        return self


class MaterialDeleteOneResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
    ):
        # Id of the request
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class MaterialDeleteOneResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: MaterialDeleteOneResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = MaterialDeleteOneResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class MaterialFindAllRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        audit_status: str = None,
        direction: str = None,
        file_name: str = None,
        material_type: str = None,
        page: int = None,
        size: int = None,
        sort: str = None,
        source: str = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.audit_status = audit_status
        self.direction = direction
        self.file_name = file_name
        self.material_type = material_type
        self.page = page
        self.size = size
        self.sort = sort
        self.source = source

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.audit_status is not None:
            result['AuditStatus'] = self.audit_status
        if self.direction is not None:
            result['Direction'] = self.direction
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.material_type is not None:
            result['MaterialType'] = self.material_type
        if self.page is not None:
            result['Page'] = self.page
        if self.size is not None:
            result['Size'] = self.size
        if self.sort is not None:
            result['Sort'] = self.sort
        if self.source is not None:
            result['Source'] = self.source
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('AuditStatus') is not None:
            self.audit_status = m.get('AuditStatus')
        if m.get('Direction') is not None:
            self.direction = m.get('Direction')
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('MaterialType') is not None:
            self.material_type = m.get('MaterialType')
        if m.get('Page') is not None:
            self.page = m.get('Page')
        if m.get('Size') is not None:
            self.size = m.get('Size')
        if m.get('Sort') is not None:
            self.sort = m.get('Sort')
        if m.get('Source') is not None:
            self.source = m.get('Source')
        return self


class MaterialFindAllResponseBodyContent(TeaModel):
    def __init__(
        self,
        audit_status: str = None,
        end_time: int = None,
        file_name: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        id: int = None,
        oss_key: str = None,
        remarks: str = None,
        source: str = None,
        start_time: int = None,
        thumbnail: str = None,
        upload_status: str = None,
        uploader: str = None,
        url: str = None,
    ):
        self.audit_status = audit_status
        self.end_time = end_time
        self.file_name = file_name
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.id = id
        self.oss_key = oss_key
        self.remarks = remarks
        self.source = source
        self.start_time = start_time
        self.thumbnail = thumbnail
        self.upload_status = upload_status
        self.uploader = uploader
        self.url = url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.audit_status is not None:
            result['AuditStatus'] = self.audit_status
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        if self.oss_key is not None:
            result['OssKey'] = self.oss_key
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.source is not None:
            result['Source'] = self.source
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.thumbnail is not None:
            result['Thumbnail'] = self.thumbnail
        if self.upload_status is not None:
            result['UploadStatus'] = self.upload_status
        if self.uploader is not None:
            result['Uploader'] = self.uploader
        if self.url is not None:
            result['Url'] = self.url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AuditStatus') is not None:
            self.audit_status = m.get('AuditStatus')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('OssKey') is not None:
            self.oss_key = m.get('OssKey')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('Source') is not None:
            self.source = m.get('Source')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('Thumbnail') is not None:
            self.thumbnail = m.get('Thumbnail')
        if m.get('UploadStatus') is not None:
            self.upload_status = m.get('UploadStatus')
        if m.get('Uploader') is not None:
            self.uploader = m.get('Uploader')
        if m.get('Url') is not None:
            self.url = m.get('Url')
        return self


class MaterialFindAllResponseBodyPageableSort(TeaModel):
    def __init__(
        self,
        empty: bool = None,
        sorted: bool = None,
        unsorted: bool = None,
    ):
        self.empty = empty
        self.sorted = sorted
        self.unsorted = unsorted

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.empty is not None:
            result['Empty'] = self.empty
        if self.sorted is not None:
            result['Sorted'] = self.sorted
        if self.unsorted is not None:
            result['Unsorted'] = self.unsorted
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Empty') is not None:
            self.empty = m.get('Empty')
        if m.get('Sorted') is not None:
            self.sorted = m.get('Sorted')
        if m.get('Unsorted') is not None:
            self.unsorted = m.get('Unsorted')
        return self


class MaterialFindAllResponseBodyPageable(TeaModel):
    def __init__(
        self,
        offset: int = None,
        page_number: int = None,
        page_size: int = None,
        paged: bool = None,
        sort: MaterialFindAllResponseBodyPageableSort = None,
        unpaged: bool = None,
    ):
        self.offset = offset
        self.page_number = page_number
        self.page_size = page_size
        self.paged = paged
        self.sort = sort
        self.unpaged = unpaged

    def validate(self):
        if self.sort:
            self.sort.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.offset is not None:
            result['Offset'] = self.offset
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.paged is not None:
            result['Paged'] = self.paged
        if self.sort is not None:
            result['Sort'] = self.sort.to_map()
        if self.unpaged is not None:
            result['Unpaged'] = self.unpaged
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Offset') is not None:
            self.offset = m.get('Offset')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('Paged') is not None:
            self.paged = m.get('Paged')
        if m.get('Sort') is not None:
            temp_model = MaterialFindAllResponseBodyPageableSort()
            self.sort = temp_model.from_map(m['Sort'])
        if m.get('Unpaged') is not None:
            self.unpaged = m.get('Unpaged')
        return self


class MaterialFindAllResponseBodySort(TeaModel):
    def __init__(
        self,
        empty: bool = None,
        sorted: bool = None,
        unsorted: bool = None,
    ):
        self.empty = empty
        self.sorted = sorted
        self.unsorted = unsorted

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.empty is not None:
            result['Empty'] = self.empty
        if self.sorted is not None:
            result['Sorted'] = self.sorted
        if self.unsorted is not None:
            result['Unsorted'] = self.unsorted
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Empty') is not None:
            self.empty = m.get('Empty')
        if m.get('Sorted') is not None:
            self.sorted = m.get('Sorted')
        if m.get('Unsorted') is not None:
            self.unsorted = m.get('Unsorted')
        return self


class MaterialFindAllResponseBody(TeaModel):
    def __init__(
        self,
        content: List[MaterialFindAllResponseBodyContent] = None,
        empty: bool = None,
        first: bool = None,
        last: bool = None,
        number: int = None,
        number_of_elements: int = None,
        pageable: MaterialFindAllResponseBodyPageable = None,
        request_id: str = None,
        size: int = None,
        sort: MaterialFindAllResponseBodySort = None,
        total_elements: int = None,
        total_pages: int = None,
    ):
        self.content = content
        self.empty = empty
        self.first = first
        self.last = last
        self.number = number
        self.number_of_elements = number_of_elements
        self.pageable = pageable
        # Id of the request
        self.request_id = request_id
        self.size = size
        self.sort = sort
        self.total_elements = total_elements
        self.total_pages = total_pages

    def validate(self):
        if self.content:
            for k in self.content:
                if k:
                    k.validate()
        if self.pageable:
            self.pageable.validate()
        if self.sort:
            self.sort.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Content'] = []
        if self.content is not None:
            for k in self.content:
                result['Content'].append(k.to_map() if k else None)
        if self.empty is not None:
            result['Empty'] = self.empty
        if self.first is not None:
            result['First'] = self.first
        if self.last is not None:
            result['Last'] = self.last
        if self.number is not None:
            result['Number'] = self.number
        if self.number_of_elements is not None:
            result['NumberOfElements'] = self.number_of_elements
        if self.pageable is not None:
            result['Pageable'] = self.pageable.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.size is not None:
            result['Size'] = self.size
        if self.sort is not None:
            result['Sort'] = self.sort.to_map()
        if self.total_elements is not None:
            result['TotalElements'] = self.total_elements
        if self.total_pages is not None:
            result['TotalPages'] = self.total_pages
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.content = []
        if m.get('Content') is not None:
            for k in m.get('Content'):
                temp_model = MaterialFindAllResponseBodyContent()
                self.content.append(temp_model.from_map(k))
        if m.get('Empty') is not None:
            self.empty = m.get('Empty')
        if m.get('First') is not None:
            self.first = m.get('First')
        if m.get('Last') is not None:
            self.last = m.get('Last')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('NumberOfElements') is not None:
            self.number_of_elements = m.get('NumberOfElements')
        if m.get('Pageable') is not None:
            temp_model = MaterialFindAllResponseBodyPageable()
            self.pageable = temp_model.from_map(m['Pageable'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Size') is not None:
            self.size = m.get('Size')
        if m.get('Sort') is not None:
            temp_model = MaterialFindAllResponseBodySort()
            self.sort = temp_model.from_map(m['Sort'])
        if m.get('TotalElements') is not None:
            self.total_elements = m.get('TotalElements')
        if m.get('TotalPages') is not None:
            self.total_pages = m.get('TotalPages')
        return self


class MaterialFindAllResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: MaterialFindAllResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = MaterialFindAllResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class MaterialFindAllPictureRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        params: str = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.params = params

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.params is not None:
            result['Params'] = self.params
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('Params') is not None:
            self.params = m.get('Params')
        return self


class MaterialFindAllPictureResponseBodyContent(TeaModel):
    def __init__(
        self,
        audit_status: str = None,
        end_time: int = None,
        file_name: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        id: int = None,
        oss_key: str = None,
        real_file_name: str = None,
        remarks: str = None,
        source: str = None,
        start_time: int = None,
        thumbnail: str = None,
        upload_status: str = None,
        uploader: str = None,
        url: str = None,
    ):
        self.audit_status = audit_status
        self.end_time = end_time
        self.file_name = file_name
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.id = id
        self.oss_key = oss_key
        self.real_file_name = real_file_name
        self.remarks = remarks
        self.source = source
        self.start_time = start_time
        self.thumbnail = thumbnail
        self.upload_status = upload_status
        self.uploader = uploader
        self.url = url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.audit_status is not None:
            result['AuditStatus'] = self.audit_status
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        if self.oss_key is not None:
            result['OssKey'] = self.oss_key
        if self.real_file_name is not None:
            result['RealFileName'] = self.real_file_name
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.source is not None:
            result['Source'] = self.source
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.thumbnail is not None:
            result['Thumbnail'] = self.thumbnail
        if self.upload_status is not None:
            result['UploadStatus'] = self.upload_status
        if self.uploader is not None:
            result['Uploader'] = self.uploader
        if self.url is not None:
            result['Url'] = self.url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AuditStatus') is not None:
            self.audit_status = m.get('AuditStatus')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('OssKey') is not None:
            self.oss_key = m.get('OssKey')
        if m.get('RealFileName') is not None:
            self.real_file_name = m.get('RealFileName')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('Source') is not None:
            self.source = m.get('Source')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('Thumbnail') is not None:
            self.thumbnail = m.get('Thumbnail')
        if m.get('UploadStatus') is not None:
            self.upload_status = m.get('UploadStatus')
        if m.get('Uploader') is not None:
            self.uploader = m.get('Uploader')
        if m.get('Url') is not None:
            self.url = m.get('Url')
        return self


class MaterialFindAllPictureResponseBodyPageableSort(TeaModel):
    def __init__(
        self,
        empty: bool = None,
        sorted: bool = None,
        unsorted: bool = None,
    ):
        self.empty = empty
        self.sorted = sorted
        self.unsorted = unsorted

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.empty is not None:
            result['Empty'] = self.empty
        if self.sorted is not None:
            result['Sorted'] = self.sorted
        if self.unsorted is not None:
            result['Unsorted'] = self.unsorted
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Empty') is not None:
            self.empty = m.get('Empty')
        if m.get('Sorted') is not None:
            self.sorted = m.get('Sorted')
        if m.get('Unsorted') is not None:
            self.unsorted = m.get('Unsorted')
        return self


class MaterialFindAllPictureResponseBodyPageable(TeaModel):
    def __init__(
        self,
        offset: int = None,
        page_number: int = None,
        page_size: int = None,
        paged: bool = None,
        sort: MaterialFindAllPictureResponseBodyPageableSort = None,
        unpaged: bool = None,
    ):
        self.offset = offset
        self.page_number = page_number
        self.page_size = page_size
        self.paged = paged
        self.sort = sort
        self.unpaged = unpaged

    def validate(self):
        if self.sort:
            self.sort.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.offset is not None:
            result['Offset'] = self.offset
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.paged is not None:
            result['Paged'] = self.paged
        if self.sort is not None:
            result['Sort'] = self.sort.to_map()
        if self.unpaged is not None:
            result['Unpaged'] = self.unpaged
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Offset') is not None:
            self.offset = m.get('Offset')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('Paged') is not None:
            self.paged = m.get('Paged')
        if m.get('Sort') is not None:
            temp_model = MaterialFindAllPictureResponseBodyPageableSort()
            self.sort = temp_model.from_map(m['Sort'])
        if m.get('Unpaged') is not None:
            self.unpaged = m.get('Unpaged')
        return self


class MaterialFindAllPictureResponseBodySort(TeaModel):
    def __init__(
        self,
        empty: bool = None,
        sorted: bool = None,
        unsorted: bool = None,
    ):
        self.empty = empty
        self.sorted = sorted
        self.unsorted = unsorted

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.empty is not None:
            result['Empty'] = self.empty
        if self.sorted is not None:
            result['Sorted'] = self.sorted
        if self.unsorted is not None:
            result['Unsorted'] = self.unsorted
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Empty') is not None:
            self.empty = m.get('Empty')
        if m.get('Sorted') is not None:
            self.sorted = m.get('Sorted')
        if m.get('Unsorted') is not None:
            self.unsorted = m.get('Unsorted')
        return self


class MaterialFindAllPictureResponseBody(TeaModel):
    def __init__(
        self,
        content: List[MaterialFindAllPictureResponseBodyContent] = None,
        empty: bool = None,
        first: bool = None,
        last: bool = None,
        number: int = None,
        number_of_elements: int = None,
        pageable: MaterialFindAllPictureResponseBodyPageable = None,
        request_id: str = None,
        size: int = None,
        sort: MaterialFindAllPictureResponseBodySort = None,
        total_elements: int = None,
        total_pages: int = None,
    ):
        self.content = content
        self.empty = empty
        self.first = first
        self.last = last
        self.number = number
        self.number_of_elements = number_of_elements
        self.pageable = pageable
        # Id of the request
        self.request_id = request_id
        self.size = size
        self.sort = sort
        self.total_elements = total_elements
        self.total_pages = total_pages

    def validate(self):
        if self.content:
            for k in self.content:
                if k:
                    k.validate()
        if self.pageable:
            self.pageable.validate()
        if self.sort:
            self.sort.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Content'] = []
        if self.content is not None:
            for k in self.content:
                result['Content'].append(k.to_map() if k else None)
        if self.empty is not None:
            result['Empty'] = self.empty
        if self.first is not None:
            result['First'] = self.first
        if self.last is not None:
            result['Last'] = self.last
        if self.number is not None:
            result['Number'] = self.number
        if self.number_of_elements is not None:
            result['NumberOfElements'] = self.number_of_elements
        if self.pageable is not None:
            result['Pageable'] = self.pageable.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.size is not None:
            result['Size'] = self.size
        if self.sort is not None:
            result['Sort'] = self.sort.to_map()
        if self.total_elements is not None:
            result['TotalElements'] = self.total_elements
        if self.total_pages is not None:
            result['TotalPages'] = self.total_pages
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.content = []
        if m.get('Content') is not None:
            for k in m.get('Content'):
                temp_model = MaterialFindAllPictureResponseBodyContent()
                self.content.append(temp_model.from_map(k))
        if m.get('Empty') is not None:
            self.empty = m.get('Empty')
        if m.get('First') is not None:
            self.first = m.get('First')
        if m.get('Last') is not None:
            self.last = m.get('Last')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('NumberOfElements') is not None:
            self.number_of_elements = m.get('NumberOfElements')
        if m.get('Pageable') is not None:
            temp_model = MaterialFindAllPictureResponseBodyPageable()
            self.pageable = temp_model.from_map(m['Pageable'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Size') is not None:
            self.size = m.get('Size')
        if m.get('Sort') is not None:
            temp_model = MaterialFindAllPictureResponseBodySort()
            self.sort = temp_model.from_map(m['Sort'])
        if m.get('TotalElements') is not None:
            self.total_elements = m.get('TotalElements')
        if m.get('TotalPages') is not None:
            self.total_pages = m.get('TotalPages')
        return self


class MaterialFindAllPictureResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: MaterialFindAllPictureResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = MaterialFindAllPictureResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class MaterialFindAllVideoRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        params: str = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.params = params

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.params is not None:
            result['Params'] = self.params
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('Params') is not None:
            self.params = m.get('Params')
        return self


class MaterialFindAllVideoResponseBodyContent(TeaModel):
    def __init__(
        self,
        audit_status: str = None,
        end_time: int = None,
        file_name: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        id: int = None,
        oss_key: str = None,
        real_file_name: str = None,
        remarks: str = None,
        source: str = None,
        start_time: int = None,
        thumbnail: str = None,
        upload_status: str = None,
        uploader: str = None,
        url: str = None,
    ):
        self.audit_status = audit_status
        self.end_time = end_time
        self.file_name = file_name
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.id = id
        self.oss_key = oss_key
        self.real_file_name = real_file_name
        self.remarks = remarks
        self.source = source
        self.start_time = start_time
        self.thumbnail = thumbnail
        self.upload_status = upload_status
        self.uploader = uploader
        self.url = url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.audit_status is not None:
            result['AuditStatus'] = self.audit_status
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        if self.oss_key is not None:
            result['OssKey'] = self.oss_key
        if self.real_file_name is not None:
            result['RealFileName'] = self.real_file_name
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.source is not None:
            result['Source'] = self.source
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.thumbnail is not None:
            result['Thumbnail'] = self.thumbnail
        if self.upload_status is not None:
            result['UploadStatus'] = self.upload_status
        if self.uploader is not None:
            result['Uploader'] = self.uploader
        if self.url is not None:
            result['Url'] = self.url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AuditStatus') is not None:
            self.audit_status = m.get('AuditStatus')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('OssKey') is not None:
            self.oss_key = m.get('OssKey')
        if m.get('RealFileName') is not None:
            self.real_file_name = m.get('RealFileName')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('Source') is not None:
            self.source = m.get('Source')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('Thumbnail') is not None:
            self.thumbnail = m.get('Thumbnail')
        if m.get('UploadStatus') is not None:
            self.upload_status = m.get('UploadStatus')
        if m.get('Uploader') is not None:
            self.uploader = m.get('Uploader')
        if m.get('Url') is not None:
            self.url = m.get('Url')
        return self


class MaterialFindAllVideoResponseBodyPageableSort(TeaModel):
    def __init__(
        self,
        empty: bool = None,
        sorted: bool = None,
        unsorted: bool = None,
    ):
        self.empty = empty
        self.sorted = sorted
        self.unsorted = unsorted

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.empty is not None:
            result['Empty'] = self.empty
        if self.sorted is not None:
            result['Sorted'] = self.sorted
        if self.unsorted is not None:
            result['Unsorted'] = self.unsorted
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Empty') is not None:
            self.empty = m.get('Empty')
        if m.get('Sorted') is not None:
            self.sorted = m.get('Sorted')
        if m.get('Unsorted') is not None:
            self.unsorted = m.get('Unsorted')
        return self


class MaterialFindAllVideoResponseBodyPageable(TeaModel):
    def __init__(
        self,
        offset: int = None,
        page_number: int = None,
        page_size: int = None,
        paged: bool = None,
        sort: MaterialFindAllVideoResponseBodyPageableSort = None,
        unpaged: bool = None,
    ):
        self.offset = offset
        self.page_number = page_number
        self.page_size = page_size
        self.paged = paged
        self.sort = sort
        self.unpaged = unpaged

    def validate(self):
        if self.sort:
            self.sort.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.offset is not None:
            result['Offset'] = self.offset
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.paged is not None:
            result['Paged'] = self.paged
        if self.sort is not None:
            result['Sort'] = self.sort.to_map()
        if self.unpaged is not None:
            result['Unpaged'] = self.unpaged
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Offset') is not None:
            self.offset = m.get('Offset')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('Paged') is not None:
            self.paged = m.get('Paged')
        if m.get('Sort') is not None:
            temp_model = MaterialFindAllVideoResponseBodyPageableSort()
            self.sort = temp_model.from_map(m['Sort'])
        if m.get('Unpaged') is not None:
            self.unpaged = m.get('Unpaged')
        return self


class MaterialFindAllVideoResponseBodySort(TeaModel):
    def __init__(
        self,
        empty: bool = None,
        sorted: bool = None,
        unsorted: bool = None,
    ):
        self.empty = empty
        self.sorted = sorted
        self.unsorted = unsorted

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.empty is not None:
            result['Empty'] = self.empty
        if self.sorted is not None:
            result['Sorted'] = self.sorted
        if self.unsorted is not None:
            result['Unsorted'] = self.unsorted
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Empty') is not None:
            self.empty = m.get('Empty')
        if m.get('Sorted') is not None:
            self.sorted = m.get('Sorted')
        if m.get('Unsorted') is not None:
            self.unsorted = m.get('Unsorted')
        return self


class MaterialFindAllVideoResponseBody(TeaModel):
    def __init__(
        self,
        content: List[MaterialFindAllVideoResponseBodyContent] = None,
        empty: bool = None,
        first: bool = None,
        last: bool = None,
        number: int = None,
        number_of_elements: int = None,
        pageable: MaterialFindAllVideoResponseBodyPageable = None,
        request_id: str = None,
        size: int = None,
        sort: MaterialFindAllVideoResponseBodySort = None,
        total_elements: int = None,
        total_pages: int = None,
    ):
        self.content = content
        self.empty = empty
        self.first = first
        self.last = last
        self.number = number
        self.number_of_elements = number_of_elements
        self.pageable = pageable
        # Id of the request
        self.request_id = request_id
        self.size = size
        self.sort = sort
        self.total_elements = total_elements
        self.total_pages = total_pages

    def validate(self):
        if self.content:
            for k in self.content:
                if k:
                    k.validate()
        if self.pageable:
            self.pageable.validate()
        if self.sort:
            self.sort.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Content'] = []
        if self.content is not None:
            for k in self.content:
                result['Content'].append(k.to_map() if k else None)
        if self.empty is not None:
            result['Empty'] = self.empty
        if self.first is not None:
            result['First'] = self.first
        if self.last is not None:
            result['Last'] = self.last
        if self.number is not None:
            result['Number'] = self.number
        if self.number_of_elements is not None:
            result['NumberOfElements'] = self.number_of_elements
        if self.pageable is not None:
            result['Pageable'] = self.pageable.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.size is not None:
            result['Size'] = self.size
        if self.sort is not None:
            result['Sort'] = self.sort.to_map()
        if self.total_elements is not None:
            result['TotalElements'] = self.total_elements
        if self.total_pages is not None:
            result['TotalPages'] = self.total_pages
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.content = []
        if m.get('Content') is not None:
            for k in m.get('Content'):
                temp_model = MaterialFindAllVideoResponseBodyContent()
                self.content.append(temp_model.from_map(k))
        if m.get('Empty') is not None:
            self.empty = m.get('Empty')
        if m.get('First') is not None:
            self.first = m.get('First')
        if m.get('Last') is not None:
            self.last = m.get('Last')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('NumberOfElements') is not None:
            self.number_of_elements = m.get('NumberOfElements')
        if m.get('Pageable') is not None:
            temp_model = MaterialFindAllVideoResponseBodyPageable()
            self.pageable = temp_model.from_map(m['Pageable'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Size') is not None:
            self.size = m.get('Size')
        if m.get('Sort') is not None:
            temp_model = MaterialFindAllVideoResponseBodySort()
            self.sort = temp_model.from_map(m['Sort'])
        if m.get('TotalElements') is not None:
            self.total_elements = m.get('TotalElements')
        if m.get('TotalPages') is not None:
            self.total_pages = m.get('TotalPages')
        return self


class MaterialFindAllVideoResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: MaterialFindAllVideoResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = MaterialFindAllVideoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class MaterialFindOneRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        material_id: int = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.material_id = material_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.material_id is not None:
            result['MaterialId'] = self.material_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('MaterialId') is not None:
            self.material_id = m.get('MaterialId')
        return self


class MaterialFindOneResponseBody(TeaModel):
    def __init__(
        self,
        audit_status: str = None,
        end_time: int = None,
        file_name: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        id: int = None,
        oss_key: str = None,
        real_file_name: str = None,
        remarks: str = None,
        request_id: str = None,
        source: str = None,
        start_time: int = None,
        thumbnail: str = None,
        upload_status: str = None,
        uploader: str = None,
        url: str = None,
    ):
        self.audit_status = audit_status
        self.end_time = end_time
        self.file_name = file_name
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.id = id
        self.oss_key = oss_key
        self.real_file_name = real_file_name
        self.remarks = remarks
        # Id of the request
        self.request_id = request_id
        self.source = source
        self.start_time = start_time
        self.thumbnail = thumbnail
        self.upload_status = upload_status
        self.uploader = uploader
        self.url = url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.audit_status is not None:
            result['AuditStatus'] = self.audit_status
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        if self.oss_key is not None:
            result['OssKey'] = self.oss_key
        if self.real_file_name is not None:
            result['RealFileName'] = self.real_file_name
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.source is not None:
            result['Source'] = self.source
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.thumbnail is not None:
            result['Thumbnail'] = self.thumbnail
        if self.upload_status is not None:
            result['UploadStatus'] = self.upload_status
        if self.uploader is not None:
            result['Uploader'] = self.uploader
        if self.url is not None:
            result['Url'] = self.url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AuditStatus') is not None:
            self.audit_status = m.get('AuditStatus')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('OssKey') is not None:
            self.oss_key = m.get('OssKey')
        if m.get('RealFileName') is not None:
            self.real_file_name = m.get('RealFileName')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Source') is not None:
            self.source = m.get('Source')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('Thumbnail') is not None:
            self.thumbnail = m.get('Thumbnail')
        if m.get('UploadStatus') is not None:
            self.upload_status = m.get('UploadStatus')
        if m.get('Uploader') is not None:
            self.uploader = m.get('Uploader')
        if m.get('Url') is not None:
            self.url = m.get('Url')
        return self


class MaterialFindOneResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: MaterialFindOneResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = MaterialFindOneResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class MaterialFlushUploadRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        material_id: int = None,
        value: int = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.material_id = material_id
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.material_id is not None:
            result['MaterialId'] = self.material_id
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('MaterialId') is not None:
            self.material_id = m.get('MaterialId')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class MaterialFlushUploadResponseBody(TeaModel):
    def __init__(
        self,
        audit_status: str = None,
        end_time: int = None,
        file_name: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        id: int = None,
        oss_key: str = None,
        remarks: str = None,
        request_id: str = None,
        source: str = None,
        start_time: int = None,
        thumbnail: str = None,
        upload_status: str = None,
        upload_value: str = None,
        uploader: str = None,
        url: str = None,
    ):
        self.audit_status = audit_status
        self.end_time = end_time
        self.file_name = file_name
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.id = id
        self.oss_key = oss_key
        self.remarks = remarks
        # Id of the request
        self.request_id = request_id
        self.source = source
        self.start_time = start_time
        self.thumbnail = thumbnail
        self.upload_status = upload_status
        self.upload_value = upload_value
        self.uploader = uploader
        self.url = url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.audit_status is not None:
            result['AuditStatus'] = self.audit_status
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        if self.oss_key is not None:
            result['OssKey'] = self.oss_key
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.source is not None:
            result['Source'] = self.source
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.thumbnail is not None:
            result['Thumbnail'] = self.thumbnail
        if self.upload_status is not None:
            result['UploadStatus'] = self.upload_status
        if self.upload_value is not None:
            result['UploadValue'] = self.upload_value
        if self.uploader is not None:
            result['Uploader'] = self.uploader
        if self.url is not None:
            result['Url'] = self.url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AuditStatus') is not None:
            self.audit_status = m.get('AuditStatus')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('OssKey') is not None:
            self.oss_key = m.get('OssKey')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Source') is not None:
            self.source = m.get('Source')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('Thumbnail') is not None:
            self.thumbnail = m.get('Thumbnail')
        if m.get('UploadStatus') is not None:
            self.upload_status = m.get('UploadStatus')
        if m.get('UploadValue') is not None:
            self.upload_value = m.get('UploadValue')
        if m.get('Uploader') is not None:
            self.uploader = m.get('Uploader')
        if m.get('Url') is not None:
            self.url = m.get('Url')
        return self


class MaterialFlushUploadResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: MaterialFlushUploadResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = MaterialFlushUploadResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class MaterialGetOssCreadentialsRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        type: str = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class MaterialGetOssCreadentialsResponseBody(TeaModel):
    def __init__(
        self,
        access_key_id: str = None,
        access_key_secret: str = None,
        endpoint: str = None,
        expiration: str = None,
        oss_path: str = None,
        request_id: str = None,
        security_token: str = None,
    ):
        self.access_key_id = access_key_id
        self.access_key_secret = access_key_secret
        self.endpoint = endpoint
        self.expiration = expiration
        self.oss_path = oss_path
        # Id of the request
        self.request_id = request_id
        self.security_token = security_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.access_key_id is not None:
            result['AccessKeyId'] = self.access_key_id
        if self.access_key_secret is not None:
            result['AccessKeySecret'] = self.access_key_secret
        if self.endpoint is not None:
            result['Endpoint'] = self.endpoint
        if self.expiration is not None:
            result['Expiration'] = self.expiration
        if self.oss_path is not None:
            result['OssPath'] = self.oss_path
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.security_token is not None:
            result['SecurityToken'] = self.security_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccessKeyId') is not None:
            self.access_key_id = m.get('AccessKeyId')
        if m.get('AccessKeySecret') is not None:
            self.access_key_secret = m.get('AccessKeySecret')
        if m.get('Endpoint') is not None:
            self.endpoint = m.get('Endpoint')
        if m.get('Expiration') is not None:
            self.expiration = m.get('Expiration')
        if m.get('OssPath') is not None:
            self.oss_path = m.get('OssPath')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('SecurityToken') is not None:
            self.security_token = m.get('SecurityToken')
        return self


class MaterialGetOssCreadentialsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: MaterialGetOssCreadentialsResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = MaterialGetOssCreadentialsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class MaterialUpdateOneRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        params: str = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.params = params

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.params is not None:
            result['Params'] = self.params
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('Params') is not None:
            self.params = m.get('Params')
        return self


class MaterialUpdateOneResponseBody(TeaModel):
    def __init__(
        self,
        audit_status: str = None,
        end_time: int = None,
        file_name: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        id: int = None,
        oss_key: str = None,
        remarks: str = None,
        request_id: str = None,
        source: str = None,
        start_time: int = None,
        thumbnail: str = None,
        upload_status: str = None,
        uploader: str = None,
    ):
        self.audit_status = audit_status
        self.end_time = end_time
        self.file_name = file_name
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.id = id
        self.oss_key = oss_key
        self.remarks = remarks
        # Id of the request
        self.request_id = request_id
        self.source = source
        self.start_time = start_time
        self.thumbnail = thumbnail
        self.upload_status = upload_status
        self.uploader = uploader

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.audit_status is not None:
            result['AuditStatus'] = self.audit_status
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        if self.oss_key is not None:
            result['OssKey'] = self.oss_key
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.source is not None:
            result['Source'] = self.source
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.thumbnail is not None:
            result['Thumbnail'] = self.thumbnail
        if self.upload_status is not None:
            result['UploadStatus'] = self.upload_status
        if self.uploader is not None:
            result['Uploader'] = self.uploader
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AuditStatus') is not None:
            self.audit_status = m.get('AuditStatus')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('OssKey') is not None:
            self.oss_key = m.get('OssKey')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Source') is not None:
            self.source = m.get('Source')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('Thumbnail') is not None:
            self.thumbnail = m.get('Thumbnail')
        if m.get('UploadStatus') is not None:
            self.upload_status = m.get('UploadStatus')
        if m.get('Uploader') is not None:
            self.uploader = m.get('Uploader')
        return self


class MaterialUpdateOneResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: MaterialUpdateOneResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = MaterialUpdateOneResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class OrderAssignedScanISVRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        params: str = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.params = params

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.params is not None:
            result['Params'] = self.params
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('Params') is not None:
            self.params = m.get('Params')
        return self


class OrderAssignedScanISVResponseBody(TeaModel):
    def __init__(
        self,
        error_code: str = None,
        error_msg: str = None,
        request_id: str = None,
        result_obj: Dict[str, Any] = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.error_msg = error_msg
        # Id of the request
        self.request_id = request_id
        self.result_obj = result_obj
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.error_msg is not None:
            result['ErrorMsg'] = self.error_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_obj is not None:
            result['ResultObj'] = self.result_obj
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('ErrorMsg') is not None:
            self.error_msg = m.get('ErrorMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultObj') is not None:
            self.result_obj = m.get('ResultObj')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class OrderAssignedScanISVResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: OrderAssignedScanISVResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = OrderAssignedScanISVResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class OrderBatchCreateRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        params: str = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.params = params

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.params is not None:
            result['Params'] = self.params
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('Params') is not None:
            self.params = m.get('Params')
        return self


class OrderBatchCreateResponseBody(TeaModel):
    def __init__(
        self,
        error_code: str = None,
        error_msg: str = None,
        request_id: str = None,
        result_obj: Dict[str, Any] = None,
        success: bool = None,
    ):
        # errorCode
        self.error_code = error_code
        # errorMsg
        self.error_msg = error_msg
        # traceId
        self.request_id = request_id
        # resultObj
        self.result_obj = result_obj
        # success
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.error_msg is not None:
            result['ErrorMsg'] = self.error_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_obj is not None:
            result['ResultObj'] = self.result_obj
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('ErrorMsg') is not None:
            self.error_msg = m.get('ErrorMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultObj') is not None:
            self.result_obj = m.get('ResultObj')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class OrderBatchCreateResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: OrderBatchCreateResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = OrderBatchCreateResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class OrderBatchDeleteRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        params: str = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.params = params

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.params is not None:
            result['Params'] = self.params
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('Params') is not None:
            self.params = m.get('Params')
        return self


class OrderBatchDeleteResponseBody(TeaModel):
    def __init__(
        self,
        error_code: str = None,
        error_msg: str = None,
        request_id: str = None,
        result_obj: Dict[str, Any] = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.error_msg = error_msg
        # Id of the request
        self.request_id = request_id
        self.result_obj = result_obj
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.error_msg is not None:
            result['ErrorMsg'] = self.error_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_obj is not None:
            result['ResultObj'] = self.result_obj
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('ErrorMsg') is not None:
            self.error_msg = m.get('ErrorMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultObj') is not None:
            self.result_obj = m.get('ResultObj')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class OrderBatchDeleteResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: OrderBatchDeleteResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = OrderBatchDeleteResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class OrderBatchUpdateOrderStateRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        params: str = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.params = params

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.params is not None:
            result['Params'] = self.params
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('Params') is not None:
            self.params = m.get('Params')
        return self


class OrderBatchUpdateOrderStateResponseBody(TeaModel):
    def __init__(
        self,
        error_code: str = None,
        error_msg: str = None,
        request_id: str = None,
        result_obj: Dict[str, Any] = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.error_msg = error_msg
        # Id of the request
        self.request_id = request_id
        self.result_obj = result_obj
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.error_msg is not None:
            result['ErrorMsg'] = self.error_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_obj is not None:
            result['ResultObj'] = self.result_obj
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('ErrorMsg') is not None:
            self.error_msg = m.get('ErrorMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultObj') is not None:
            self.result_obj = m.get('ResultObj')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class OrderBatchUpdateOrderStateResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: OrderBatchUpdateOrderStateResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = OrderBatchUpdateOrderStateResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class OrderFindAllRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        params: str = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.params = params

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.params is not None:
            result['Params'] = self.params
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('Params') is not None:
            self.params = m.get('Params')
        return self


class OrderFindAllResponseBody(TeaModel):
    def __init__(
        self,
        error_code: str = None,
        error_msg: str = None,
        request_id: str = None,
        result_obj: Dict[str, Any] = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.error_msg = error_msg
        # Id of the request
        self.request_id = request_id
        self.result_obj = result_obj
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.error_msg is not None:
            result['ErrorMsg'] = self.error_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_obj is not None:
            result['ResultObj'] = self.result_obj
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('ErrorMsg') is not None:
            self.error_msg = m.get('ErrorMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultObj') is not None:
            self.result_obj = m.get('ResultObj')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class OrderFindAllResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: OrderFindAllResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = OrderFindAllResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class OrderQueryOneRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        params: str = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.params = params

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.params is not None:
            result['Params'] = self.params
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('Params') is not None:
            self.params = m.get('Params')
        return self


class OrderQueryOneResponseBody(TeaModel):
    def __init__(
        self,
        error_code: str = None,
        error_msg: str = None,
        request_id: str = None,
        result_obj: Dict[str, Any] = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.error_msg = error_msg
        # Id of the request
        self.request_id = request_id
        self.result_obj = result_obj
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.error_msg is not None:
            result['ErrorMsg'] = self.error_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_obj is not None:
            result['ResultObj'] = self.result_obj
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('ErrorMsg') is not None:
            self.error_msg = m.get('ErrorMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultObj') is not None:
            self.result_obj = m.get('ResultObj')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class OrderQueryOneResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: OrderQueryOneResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = OrderQueryOneResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class OrderQueryOneAppRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        params: str = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.params = params

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.params is not None:
            result['Params'] = self.params
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('Params') is not None:
            self.params = m.get('Params')
        return self


class OrderQueryOneAppResponseBodyResultObjBackExtInfo(TeaModel):
    def __init__(
        self,
        back_info_map: Dict[str, Any] = None,
    ):
        self.back_info_map = back_info_map

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.back_info_map is not None:
            result['BackInfoMap'] = self.back_info_map
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BackInfoMap') is not None:
            self.back_info_map = m.get('BackInfoMap')
        return self


class OrderQueryOneAppResponseBodyResultObjCreateUser(TeaModel):
    def __init__(
        self,
        aliyun_uid: str = None,
        aliyun_uid_type: str = None,
        delete: bool = None,
        email: str = None,
        ext: str = None,
        id: int = None,
        name: str = None,
        parent_uid: str = None,
        phone: str = None,
    ):
        self.aliyun_uid = aliyun_uid
        self.aliyun_uid_type = aliyun_uid_type
        self.delete = delete
        self.email = email
        self.ext = ext
        self.id = id
        self.name = name
        self.parent_uid = parent_uid
        self.phone = phone

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_uid is not None:
            result['AliyunUid'] = self.aliyun_uid
        if self.aliyun_uid_type is not None:
            result['AliyunUidType'] = self.aliyun_uid_type
        if self.delete is not None:
            result['Delete'] = self.delete
        if self.email is not None:
            result['Email'] = self.email
        if self.ext is not None:
            result['Ext'] = self.ext
        if self.id is not None:
            result['Id'] = self.id
        if self.name is not None:
            result['Name'] = self.name
        if self.parent_uid is not None:
            result['ParentUid'] = self.parent_uid
        if self.phone is not None:
            result['Phone'] = self.phone
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunUid') is not None:
            self.aliyun_uid = m.get('AliyunUid')
        if m.get('AliyunUidType') is not None:
            self.aliyun_uid_type = m.get('AliyunUidType')
        if m.get('Delete') is not None:
            self.delete = m.get('Delete')
        if m.get('Email') is not None:
            self.email = m.get('Email')
        if m.get('Ext') is not None:
            self.ext = m.get('Ext')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('ParentUid') is not None:
            self.parent_uid = m.get('ParentUid')
        if m.get('Phone') is not None:
            self.phone = m.get('Phone')
        return self


class OrderQueryOneAppResponseBodyResultObjExtraInfo(TeaModel):
    def __init__(
        self,
        check_requirements: str = None,
        ext_info_map: Dict[str, Any] = None,
        object_description: str = None,
        photo_show_things_cnt: str = None,
        process_requirements: str = None,
        upload_requirements: str = None,
        video_number: str = None,
    ):
        self.check_requirements = check_requirements
        self.ext_info_map = ext_info_map
        self.object_description = object_description
        self.photo_show_things_cnt = photo_show_things_cnt
        self.process_requirements = process_requirements
        self.upload_requirements = upload_requirements
        self.video_number = video_number

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.check_requirements is not None:
            result['CheckRequirements'] = self.check_requirements
        if self.ext_info_map is not None:
            result['ExtInfoMap'] = self.ext_info_map
        if self.object_description is not None:
            result['ObjectDescription'] = self.object_description
        if self.photo_show_things_cnt is not None:
            result['PhotoShowThingsCnt'] = self.photo_show_things_cnt
        if self.process_requirements is not None:
            result['ProcessRequirements'] = self.process_requirements
        if self.upload_requirements is not None:
            result['UploadRequirements'] = self.upload_requirements
        if self.video_number is not None:
            result['VideoNumber'] = self.video_number
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CheckRequirements') is not None:
            self.check_requirements = m.get('CheckRequirements')
        if m.get('ExtInfoMap') is not None:
            self.ext_info_map = m.get('ExtInfoMap')
        if m.get('ObjectDescription') is not None:
            self.object_description = m.get('ObjectDescription')
        if m.get('PhotoShowThingsCnt') is not None:
            self.photo_show_things_cnt = m.get('PhotoShowThingsCnt')
        if m.get('ProcessRequirements') is not None:
            self.process_requirements = m.get('ProcessRequirements')
        if m.get('UploadRequirements') is not None:
            self.upload_requirements = m.get('UploadRequirements')
        if m.get('VideoNumber') is not None:
            self.video_number = m.get('VideoNumber')
        return self


class OrderQueryOneAppResponseBodyResultObjPhotoContact(TeaModel):
    def __init__(
        self,
        email: str = None,
        phone: str = None,
        username: str = None,
    ):
        self.email = email
        self.phone = phone
        self.username = username

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.email is not None:
            result['Email'] = self.email
        if self.phone is not None:
            result['Phone'] = self.phone
        if self.username is not None:
            result['Username'] = self.username
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Email') is not None:
            self.email = m.get('Email')
        if m.get('Phone') is not None:
            self.phone = m.get('Phone')
        if m.get('Username') is not None:
            self.username = m.get('Username')
        return self


class OrderQueryOneAppResponseBodyResultObjProject(TeaModel):
    def __init__(
        self,
        biz_type: str = None,
        build_status: str = None,
        creator_id: int = None,
        creator_name: str = None,
        ext_info: Dict[str, Any] = None,
        function_status: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        highmodel_assigned_time: str = None,
        id: int = None,
        isv_assigned_time: str = None,
        latest_pipeline_usage_instance_status: Dict[str, Any] = None,
        model_confirmed_time: str = None,
        order_id: int = None,
        project_description: str = None,
        project_name: str = None,
        project_status: str = None,
        publish_status: str = None,
        recent_build_time: str = None,
        recent_publish_time: str = None,
        upload_status: str = None,
    ):
        self.biz_type = biz_type
        self.build_status = build_status
        self.creator_id = creator_id
        self.creator_name = creator_name
        self.ext_info = ext_info
        self.function_status = function_status
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.highmodel_assigned_time = highmodel_assigned_time
        self.id = id
        self.isv_assigned_time = isv_assigned_time
        self.latest_pipeline_usage_instance_status = latest_pipeline_usage_instance_status
        self.model_confirmed_time = model_confirmed_time
        self.order_id = order_id
        self.project_description = project_description
        self.project_name = project_name
        self.project_status = project_status
        self.publish_status = publish_status
        self.recent_build_time = recent_build_time
        self.recent_publish_time = recent_publish_time
        self.upload_status = upload_status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.build_status is not None:
            result['BuildStatus'] = self.build_status
        if self.creator_id is not None:
            result['CreatorId'] = self.creator_id
        if self.creator_name is not None:
            result['CreatorName'] = self.creator_name
        if self.ext_info is not None:
            result['ExtInfo'] = self.ext_info
        if self.function_status is not None:
            result['FunctionStatus'] = self.function_status
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.highmodel_assigned_time is not None:
            result['HighmodelAssignedTime'] = self.highmodel_assigned_time
        if self.id is not None:
            result['Id'] = self.id
        if self.isv_assigned_time is not None:
            result['IsvAssignedTime'] = self.isv_assigned_time
        if self.latest_pipeline_usage_instance_status is not None:
            result['LatestPipelineUsageInstanceStatus'] = self.latest_pipeline_usage_instance_status
        if self.model_confirmed_time is not None:
            result['ModelConfirmedTime'] = self.model_confirmed_time
        if self.order_id is not None:
            result['OrderId'] = self.order_id
        if self.project_description is not None:
            result['ProjectDescription'] = self.project_description
        if self.project_name is not None:
            result['ProjectName'] = self.project_name
        if self.project_status is not None:
            result['ProjectStatus'] = self.project_status
        if self.publish_status is not None:
            result['PublishStatus'] = self.publish_status
        if self.recent_build_time is not None:
            result['RecentBuildTime'] = self.recent_build_time
        if self.recent_publish_time is not None:
            result['RecentPublishTime'] = self.recent_publish_time
        if self.upload_status is not None:
            result['UploadStatus'] = self.upload_status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('BuildStatus') is not None:
            self.build_status = m.get('BuildStatus')
        if m.get('CreatorId') is not None:
            self.creator_id = m.get('CreatorId')
        if m.get('CreatorName') is not None:
            self.creator_name = m.get('CreatorName')
        if m.get('ExtInfo') is not None:
            self.ext_info = m.get('ExtInfo')
        if m.get('FunctionStatus') is not None:
            self.function_status = m.get('FunctionStatus')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('HighmodelAssignedTime') is not None:
            self.highmodel_assigned_time = m.get('HighmodelAssignedTime')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('IsvAssignedTime') is not None:
            self.isv_assigned_time = m.get('IsvAssignedTime')
        if m.get('LatestPipelineUsageInstanceStatus') is not None:
            self.latest_pipeline_usage_instance_status = m.get('LatestPipelineUsageInstanceStatus')
        if m.get('ModelConfirmedTime') is not None:
            self.model_confirmed_time = m.get('ModelConfirmedTime')
        if m.get('OrderId') is not None:
            self.order_id = m.get('OrderId')
        if m.get('ProjectDescription') is not None:
            self.project_description = m.get('ProjectDescription')
        if m.get('ProjectName') is not None:
            self.project_name = m.get('ProjectName')
        if m.get('ProjectStatus') is not None:
            self.project_status = m.get('ProjectStatus')
        if m.get('PublishStatus') is not None:
            self.publish_status = m.get('PublishStatus')
        if m.get('RecentBuildTime') is not None:
            self.recent_build_time = m.get('RecentBuildTime')
        if m.get('RecentPublishTime') is not None:
            self.recent_publish_time = m.get('RecentPublishTime')
        if m.get('UploadStatus') is not None:
            self.upload_status = m.get('UploadStatus')
        return self


class OrderQueryOneAppResponseBodyResultObjScanUser(TeaModel):
    def __init__(
        self,
        aliyun_uid: str = None,
        aliyun_uid_type: str = None,
        delete: bool = None,
        email: str = None,
        ext: str = None,
        id: int = None,
        name: str = None,
        parent_uid: str = None,
        phone: str = None,
    ):
        self.aliyun_uid = aliyun_uid
        self.aliyun_uid_type = aliyun_uid_type
        self.delete = delete
        self.email = email
        self.ext = ext
        self.id = id
        self.name = name
        self.parent_uid = parent_uid
        self.phone = phone

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_uid is not None:
            result['AliyunUid'] = self.aliyun_uid
        if self.aliyun_uid_type is not None:
            result['AliyunUidType'] = self.aliyun_uid_type
        if self.delete is not None:
            result['Delete'] = self.delete
        if self.email is not None:
            result['Email'] = self.email
        if self.ext is not None:
            result['Ext'] = self.ext
        if self.id is not None:
            result['Id'] = self.id
        if self.name is not None:
            result['Name'] = self.name
        if self.parent_uid is not None:
            result['ParentUid'] = self.parent_uid
        if self.phone is not None:
            result['Phone'] = self.phone
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunUid') is not None:
            self.aliyun_uid = m.get('AliyunUid')
        if m.get('AliyunUidType') is not None:
            self.aliyun_uid_type = m.get('AliyunUidType')
        if m.get('Delete') is not None:
            self.delete = m.get('Delete')
        if m.get('Email') is not None:
            self.email = m.get('Email')
        if m.get('Ext') is not None:
            self.ext = m.get('Ext')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('ParentUid') is not None:
            self.parent_uid = m.get('ParentUid')
        if m.get('Phone') is not None:
            self.phone = m.get('Phone')
        return self


class OrderQueryOneAppResponseBodyResultObj(TeaModel):
    def __init__(
        self,
        back_ext_info: OrderQueryOneAppResponseBodyResultObjBackExtInfo = None,
        back_reason: str = None,
        bill_time: str = None,
        biz_type: str = None,
        cloud_tb_long_id: int = None,
        cloud_tb_phone: str = None,
        cloud_user_id: int = None,
        create_user: OrderQueryOneAppResponseBodyResultObjCreateUser = None,
        customer_name: str = None,
        demand_content: str = None,
        enabled: bool = None,
        estimated_cost: float = None,
        expected_online_time: str = None,
        extra_info: OrderQueryOneAppResponseBodyResultObjExtraInfo = None,
        fee_state: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        id: int = None,
        industry: str = None,
        isv_user_map: Dict[str, Any] = None,
        item_type: str = None,
        order_name: str = None,
        order_state: str = None,
        out_biz_no: str = None,
        panorama_size: float = None,
        photo_address: str = None,
        photo_city: str = None,
        photo_contact: List[OrderQueryOneAppResponseBodyResultObjPhotoContact] = None,
        photo_environment: str = None,
        photo_floor_num: int = None,
        photo_province: str = None,
        photo_size: float = None,
        photo_time: str = None,
        platform: str = None,
        platform_account: str = None,
        platform_account_type: str = None,
        project: OrderQueryOneAppResponseBodyResultObjProject = None,
        scan_user: OrderQueryOneAppResponseBodyResultObjScanUser = None,
        special_requirements: str = None,
        vr_link: str = None,
    ):
        self.back_ext_info = back_ext_info
        self.back_reason = back_reason
        self.bill_time = bill_time
        self.biz_type = biz_type
        self.cloud_tb_long_id = cloud_tb_long_id
        self.cloud_tb_phone = cloud_tb_phone
        self.cloud_user_id = cloud_user_id
        self.create_user = create_user
        self.customer_name = customer_name
        self.demand_content = demand_content
        self.enabled = enabled
        self.estimated_cost = estimated_cost
        self.expected_online_time = expected_online_time
        self.extra_info = extra_info
        self.fee_state = fee_state
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.id = id
        self.industry = industry
        self.isv_user_map = isv_user_map
        self.item_type = item_type
        self.order_name = order_name
        self.order_state = order_state
        self.out_biz_no = out_biz_no
        self.panorama_size = panorama_size
        self.photo_address = photo_address
        self.photo_city = photo_city
        self.photo_contact = photo_contact
        self.photo_environment = photo_environment
        self.photo_floor_num = photo_floor_num
        self.photo_province = photo_province
        self.photo_size = photo_size
        self.photo_time = photo_time
        self.platform = platform
        self.platform_account = platform_account
        self.platform_account_type = platform_account_type
        self.project = project
        self.scan_user = scan_user
        self.special_requirements = special_requirements
        self.vr_link = vr_link

    def validate(self):
        if self.back_ext_info:
            self.back_ext_info.validate()
        if self.create_user:
            self.create_user.validate()
        if self.extra_info:
            self.extra_info.validate()
        if self.photo_contact:
            for k in self.photo_contact:
                if k:
                    k.validate()
        if self.project:
            self.project.validate()
        if self.scan_user:
            self.scan_user.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.back_ext_info is not None:
            result['BackExtInfo'] = self.back_ext_info.to_map()
        if self.back_reason is not None:
            result['BackReason'] = self.back_reason
        if self.bill_time is not None:
            result['BillTime'] = self.bill_time
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.cloud_tb_long_id is not None:
            result['CloudTbLongId'] = self.cloud_tb_long_id
        if self.cloud_tb_phone is not None:
            result['CloudTbPhone'] = self.cloud_tb_phone
        if self.cloud_user_id is not None:
            result['CloudUserId'] = self.cloud_user_id
        if self.create_user is not None:
            result['CreateUser'] = self.create_user.to_map()
        if self.customer_name is not None:
            result['CustomerName'] = self.customer_name
        if self.demand_content is not None:
            result['DemandContent'] = self.demand_content
        if self.enabled is not None:
            result['Enabled'] = self.enabled
        if self.estimated_cost is not None:
            result['EstimatedCost'] = self.estimated_cost
        if self.expected_online_time is not None:
            result['ExpectedOnlineTime'] = self.expected_online_time
        if self.extra_info is not None:
            result['ExtraInfo'] = self.extra_info.to_map()
        if self.fee_state is not None:
            result['FeeState'] = self.fee_state
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        if self.industry is not None:
            result['Industry'] = self.industry
        if self.isv_user_map is not None:
            result['IsvUserMap'] = self.isv_user_map
        if self.item_type is not None:
            result['ItemType'] = self.item_type
        if self.order_name is not None:
            result['OrderName'] = self.order_name
        if self.order_state is not None:
            result['OrderState'] = self.order_state
        if self.out_biz_no is not None:
            result['OutBizNo'] = self.out_biz_no
        if self.panorama_size is not None:
            result['PanoramaSize'] = self.panorama_size
        if self.photo_address is not None:
            result['PhotoAddress'] = self.photo_address
        if self.photo_city is not None:
            result['PhotoCity'] = self.photo_city
        result['PhotoContact'] = []
        if self.photo_contact is not None:
            for k in self.photo_contact:
                result['PhotoContact'].append(k.to_map() if k else None)
        if self.photo_environment is not None:
            result['PhotoEnvironment'] = self.photo_environment
        if self.photo_floor_num is not None:
            result['PhotoFloorNum'] = self.photo_floor_num
        if self.photo_province is not None:
            result['PhotoProvince'] = self.photo_province
        if self.photo_size is not None:
            result['PhotoSize'] = self.photo_size
        if self.photo_time is not None:
            result['PhotoTime'] = self.photo_time
        if self.platform is not None:
            result['Platform'] = self.platform
        if self.platform_account is not None:
            result['PlatformAccount'] = self.platform_account
        if self.platform_account_type is not None:
            result['PlatformAccountType'] = self.platform_account_type
        if self.project is not None:
            result['Project'] = self.project.to_map()
        if self.scan_user is not None:
            result['ScanUser'] = self.scan_user.to_map()
        if self.special_requirements is not None:
            result['SpecialRequirements'] = self.special_requirements
        if self.vr_link is not None:
            result['VrLink'] = self.vr_link
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BackExtInfo') is not None:
            temp_model = OrderQueryOneAppResponseBodyResultObjBackExtInfo()
            self.back_ext_info = temp_model.from_map(m['BackExtInfo'])
        if m.get('BackReason') is not None:
            self.back_reason = m.get('BackReason')
        if m.get('BillTime') is not None:
            self.bill_time = m.get('BillTime')
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('CloudTbLongId') is not None:
            self.cloud_tb_long_id = m.get('CloudTbLongId')
        if m.get('CloudTbPhone') is not None:
            self.cloud_tb_phone = m.get('CloudTbPhone')
        if m.get('CloudUserId') is not None:
            self.cloud_user_id = m.get('CloudUserId')
        if m.get('CreateUser') is not None:
            temp_model = OrderQueryOneAppResponseBodyResultObjCreateUser()
            self.create_user = temp_model.from_map(m['CreateUser'])
        if m.get('CustomerName') is not None:
            self.customer_name = m.get('CustomerName')
        if m.get('DemandContent') is not None:
            self.demand_content = m.get('DemandContent')
        if m.get('Enabled') is not None:
            self.enabled = m.get('Enabled')
        if m.get('EstimatedCost') is not None:
            self.estimated_cost = m.get('EstimatedCost')
        if m.get('ExpectedOnlineTime') is not None:
            self.expected_online_time = m.get('ExpectedOnlineTime')
        if m.get('ExtraInfo') is not None:
            temp_model = OrderQueryOneAppResponseBodyResultObjExtraInfo()
            self.extra_info = temp_model.from_map(m['ExtraInfo'])
        if m.get('FeeState') is not None:
            self.fee_state = m.get('FeeState')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Industry') is not None:
            self.industry = m.get('Industry')
        if m.get('IsvUserMap') is not None:
            self.isv_user_map = m.get('IsvUserMap')
        if m.get('ItemType') is not None:
            self.item_type = m.get('ItemType')
        if m.get('OrderName') is not None:
            self.order_name = m.get('OrderName')
        if m.get('OrderState') is not None:
            self.order_state = m.get('OrderState')
        if m.get('OutBizNo') is not None:
            self.out_biz_no = m.get('OutBizNo')
        if m.get('PanoramaSize') is not None:
            self.panorama_size = m.get('PanoramaSize')
        if m.get('PhotoAddress') is not None:
            self.photo_address = m.get('PhotoAddress')
        if m.get('PhotoCity') is not None:
            self.photo_city = m.get('PhotoCity')
        self.photo_contact = []
        if m.get('PhotoContact') is not None:
            for k in m.get('PhotoContact'):
                temp_model = OrderQueryOneAppResponseBodyResultObjPhotoContact()
                self.photo_contact.append(temp_model.from_map(k))
        if m.get('PhotoEnvironment') is not None:
            self.photo_environment = m.get('PhotoEnvironment')
        if m.get('PhotoFloorNum') is not None:
            self.photo_floor_num = m.get('PhotoFloorNum')
        if m.get('PhotoProvince') is not None:
            self.photo_province = m.get('PhotoProvince')
        if m.get('PhotoSize') is not None:
            self.photo_size = m.get('PhotoSize')
        if m.get('PhotoTime') is not None:
            self.photo_time = m.get('PhotoTime')
        if m.get('Platform') is not None:
            self.platform = m.get('Platform')
        if m.get('PlatformAccount') is not None:
            self.platform_account = m.get('PlatformAccount')
        if m.get('PlatformAccountType') is not None:
            self.platform_account_type = m.get('PlatformAccountType')
        if m.get('Project') is not None:
            temp_model = OrderQueryOneAppResponseBodyResultObjProject()
            self.project = temp_model.from_map(m['Project'])
        if m.get('ScanUser') is not None:
            temp_model = OrderQueryOneAppResponseBodyResultObjScanUser()
            self.scan_user = temp_model.from_map(m['ScanUser'])
        if m.get('SpecialRequirements') is not None:
            self.special_requirements = m.get('SpecialRequirements')
        if m.get('VrLink') is not None:
            self.vr_link = m.get('VrLink')
        return self


class OrderQueryOneAppResponseBody(TeaModel):
    def __init__(
        self,
        async_: bool = None,
        async_token: str = None,
        error_code: str = None,
        error_msg: str = None,
        request_id: str = None,
        result_obj: OrderQueryOneAppResponseBodyResultObj = None,
        retry: bool = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.async_ = async_
        self.async_token = async_token
        self.error_code = error_code
        self.error_msg = error_msg
        self.request_id = request_id
        self.result_obj = result_obj
        self.retry = retry
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.result_obj:
            self.result_obj.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.async_ is not None:
            result['Async'] = self.async_
        if self.async_token is not None:
            result['AsyncToken'] = self.async_token
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.error_msg is not None:
            result['ErrorMsg'] = self.error_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_obj is not None:
            result['ResultObj'] = self.result_obj.to_map()
        if self.retry is not None:
            result['Retry'] = self.retry
        if self.success is not None:
            result['Success'] = self.success
        if self.trace_id is not None:
            result['TraceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Async') is not None:
            self.async_ = m.get('Async')
        if m.get('AsyncToken') is not None:
            self.async_token = m.get('AsyncToken')
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('ErrorMsg') is not None:
            self.error_msg = m.get('ErrorMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultObj') is not None:
            temp_model = OrderQueryOneAppResponseBodyResultObj()
            self.result_obj = temp_model.from_map(m['ResultObj'])
        if m.get('Retry') is not None:
            self.retry = m.get('Retry')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TraceId') is not None:
            self.trace_id = m.get('TraceId')
        return self


class OrderQueryOneAppResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: OrderQueryOneAppResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = OrderQueryOneAppResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class OrderUpdateOneRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        params: str = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.params = params

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.params is not None:
            result['Params'] = self.params
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('Params') is not None:
            self.params = m.get('Params')
        return self


class OrderUpdateOneResponseBody(TeaModel):
    def __init__(
        self,
        error_code: str = None,
        error_msg: str = None,
        request_id: str = None,
        result_obj: Dict[str, Any] = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.error_msg = error_msg
        # Id of the request
        self.request_id = request_id
        self.result_obj = result_obj
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.error_msg is not None:
            result['ErrorMsg'] = self.error_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_obj is not None:
            result['ResultObj'] = self.result_obj
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('ErrorMsg') is not None:
            self.error_msg = m.get('ErrorMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultObj') is not None:
            self.result_obj = m.get('ResultObj')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class OrderUpdateOneResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: OrderUpdateOneResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = OrderUpdateOneResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class PCDatasetCreateOneRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        body: str = None,
        project_id: int = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.body = body
        self.project_id = project_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.body is not None:
            result['Body'] = self.body
        if self.project_id is not None:
            result['ProjectId'] = self.project_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('Body') is not None:
            self.body = m.get('Body')
        if m.get('ProjectId') is not None:
            self.project_id = m.get('ProjectId')
        return self


class PCDatasetCreateOneResponseBodyNote(TeaModel):
    def __init__(
        self,
        description: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        id: int = None,
        name: str = None,
    ):
        self.description = description
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.id = id
        self.name = name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        if self.name is not None:
            result['Name'] = self.name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        return self


class PCDatasetCreateOneResponseBody(TeaModel):
    def __init__(
        self,
        biz_type: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        gmt_published: str = None,
        id: int = None,
        note: PCDatasetCreateOneResponseBodyNote = None,
        oss_key: str = None,
        publish_status: str = None,
        request_id: str = None,
        status: str = None,
        type_id: int = None,
    ):
        self.biz_type = biz_type
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.gmt_published = gmt_published
        self.id = id
        self.note = note
        self.oss_key = oss_key
        self.publish_status = publish_status
        # Id of the request
        self.request_id = request_id
        self.status = status
        self.type_id = type_id

    def validate(self):
        if self.note:
            self.note.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.gmt_published is not None:
            result['GmtPublished'] = self.gmt_published
        if self.id is not None:
            result['Id'] = self.id
        if self.note is not None:
            result['Note'] = self.note.to_map()
        if self.oss_key is not None:
            result['OssKey'] = self.oss_key
        if self.publish_status is not None:
            result['PublishStatus'] = self.publish_status
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        if self.type_id is not None:
            result['TypeId'] = self.type_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('GmtPublished') is not None:
            self.gmt_published = m.get('GmtPublished')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Note') is not None:
            temp_model = PCDatasetCreateOneResponseBodyNote()
            self.note = temp_model.from_map(m['Note'])
        if m.get('OssKey') is not None:
            self.oss_key = m.get('OssKey')
        if m.get('PublishStatus') is not None:
            self.publish_status = m.get('PublishStatus')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TypeId') is not None:
            self.type_id = m.get('TypeId')
        return self


class PCDatasetCreateOneResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: PCDatasetCreateOneResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = PCDatasetCreateOneResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class PCUploadBuildRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        params: str = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.params = params

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.params is not None:
            result['Params'] = self.params
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('Params') is not None:
            self.params = m.get('Params')
        return self


class PCUploadBuildResponseBody(TeaModel):
    def __init__(
        self,
        error_code: str = None,
        error_msg: str = None,
        request_id: str = None,
        result_obj: Dict[str, Any] = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.error_msg = error_msg
        # Id of the request
        self.request_id = request_id
        self.result_obj = result_obj
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.error_msg is not None:
            result['ErrorMsg'] = self.error_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_obj is not None:
            result['ResultObj'] = self.result_obj
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('ErrorMsg') is not None:
            self.error_msg = m.get('ErrorMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultObj') is not None:
            self.result_obj = m.get('ResultObj')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class PCUploadBuildResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: PCUploadBuildResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = PCUploadBuildResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class PCUploadPublishRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        dataset_id: int = None,
        project_id: int = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.dataset_id = dataset_id
        self.project_id = project_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.dataset_id is not None:
            result['DatasetId'] = self.dataset_id
        if self.project_id is not None:
            result['ProjectId'] = self.project_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('DatasetId') is not None:
            self.dataset_id = m.get('DatasetId')
        if m.get('ProjectId') is not None:
            self.project_id = m.get('ProjectId')
        return self


class PCUploadPublishResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        submit: str = None,
    ):
        # Id of the request
        self.request_id = request_id
        self.submit = submit

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.submit is not None:
            result['Submit'] = self.submit
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Submit') is not None:
            self.submit = m.get('Submit')
        return self


class PCUploadPublishResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: PCUploadPublishResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = PCUploadPublishResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class PipelineFindAllRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        code: str = None,
        enabled: bool = None,
        exposed: bool = None,
        is_root: bool = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.code = code
        self.enabled = enabled
        self.exposed = exposed
        self.is_root = is_root

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.code is not None:
            result['Code'] = self.code
        if self.enabled is not None:
            result['Enabled'] = self.enabled
        if self.exposed is not None:
            result['Exposed'] = self.exposed
        if self.is_root is not None:
            result['IsRoot'] = self.is_root
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Enabled') is not None:
            self.enabled = m.get('Enabled')
        if m.get('Exposed') is not None:
            self.exposed = m.get('Exposed')
        if m.get('IsRoot') is not None:
            self.is_root = m.get('IsRoot')
        return self


class PipelineFindAllResponseBodyPageableSort(TeaModel):
    def __init__(
        self,
        empty: bool = None,
        sorted: bool = None,
        unsorted: bool = None,
    ):
        self.empty = empty
        self.sorted = sorted
        self.unsorted = unsorted

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.empty is not None:
            result['Empty'] = self.empty
        if self.sorted is not None:
            result['Sorted'] = self.sorted
        if self.unsorted is not None:
            result['Unsorted'] = self.unsorted
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Empty') is not None:
            self.empty = m.get('Empty')
        if m.get('Sorted') is not None:
            self.sorted = m.get('Sorted')
        if m.get('Unsorted') is not None:
            self.unsorted = m.get('Unsorted')
        return self


class PipelineFindAllResponseBodyPageable(TeaModel):
    def __init__(
        self,
        offset: int = None,
        page_number: int = None,
        page_size: int = None,
        paged: bool = None,
        sort: PipelineFindAllResponseBodyPageableSort = None,
        unpaged: bool = None,
    ):
        self.offset = offset
        self.page_number = page_number
        self.page_size = page_size
        self.paged = paged
        self.sort = sort
        self.unpaged = unpaged

    def validate(self):
        if self.sort:
            self.sort.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.offset is not None:
            result['Offset'] = self.offset
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.paged is not None:
            result['Paged'] = self.paged
        if self.sort is not None:
            result['Sort'] = self.sort.to_map()
        if self.unpaged is not None:
            result['Unpaged'] = self.unpaged
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Offset') is not None:
            self.offset = m.get('Offset')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('Paged') is not None:
            self.paged = m.get('Paged')
        if m.get('Sort') is not None:
            temp_model = PipelineFindAllResponseBodyPageableSort()
            self.sort = temp_model.from_map(m['Sort'])
        if m.get('Unpaged') is not None:
            self.unpaged = m.get('Unpaged')
        return self


class PipelineFindAllResponseBodySort(TeaModel):
    def __init__(
        self,
        empty: bool = None,
        sorted: bool = None,
        unsorted: bool = None,
    ):
        self.empty = empty
        self.sorted = sorted
        self.unsorted = unsorted

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.empty is not None:
            result['Empty'] = self.empty
        if self.sorted is not None:
            result['Sorted'] = self.sorted
        if self.unsorted is not None:
            result['Unsorted'] = self.unsorted
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Empty') is not None:
            self.empty = m.get('Empty')
        if m.get('Sorted') is not None:
            self.sorted = m.get('Sorted')
        if m.get('Unsorted') is not None:
            self.unsorted = m.get('Unsorted')
        return self


class PipelineFindAllResponseBody(TeaModel):
    def __init__(
        self,
        content: str = None,
        empty: bool = None,
        first: bool = None,
        last: str = None,
        number: int = None,
        number_of_elements: int = None,
        pageable: PipelineFindAllResponseBodyPageable = None,
        request_id: str = None,
        size: int = None,
        sort: PipelineFindAllResponseBodySort = None,
        total_elements: int = None,
        total_pages: int = None,
    ):
        self.content = content
        self.empty = empty
        self.first = first
        self.last = last
        self.number = number
        self.number_of_elements = number_of_elements
        self.pageable = pageable
        # Id of the request
        self.request_id = request_id
        self.size = size
        self.sort = sort
        self.total_elements = total_elements
        self.total_pages = total_pages

    def validate(self):
        if self.pageable:
            self.pageable.validate()
        if self.sort:
            self.sort.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['Content'] = self.content
        if self.empty is not None:
            result['Empty'] = self.empty
        if self.first is not None:
            result['First'] = self.first
        if self.last is not None:
            result['Last'] = self.last
        if self.number is not None:
            result['Number'] = self.number
        if self.number_of_elements is not None:
            result['NumberOfElements'] = self.number_of_elements
        if self.pageable is not None:
            result['Pageable'] = self.pageable.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.size is not None:
            result['Size'] = self.size
        if self.sort is not None:
            result['Sort'] = self.sort.to_map()
        if self.total_elements is not None:
            result['TotalElements'] = self.total_elements
        if self.total_pages is not None:
            result['TotalPages'] = self.total_pages
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('Empty') is not None:
            self.empty = m.get('Empty')
        if m.get('First') is not None:
            self.first = m.get('First')
        if m.get('Last') is not None:
            self.last = m.get('Last')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('NumberOfElements') is not None:
            self.number_of_elements = m.get('NumberOfElements')
        if m.get('Pageable') is not None:
            temp_model = PipelineFindAllResponseBodyPageable()
            self.pageable = temp_model.from_map(m['Pageable'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Size') is not None:
            self.size = m.get('Size')
        if m.get('Sort') is not None:
            temp_model = PipelineFindAllResponseBodySort()
            self.sort = temp_model.from_map(m['Sort'])
        if m.get('TotalElements') is not None:
            self.total_elements = m.get('TotalElements')
        if m.get('TotalPages') is not None:
            self.total_pages = m.get('TotalPages')
        return self


class PipelineFindAllResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: PipelineFindAllResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = PipelineFindAllResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ProduceExpoNoticeRequest(TeaModel):
    def __init__(
        self,
        biz_type: str = None,
        ext_info: str = None,
        operation_type: str = None,
        user_id: int = None,
    ):
        # A short description of struct
        self.biz_type = biz_type
        self.ext_info = ext_info
        self.operation_type = operation_type
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.ext_info is not None:
            result['ExtInfo'] = self.ext_info
        if self.operation_type is not None:
            result['OperationType'] = self.operation_type
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('ExtInfo') is not None:
            self.ext_info = m.get('ExtInfo')
        if m.get('OperationType') is not None:
            self.operation_type = m.get('OperationType')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class ProduceExpoNoticeResponseBody(TeaModel):
    def __init__(
        self,
        data: Dict[str, Any] = None,
        error: str = None,
        msg_code: str = None,
        msg_info: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.data = data
        self.error = error
        self.msg_code = msg_code
        self.msg_info = msg_info
        # Id of the request
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data
        if self.error is not None:
            result['Error'] = self.error
        if self.msg_code is not None:
            result['MsgCode'] = self.msg_code
        if self.msg_info is not None:
            result['MsgInfo'] = self.msg_info
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Error') is not None:
            self.error = m.get('Error')
        if m.get('MsgCode') is not None:
            self.msg_code = m.get('MsgCode')
        if m.get('MsgInfo') is not None:
            self.msg_info = m.get('MsgInfo')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ProduceExpoNoticeResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ProduceExpoNoticeResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ProduceExpoNoticeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ProduceNoticeRequest(TeaModel):
    def __init__(
        self,
        biz_id: str = None,
        biz_type: str = None,
        ext_info: str = None,
        operation_type: str = None,
        user_id: int = None,
    ):
        self.biz_id = biz_id
        self.biz_type = biz_type
        self.ext_info = ext_info
        self.operation_type = operation_type
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_id is not None:
            result['BizId'] = self.biz_id
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.ext_info is not None:
            result['ExtInfo'] = self.ext_info
        if self.operation_type is not None:
            result['OperationType'] = self.operation_type
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizId') is not None:
            self.biz_id = m.get('BizId')
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('ExtInfo') is not None:
            self.ext_info = m.get('ExtInfo')
        if m.get('OperationType') is not None:
            self.operation_type = m.get('OperationType')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class ProduceNoticeResponseBody(TeaModel):
    def __init__(
        self,
        data: Dict[str, Any] = None,
        error: str = None,
        msg_code: str = None,
        msg_info: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.data = data
        self.error = error
        self.msg_code = msg_code
        self.msg_info = msg_info
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data
        if self.error is not None:
            result['Error'] = self.error
        if self.msg_code is not None:
            result['MsgCode'] = self.msg_code
        if self.msg_info is not None:
            result['MsgInfo'] = self.msg_info
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Error') is not None:
            self.error = m.get('Error')
        if m.get('MsgCode') is not None:
            self.msg_code = m.get('MsgCode')
        if m.get('MsgInfo') is not None:
            self.msg_info = m.get('MsgInfo')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ProduceNoticeResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ProduceNoticeResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ProduceNoticeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ProjectCreateOneAPPRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        params: str = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.params = params

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.params is not None:
            result['Params'] = self.params
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('Params') is not None:
            self.params = m.get('Params')
        return self


class ProjectCreateOneAPPResponseBodyBuildStatusInfo(TeaModel):
    def __init__(
        self,
        end_time: str = None,
        progress: int = None,
        start_time: str = None,
        status: str = None,
        tips: str = None,
    ):
        self.end_time = end_time
        self.progress = progress
        self.start_time = start_time
        self.status = status
        self.tips = tips

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.status is not None:
            result['Status'] = self.status
        if self.tips is not None:
            result['Tips'] = self.tips
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Tips') is not None:
            self.tips = m.get('Tips')
        return self


class ProjectCreateOneAPPResponseBodyFunctionStatusInfo(TeaModel):
    def __init__(
        self,
        end_time: str = None,
        progress: int = None,
        start_time: str = None,
        status: str = None,
        tips: str = None,
    ):
        self.end_time = end_time
        self.progress = progress
        self.start_time = start_time
        self.status = status
        self.tips = tips

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.status is not None:
            result['Status'] = self.status
        if self.tips is not None:
            result['Tips'] = self.tips
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Tips') is not None:
            self.tips = m.get('Tips')
        return self


class ProjectCreateOneAPPResponseBodyLatestPipelineUsageInstance(TeaModel):
    def __init__(
        self,
        appendpublish: str = None,
        highmodelbuild: str = None,
        mirrorannotation: str = None,
        modelrebuildpub: str = None,
        modelreplace: str = None,
        modelreplacenodataset: str = None,
        osscover: str = None,
        ptzmodelrebuildpub: str = None,
        publish: str = None,
        rebuid: str = None,
    ):
        self.appendpublish = appendpublish
        self.highmodelbuild = highmodelbuild
        self.mirrorannotation = mirrorannotation
        self.modelrebuildpub = modelrebuildpub
        self.modelreplace = modelreplace
        self.modelreplacenodataset = modelreplacenodataset
        self.osscover = osscover
        self.ptzmodelrebuildpub = ptzmodelrebuildpub
        self.publish = publish
        self.rebuid = rebuid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.appendpublish is not None:
            result['APPENDPUBLISH'] = self.appendpublish
        if self.highmodelbuild is not None:
            result['HIGHMODELBUILD'] = self.highmodelbuild
        if self.mirrorannotation is not None:
            result['MIRRORANNOTATION'] = self.mirrorannotation
        if self.modelrebuildpub is not None:
            result['MODELREBUILDPUB'] = self.modelrebuildpub
        if self.modelreplace is not None:
            result['MODELREPLACE'] = self.modelreplace
        if self.modelreplacenodataset is not None:
            result['MODELREPLACENODATASET'] = self.modelreplacenodataset
        if self.osscover is not None:
            result['OSSCOVER'] = self.osscover
        if self.ptzmodelrebuildpub is not None:
            result['PTZMODELREBUILDPUB'] = self.ptzmodelrebuildpub
        if self.publish is not None:
            result['PUBLISH'] = self.publish
        if self.rebuid is not None:
            result['REBUID'] = self.rebuid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('APPENDPUBLISH') is not None:
            self.appendpublish = m.get('APPENDPUBLISH')
        if m.get('HIGHMODELBUILD') is not None:
            self.highmodelbuild = m.get('HIGHMODELBUILD')
        if m.get('MIRRORANNOTATION') is not None:
            self.mirrorannotation = m.get('MIRRORANNOTATION')
        if m.get('MODELREBUILDPUB') is not None:
            self.modelrebuildpub = m.get('MODELREBUILDPUB')
        if m.get('MODELREPLACE') is not None:
            self.modelreplace = m.get('MODELREPLACE')
        if m.get('MODELREPLACENODATASET') is not None:
            self.modelreplacenodataset = m.get('MODELREPLACENODATASET')
        if m.get('OSSCOVER') is not None:
            self.osscover = m.get('OSSCOVER')
        if m.get('PTZMODELREBUILDPUB') is not None:
            self.ptzmodelrebuildpub = m.get('PTZMODELREBUILDPUB')
        if m.get('PUBLISH') is not None:
            self.publish = m.get('PUBLISH')
        if m.get('REBUID') is not None:
            self.rebuid = m.get('REBUID')
        return self


class ProjectCreateOneAPPResponseBodyNote(TeaModel):
    def __init__(
        self,
        description: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        id: int = None,
        name: str = None,
    ):
        self.description = description
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.id = id
        self.name = name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        if self.name is not None:
            result['Name'] = self.name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        return self


class ProjectCreateOneAPPResponseBodyPublishStatusInfo(TeaModel):
    def __init__(
        self,
        end_time: str = None,
        progress: int = None,
        start_time: str = None,
        status: str = None,
        tips: str = None,
    ):
        self.end_time = end_time
        self.progress = progress
        self.start_time = start_time
        self.status = status
        self.tips = tips

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.status is not None:
            result['Status'] = self.status
        if self.tips is not None:
            result['Tips'] = self.tips
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Tips') is not None:
            self.tips = m.get('Tips')
        return self


class ProjectCreateOneAPPResponseBodyUploadStatusInfo(TeaModel):
    def __init__(
        self,
        end_time: str = None,
        progress: int = None,
        start_time: str = None,
        status: str = None,
        tips: str = None,
    ):
        self.end_time = end_time
        self.progress = progress
        self.start_time = start_time
        self.status = status
        self.tips = tips

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.status is not None:
            result['Status'] = self.status
        if self.tips is not None:
            result['Tips'] = self.tips
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Tips') is not None:
            self.tips = m.get('Tips')
        return self


class ProjectCreateOneAPPResponseBody(TeaModel):
    def __init__(
        self,
        biz_type: str = None,
        build_status_info: ProjectCreateOneAPPResponseBodyBuildStatusInfo = None,
        display_name: str = None,
        ext_info: Dict[str, Any] = None,
        function_status_info: ProjectCreateOneAPPResponseBodyFunctionStatusInfo = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        highmodel_assigned_time: str = None,
        id: int = None,
        isv_assigned_time: str = None,
        latest_pipeline_usage_instance: ProjectCreateOneAPPResponseBodyLatestPipelineUsageInstance = None,
        model_confirmed_time: str = None,
        note: ProjectCreateOneAPPResponseBodyNote = None,
        order_id: int = None,
        project_group_id: str = None,
        project_source: str = None,
        project_status: str = None,
        publish_status_info: ProjectCreateOneAPPResponseBodyPublishStatusInfo = None,
        recent_build_time: str = None,
        request_id: str = None,
        upload_status_info: ProjectCreateOneAPPResponseBodyUploadStatusInfo = None,
    ):
        self.biz_type = biz_type
        self.build_status_info = build_status_info
        self.display_name = display_name
        self.ext_info = ext_info
        self.function_status_info = function_status_info
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.highmodel_assigned_time = highmodel_assigned_time
        self.id = id
        self.isv_assigned_time = isv_assigned_time
        self.latest_pipeline_usage_instance = latest_pipeline_usage_instance
        self.model_confirmed_time = model_confirmed_time
        self.note = note
        self.order_id = order_id
        self.project_group_id = project_group_id
        self.project_source = project_source
        self.project_status = project_status
        self.publish_status_info = publish_status_info
        self.recent_build_time = recent_build_time
        # Id of the request
        self.request_id = request_id
        self.upload_status_info = upload_status_info

    def validate(self):
        if self.build_status_info:
            self.build_status_info.validate()
        if self.function_status_info:
            self.function_status_info.validate()
        if self.latest_pipeline_usage_instance:
            self.latest_pipeline_usage_instance.validate()
        if self.note:
            self.note.validate()
        if self.publish_status_info:
            self.publish_status_info.validate()
        if self.upload_status_info:
            self.upload_status_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.build_status_info is not None:
            result['BuildStatusInfo'] = self.build_status_info.to_map()
        if self.display_name is not None:
            result['DisplayName'] = self.display_name
        if self.ext_info is not None:
            result['ExtInfo'] = self.ext_info
        if self.function_status_info is not None:
            result['FunctionStatusInfo'] = self.function_status_info.to_map()
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.highmodel_assigned_time is not None:
            result['HighmodelAssignedTime'] = self.highmodel_assigned_time
        if self.id is not None:
            result['Id'] = self.id
        if self.isv_assigned_time is not None:
            result['IsvAssignedTime'] = self.isv_assigned_time
        if self.latest_pipeline_usage_instance is not None:
            result['LatestPipelineUsageInstance'] = self.latest_pipeline_usage_instance.to_map()
        if self.model_confirmed_time is not None:
            result['ModelConfirmedTime'] = self.model_confirmed_time
        if self.note is not None:
            result['Note'] = self.note.to_map()
        if self.order_id is not None:
            result['OrderId'] = self.order_id
        if self.project_group_id is not None:
            result['ProjectGroupId'] = self.project_group_id
        if self.project_source is not None:
            result['ProjectSource'] = self.project_source
        if self.project_status is not None:
            result['ProjectStatus'] = self.project_status
        if self.publish_status_info is not None:
            result['PublishStatusInfo'] = self.publish_status_info.to_map()
        if self.recent_build_time is not None:
            result['RecentBuildTime'] = self.recent_build_time
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.upload_status_info is not None:
            result['UploadStatusInfo'] = self.upload_status_info.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('BuildStatusInfo') is not None:
            temp_model = ProjectCreateOneAPPResponseBodyBuildStatusInfo()
            self.build_status_info = temp_model.from_map(m['BuildStatusInfo'])
        if m.get('DisplayName') is not None:
            self.display_name = m.get('DisplayName')
        if m.get('ExtInfo') is not None:
            self.ext_info = m.get('ExtInfo')
        if m.get('FunctionStatusInfo') is not None:
            temp_model = ProjectCreateOneAPPResponseBodyFunctionStatusInfo()
            self.function_status_info = temp_model.from_map(m['FunctionStatusInfo'])
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('HighmodelAssignedTime') is not None:
            self.highmodel_assigned_time = m.get('HighmodelAssignedTime')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('IsvAssignedTime') is not None:
            self.isv_assigned_time = m.get('IsvAssignedTime')
        if m.get('LatestPipelineUsageInstance') is not None:
            temp_model = ProjectCreateOneAPPResponseBodyLatestPipelineUsageInstance()
            self.latest_pipeline_usage_instance = temp_model.from_map(m['LatestPipelineUsageInstance'])
        if m.get('ModelConfirmedTime') is not None:
            self.model_confirmed_time = m.get('ModelConfirmedTime')
        if m.get('Note') is not None:
            temp_model = ProjectCreateOneAPPResponseBodyNote()
            self.note = temp_model.from_map(m['Note'])
        if m.get('OrderId') is not None:
            self.order_id = m.get('OrderId')
        if m.get('ProjectGroupId') is not None:
            self.project_group_id = m.get('ProjectGroupId')
        if m.get('ProjectSource') is not None:
            self.project_source = m.get('ProjectSource')
        if m.get('ProjectStatus') is not None:
            self.project_status = m.get('ProjectStatus')
        if m.get('PublishStatusInfo') is not None:
            temp_model = ProjectCreateOneAPPResponseBodyPublishStatusInfo()
            self.publish_status_info = temp_model.from_map(m['PublishStatusInfo'])
        if m.get('RecentBuildTime') is not None:
            self.recent_build_time = m.get('RecentBuildTime')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('UploadStatusInfo') is not None:
            temp_model = ProjectCreateOneAPPResponseBodyUploadStatusInfo()
            self.upload_status_info = temp_model.from_map(m['UploadStatusInfo'])
        return self


class ProjectCreateOneAPPResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ProjectCreateOneAPPResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ProjectCreateOneAPPResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ProjectCreateOrUpdateExtInfoRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        ext_info_str: str = None,
        project_id: str = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.ext_info_str = ext_info_str
        self.project_id = project_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.ext_info_str is not None:
            result['ExtInfoStr'] = self.ext_info_str
        if self.project_id is not None:
            result['ProjectId'] = self.project_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('ExtInfoStr') is not None:
            self.ext_info_str = m.get('ExtInfoStr')
        if m.get('ProjectId') is not None:
            self.project_id = m.get('ProjectId')
        return self


class ProjectCreateOrUpdateExtInfoResponseBody(TeaModel):
    def __init__(
        self,
        error_code: str = None,
        error_msg: str = None,
        request_id: str = None,
        result_obj: Dict[str, Any] = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.error_msg = error_msg
        # Id of the request
        self.request_id = request_id
        self.result_obj = result_obj
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.error_msg is not None:
            result['ErrorMsg'] = self.error_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_obj is not None:
            result['ResultObj'] = self.result_obj
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('ErrorMsg') is not None:
            self.error_msg = m.get('ErrorMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultObj') is not None:
            self.result_obj = m.get('ResultObj')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ProjectCreateOrUpdateExtInfoResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ProjectCreateOrUpdateExtInfoResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ProjectCreateOrUpdateExtInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ProjectCreateOrUpdateExtInfoAppRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        ext_info_str: str = None,
        project_id: str = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.ext_info_str = ext_info_str
        self.project_id = project_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.ext_info_str is not None:
            result['ExtInfoStr'] = self.ext_info_str
        if self.project_id is not None:
            result['ProjectId'] = self.project_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('ExtInfoStr') is not None:
            self.ext_info_str = m.get('ExtInfoStr')
        if m.get('ProjectId') is not None:
            self.project_id = m.get('ProjectId')
        return self


class ProjectCreateOrUpdateExtInfoAppResponseBodyExtInfo(TeaModel):
    def __init__(
        self,
        floorplanarea: str = None,
        onlinedns: str = None,
        status: str = None,
    ):
        self.floorplanarea = floorplanarea
        self.onlinedns = onlinedns
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.floorplanarea is not None:
            result['FLOORPLANAREA'] = self.floorplanarea
        if self.onlinedns is not None:
            result['ONLINEDNS'] = self.onlinedns
        if self.status is not None:
            result['STATUS'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('FLOORPLANAREA') is not None:
            self.floorplanarea = m.get('FLOORPLANAREA')
        if m.get('ONLINEDNS') is not None:
            self.onlinedns = m.get('ONLINEDNS')
        if m.get('STATUS') is not None:
            self.status = m.get('STATUS')
        return self


class ProjectCreateOrUpdateExtInfoAppResponseBody(TeaModel):
    def __init__(
        self,
        ext_info: ProjectCreateOrUpdateExtInfoAppResponseBodyExtInfo = None,
        project_id: int = None,
        request_id: str = None,
    ):
        self.ext_info = ext_info
        self.project_id = project_id
        # Id of the request
        self.request_id = request_id

    def validate(self):
        if self.ext_info:
            self.ext_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ext_info is not None:
            result['ExtInfo'] = self.ext_info.to_map()
        if self.project_id is not None:
            result['ProjectId'] = self.project_id
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ExtInfo') is not None:
            temp_model = ProjectCreateOrUpdateExtInfoAppResponseBodyExtInfo()
            self.ext_info = temp_model.from_map(m['ExtInfo'])
        if m.get('ProjectId') is not None:
            self.project_id = m.get('ProjectId')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class ProjectCreateOrUpdateExtInfoAppResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ProjectCreateOrUpdateExtInfoAppResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ProjectCreateOrUpdateExtInfoAppResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ProjectFindAllRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        json_params: str = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.json_params = json_params

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.json_params is not None:
            result['JsonParams'] = self.json_params
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('JsonParams') is not None:
            self.json_params = m.get('JsonParams')
        return self


class ProjectFindAllResponseBodyContentBuildStatusInfo(TeaModel):
    def __init__(
        self,
        end_time: str = None,
        progress: int = None,
        start_time: str = None,
        status: str = None,
        tips: str = None,
    ):
        self.end_time = end_time
        self.progress = progress
        self.start_time = start_time
        self.status = status
        self.tips = tips

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.status is not None:
            result['Status'] = self.status
        if self.tips is not None:
            result['Tips'] = self.tips
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Tips') is not None:
            self.tips = m.get('Tips')
        return self


class ProjectFindAllResponseBodyContentExtInfo(TeaModel):
    def __init__(
        self,
        floorplanarea: str = None,
        onlinedns: str = None,
        status: str = None,
    ):
        self.floorplanarea = floorplanarea
        self.onlinedns = onlinedns
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.floorplanarea is not None:
            result['FLOORPLANAREA'] = self.floorplanarea
        if self.onlinedns is not None:
            result['ONLINEDNS'] = self.onlinedns
        if self.status is not None:
            result['STATUS'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('FLOORPLANAREA') is not None:
            self.floorplanarea = m.get('FLOORPLANAREA')
        if m.get('ONLINEDNS') is not None:
            self.onlinedns = m.get('ONLINEDNS')
        if m.get('STATUS') is not None:
            self.status = m.get('STATUS')
        return self


class ProjectFindAllResponseBodyContentFunctionStatusInfo(TeaModel):
    def __init__(
        self,
        end_time: str = None,
        progress: int = None,
        start_time: str = None,
        status: str = None,
        tips: str = None,
    ):
        self.end_time = end_time
        self.progress = progress
        self.start_time = start_time
        self.status = status
        self.tips = tips

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.status is not None:
            result['Status'] = self.status
        if self.tips is not None:
            result['Tips'] = self.tips
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Tips') is not None:
            self.tips = m.get('Tips')
        return self


class ProjectFindAllResponseBodyContentNote(TeaModel):
    def __init__(
        self,
        description: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        id: int = None,
        name: str = None,
    ):
        self.description = description
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.id = id
        self.name = name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        if self.name is not None:
            result['Name'] = self.name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        return self


class ProjectFindAllResponseBodyContentPhotoContact(TeaModel):
    def __init__(
        self,
        email: str = None,
        phone: str = None,
        user_name: str = None,
    ):
        self.email = email
        self.phone = phone
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.email is not None:
            result['Email'] = self.email
        if self.phone is not None:
            result['Phone'] = self.phone
        if self.user_name is not None:
            result['UserName'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Email') is not None:
            self.email = m.get('Email')
        if m.get('Phone') is not None:
            self.phone = m.get('Phone')
        if m.get('UserName') is not None:
            self.user_name = m.get('UserName')
        return self


class ProjectFindAllResponseBodyContentPublishStatusInfo(TeaModel):
    def __init__(
        self,
        end_time: str = None,
        progress: int = None,
        start_time: str = None,
        status: str = None,
        tips: str = None,
    ):
        self.end_time = end_time
        self.progress = progress
        self.start_time = start_time
        self.status = status
        self.tips = tips

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.status is not None:
            result['Status'] = self.status
        if self.tips is not None:
            result['Tips'] = self.tips
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Tips') is not None:
            self.tips = m.get('Tips')
        return self


class ProjectFindAllResponseBodyContentUploadStatusInfo(TeaModel):
    def __init__(
        self,
        end_time: str = None,
        progress: int = None,
        start_time: str = None,
        status: str = None,
        tips: str = None,
    ):
        self.end_time = end_time
        self.progress = progress
        self.start_time = start_time
        self.status = status
        self.tips = tips

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.status is not None:
            result['Status'] = self.status
        if self.tips is not None:
            result['Tips'] = self.tips
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Tips') is not None:
            self.tips = m.get('Tips')
        return self


class ProjectFindAllResponseBodyContent(TeaModel):
    def __init__(
        self,
        biz_type: str = None,
        build_status_info: ProjectFindAllResponseBodyContentBuildStatusInfo = None,
        customer_name: str = None,
        display_name: str = None,
        ext_info: ProjectFindAllResponseBodyContentExtInfo = None,
        function_status_info: ProjectFindAllResponseBodyContentFunctionStatusInfo = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        highmodel_assigned_time: str = None,
        id: int = None,
        isv_assigned_time: str = None,
        latest_pipeline_usage_instance: Dict[str, Any] = None,
        model_confirmed_time: str = None,
        note: ProjectFindAllResponseBodyContentNote = None,
        order_id: int = None,
        order_name: str = None,
        photo_address: str = None,
        photo_contact: List[ProjectFindAllResponseBodyContentPhotoContact] = None,
        project_group_id: str = None,
        project_source: str = None,
        project_status: str = None,
        publish_status_info: ProjectFindAllResponseBodyContentPublishStatusInfo = None,
        recent_build_time: str = None,
        upload_status_info: ProjectFindAllResponseBodyContentUploadStatusInfo = None,
    ):
        self.biz_type = biz_type
        self.build_status_info = build_status_info
        self.customer_name = customer_name
        self.display_name = display_name
        self.ext_info = ext_info
        self.function_status_info = function_status_info
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.highmodel_assigned_time = highmodel_assigned_time
        self.id = id
        self.isv_assigned_time = isv_assigned_time
        self.latest_pipeline_usage_instance = latest_pipeline_usage_instance
        self.model_confirmed_time = model_confirmed_time
        self.note = note
        self.order_id = order_id
        self.order_name = order_name
        self.photo_address = photo_address
        self.photo_contact = photo_contact
        self.project_group_id = project_group_id
        self.project_source = project_source
        self.project_status = project_status
        self.publish_status_info = publish_status_info
        self.recent_build_time = recent_build_time
        self.upload_status_info = upload_status_info

    def validate(self):
        if self.build_status_info:
            self.build_status_info.validate()
        if self.ext_info:
            self.ext_info.validate()
        if self.function_status_info:
            self.function_status_info.validate()
        if self.note:
            self.note.validate()
        if self.photo_contact:
            for k in self.photo_contact:
                if k:
                    k.validate()
        if self.publish_status_info:
            self.publish_status_info.validate()
        if self.upload_status_info:
            self.upload_status_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.build_status_info is not None:
            result['BuildStatusInfo'] = self.build_status_info.to_map()
        if self.customer_name is not None:
            result['CustomerName'] = self.customer_name
        if self.display_name is not None:
            result['DisplayName'] = self.display_name
        if self.ext_info is not None:
            result['ExtInfo'] = self.ext_info.to_map()
        if self.function_status_info is not None:
            result['FunctionStatusInfo'] = self.function_status_info.to_map()
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.highmodel_assigned_time is not None:
            result['HighmodelAssignedTime'] = self.highmodel_assigned_time
        if self.id is not None:
            result['Id'] = self.id
        if self.isv_assigned_time is not None:
            result['IsvAssignedTime'] = self.isv_assigned_time
        if self.latest_pipeline_usage_instance is not None:
            result['LatestPipelineUsageInstance'] = self.latest_pipeline_usage_instance
        if self.model_confirmed_time is not None:
            result['ModelConfirmedTime'] = self.model_confirmed_time
        if self.note is not None:
            result['Note'] = self.note.to_map()
        if self.order_id is not None:
            result['OrderId'] = self.order_id
        if self.order_name is not None:
            result['OrderName'] = self.order_name
        if self.photo_address is not None:
            result['PhotoAddress'] = self.photo_address
        result['PhotoContact'] = []
        if self.photo_contact is not None:
            for k in self.photo_contact:
                result['PhotoContact'].append(k.to_map() if k else None)
        if self.project_group_id is not None:
            result['ProjectGroupId'] = self.project_group_id
        if self.project_source is not None:
            result['ProjectSource'] = self.project_source
        if self.project_status is not None:
            result['ProjectStatus'] = self.project_status
        if self.publish_status_info is not None:
            result['PublishStatusInfo'] = self.publish_status_info.to_map()
        if self.recent_build_time is not None:
            result['RecentBuildTime'] = self.recent_build_time
        if self.upload_status_info is not None:
            result['UploadStatusInfo'] = self.upload_status_info.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('BuildStatusInfo') is not None:
            temp_model = ProjectFindAllResponseBodyContentBuildStatusInfo()
            self.build_status_info = temp_model.from_map(m['BuildStatusInfo'])
        if m.get('CustomerName') is not None:
            self.customer_name = m.get('CustomerName')
        if m.get('DisplayName') is not None:
            self.display_name = m.get('DisplayName')
        if m.get('ExtInfo') is not None:
            temp_model = ProjectFindAllResponseBodyContentExtInfo()
            self.ext_info = temp_model.from_map(m['ExtInfo'])
        if m.get('FunctionStatusInfo') is not None:
            temp_model = ProjectFindAllResponseBodyContentFunctionStatusInfo()
            self.function_status_info = temp_model.from_map(m['FunctionStatusInfo'])
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('HighmodelAssignedTime') is not None:
            self.highmodel_assigned_time = m.get('HighmodelAssignedTime')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('IsvAssignedTime') is not None:
            self.isv_assigned_time = m.get('IsvAssignedTime')
        if m.get('LatestPipelineUsageInstance') is not None:
            self.latest_pipeline_usage_instance = m.get('LatestPipelineUsageInstance')
        if m.get('ModelConfirmedTime') is not None:
            self.model_confirmed_time = m.get('ModelConfirmedTime')
        if m.get('Note') is not None:
            temp_model = ProjectFindAllResponseBodyContentNote()
            self.note = temp_model.from_map(m['Note'])
        if m.get('OrderId') is not None:
            self.order_id = m.get('OrderId')
        if m.get('OrderName') is not None:
            self.order_name = m.get('OrderName')
        if m.get('PhotoAddress') is not None:
            self.photo_address = m.get('PhotoAddress')
        self.photo_contact = []
        if m.get('PhotoContact') is not None:
            for k in m.get('PhotoContact'):
                temp_model = ProjectFindAllResponseBodyContentPhotoContact()
                self.photo_contact.append(temp_model.from_map(k))
        if m.get('ProjectGroupId') is not None:
            self.project_group_id = m.get('ProjectGroupId')
        if m.get('ProjectSource') is not None:
            self.project_source = m.get('ProjectSource')
        if m.get('ProjectStatus') is not None:
            self.project_status = m.get('ProjectStatus')
        if m.get('PublishStatusInfo') is not None:
            temp_model = ProjectFindAllResponseBodyContentPublishStatusInfo()
            self.publish_status_info = temp_model.from_map(m['PublishStatusInfo'])
        if m.get('RecentBuildTime') is not None:
            self.recent_build_time = m.get('RecentBuildTime')
        if m.get('UploadStatusInfo') is not None:
            temp_model = ProjectFindAllResponseBodyContentUploadStatusInfo()
            self.upload_status_info = temp_model.from_map(m['UploadStatusInfo'])
        return self


class ProjectFindAllResponseBodyPageableSort(TeaModel):
    def __init__(
        self,
        empty: bool = None,
        sorted: bool = None,
        unsorted: bool = None,
    ):
        self.empty = empty
        self.sorted = sorted
        self.unsorted = unsorted

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.empty is not None:
            result['Empty'] = self.empty
        if self.sorted is not None:
            result['Sorted'] = self.sorted
        if self.unsorted is not None:
            result['Unsorted'] = self.unsorted
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Empty') is not None:
            self.empty = m.get('Empty')
        if m.get('Sorted') is not None:
            self.sorted = m.get('Sorted')
        if m.get('Unsorted') is not None:
            self.unsorted = m.get('Unsorted')
        return self


class ProjectFindAllResponseBodyPageable(TeaModel):
    def __init__(
        self,
        offset: int = None,
        page_number: int = None,
        page_size: int = None,
        paged: bool = None,
        sort: ProjectFindAllResponseBodyPageableSort = None,
        unpaged: bool = None,
    ):
        self.offset = offset
        self.page_number = page_number
        self.page_size = page_size
        self.paged = paged
        self.sort = sort
        self.unpaged = unpaged

    def validate(self):
        if self.sort:
            self.sort.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.offset is not None:
            result['Offset'] = self.offset
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.paged is not None:
            result['Paged'] = self.paged
        if self.sort is not None:
            result['Sort'] = self.sort.to_map()
        if self.unpaged is not None:
            result['Unpaged'] = self.unpaged
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Offset') is not None:
            self.offset = m.get('Offset')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('Paged') is not None:
            self.paged = m.get('Paged')
        if m.get('Sort') is not None:
            temp_model = ProjectFindAllResponseBodyPageableSort()
            self.sort = temp_model.from_map(m['Sort'])
        if m.get('Unpaged') is not None:
            self.unpaged = m.get('Unpaged')
        return self


class ProjectFindAllResponseBodySort(TeaModel):
    def __init__(
        self,
        empty: bool = None,
        sorted: bool = None,
        unsorted: bool = None,
    ):
        self.empty = empty
        self.sorted = sorted
        self.unsorted = unsorted

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.empty is not None:
            result['Empty'] = self.empty
        if self.sorted is not None:
            result['Sorted'] = self.sorted
        if self.unsorted is not None:
            result['Unsorted'] = self.unsorted
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Empty') is not None:
            self.empty = m.get('Empty')
        if m.get('Sorted') is not None:
            self.sorted = m.get('Sorted')
        if m.get('Unsorted') is not None:
            self.unsorted = m.get('Unsorted')
        return self


class ProjectFindAllResponseBody(TeaModel):
    def __init__(
        self,
        content: List[ProjectFindAllResponseBodyContent] = None,
        empty: bool = None,
        first: bool = None,
        last: bool = None,
        number: int = None,
        number_of_elements: int = None,
        pageable: ProjectFindAllResponseBodyPageable = None,
        request_id: str = None,
        size: int = None,
        sort: ProjectFindAllResponseBodySort = None,
        total_elements: int = None,
        total_pages: int = None,
    ):
        self.content = content
        self.empty = empty
        self.first = first
        self.last = last
        self.number = number
        self.number_of_elements = number_of_elements
        self.pageable = pageable
        self.request_id = request_id
        self.size = size
        self.sort = sort
        self.total_elements = total_elements
        self.total_pages = total_pages

    def validate(self):
        if self.content:
            for k in self.content:
                if k:
                    k.validate()
        if self.pageable:
            self.pageable.validate()
        if self.sort:
            self.sort.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Content'] = []
        if self.content is not None:
            for k in self.content:
                result['Content'].append(k.to_map() if k else None)
        if self.empty is not None:
            result['Empty'] = self.empty
        if self.first is not None:
            result['First'] = self.first
        if self.last is not None:
            result['Last'] = self.last
        if self.number is not None:
            result['Number'] = self.number
        if self.number_of_elements is not None:
            result['NumberOfElements'] = self.number_of_elements
        if self.pageable is not None:
            result['Pageable'] = self.pageable.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.size is not None:
            result['Size'] = self.size
        if self.sort is not None:
            result['Sort'] = self.sort.to_map()
        if self.total_elements is not None:
            result['TotalElements'] = self.total_elements
        if self.total_pages is not None:
            result['TotalPages'] = self.total_pages
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.content = []
        if m.get('Content') is not None:
            for k in m.get('Content'):
                temp_model = ProjectFindAllResponseBodyContent()
                self.content.append(temp_model.from_map(k))
        if m.get('Empty') is not None:
            self.empty = m.get('Empty')
        if m.get('First') is not None:
            self.first = m.get('First')
        if m.get('Last') is not None:
            self.last = m.get('Last')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('NumberOfElements') is not None:
            self.number_of_elements = m.get('NumberOfElements')
        if m.get('Pageable') is not None:
            temp_model = ProjectFindAllResponseBodyPageable()
            self.pageable = temp_model.from_map(m['Pageable'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Size') is not None:
            self.size = m.get('Size')
        if m.get('Sort') is not None:
            temp_model = ProjectFindAllResponseBodySort()
            self.sort = temp_model.from_map(m['Sort'])
        if m.get('TotalElements') is not None:
            self.total_elements = m.get('TotalElements')
        if m.get('TotalPages') is not None:
            self.total_pages = m.get('TotalPages')
        return self


class ProjectFindAllResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ProjectFindAllResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ProjectFindAllResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ProjectFindUploadsRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        created_by_current_user: bool = None,
        dataset_id: int = None,
        live: bool = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.created_by_current_user = created_by_current_user
        self.dataset_id = dataset_id
        self.live = live

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.created_by_current_user is not None:
            result['CreatedByCurrentUser'] = self.created_by_current_user
        if self.dataset_id is not None:
            result['DatasetId'] = self.dataset_id
        if self.live is not None:
            result['Live'] = self.live
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('CreatedByCurrentUser') is not None:
            self.created_by_current_user = m.get('CreatedByCurrentUser')
        if m.get('DatasetId') is not None:
            self.dataset_id = m.get('DatasetId')
        if m.get('Live') is not None:
            self.live = m.get('Live')
        return self


class ProjectFindUploadsResponseBodyContent(TeaModel):
    def __init__(
        self,
        code: str = None,
        dataset_id: int = None,
        device_key: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        id: int = None,
        message: str = None,
        progress: int = None,
        status: str = None,
    ):
        self.code = code
        self.dataset_id = dataset_id
        self.device_key = device_key
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.id = id
        self.message = message
        self.progress = progress
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.dataset_id is not None:
            result['DatasetId'] = self.dataset_id
        if self.device_key is not None:
            result['DeviceKey'] = self.device_key
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        if self.message is not None:
            result['Message'] = self.message
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('DatasetId') is not None:
            self.dataset_id = m.get('DatasetId')
        if m.get('DeviceKey') is not None:
            self.device_key = m.get('DeviceKey')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class ProjectFindUploadsResponseBodyPageableSort(TeaModel):
    def __init__(
        self,
        empty: bool = None,
        sorted: bool = None,
        unsorted: bool = None,
    ):
        self.empty = empty
        self.sorted = sorted
        self.unsorted = unsorted

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.empty is not None:
            result['Empty'] = self.empty
        if self.sorted is not None:
            result['Sorted'] = self.sorted
        if self.unsorted is not None:
            result['Unsorted'] = self.unsorted
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Empty') is not None:
            self.empty = m.get('Empty')
        if m.get('Sorted') is not None:
            self.sorted = m.get('Sorted')
        if m.get('Unsorted') is not None:
            self.unsorted = m.get('Unsorted')
        return self


class ProjectFindUploadsResponseBodyPageable(TeaModel):
    def __init__(
        self,
        offset: int = None,
        page_number: int = None,
        page_size: int = None,
        paged: bool = None,
        sort: ProjectFindUploadsResponseBodyPageableSort = None,
        unpaged: bool = None,
    ):
        self.offset = offset
        self.page_number = page_number
        self.page_size = page_size
        self.paged = paged
        self.sort = sort
        self.unpaged = unpaged

    def validate(self):
        if self.sort:
            self.sort.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.offset is not None:
            result['Offset'] = self.offset
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.paged is not None:
            result['Paged'] = self.paged
        if self.sort is not None:
            result['Sort'] = self.sort.to_map()
        if self.unpaged is not None:
            result['Unpaged'] = self.unpaged
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Offset') is not None:
            self.offset = m.get('Offset')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('Paged') is not None:
            self.paged = m.get('Paged')
        if m.get('Sort') is not None:
            temp_model = ProjectFindUploadsResponseBodyPageableSort()
            self.sort = temp_model.from_map(m['Sort'])
        if m.get('Unpaged') is not None:
            self.unpaged = m.get('Unpaged')
        return self


class ProjectFindUploadsResponseBodySort(TeaModel):
    def __init__(
        self,
        empty: bool = None,
        sorted: bool = None,
        unsorted: bool = None,
    ):
        self.empty = empty
        self.sorted = sorted
        self.unsorted = unsorted

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.empty is not None:
            result['Empty'] = self.empty
        if self.sorted is not None:
            result['Sorted'] = self.sorted
        if self.unsorted is not None:
            result['Unsorted'] = self.unsorted
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Empty') is not None:
            self.empty = m.get('Empty')
        if m.get('Sorted') is not None:
            self.sorted = m.get('Sorted')
        if m.get('Unsorted') is not None:
            self.unsorted = m.get('Unsorted')
        return self


class ProjectFindUploadsResponseBody(TeaModel):
    def __init__(
        self,
        content: List[ProjectFindUploadsResponseBodyContent] = None,
        empty: bool = None,
        first: bool = None,
        last: bool = None,
        number: int = None,
        number_of_elements: int = None,
        pageable: ProjectFindUploadsResponseBodyPageable = None,
        request_id: str = None,
        size: int = None,
        sort: ProjectFindUploadsResponseBodySort = None,
        total_elements: int = None,
        total_pages: int = None,
    ):
        self.content = content
        self.empty = empty
        self.first = first
        self.last = last
        self.number = number
        self.number_of_elements = number_of_elements
        self.pageable = pageable
        # Id of the request
        self.request_id = request_id
        self.size = size
        self.sort = sort
        self.total_elements = total_elements
        self.total_pages = total_pages

    def validate(self):
        if self.content:
            for k in self.content:
                if k:
                    k.validate()
        if self.pageable:
            self.pageable.validate()
        if self.sort:
            self.sort.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Content'] = []
        if self.content is not None:
            for k in self.content:
                result['Content'].append(k.to_map() if k else None)
        if self.empty is not None:
            result['Empty'] = self.empty
        if self.first is not None:
            result['First'] = self.first
        if self.last is not None:
            result['Last'] = self.last
        if self.number is not None:
            result['Number'] = self.number
        if self.number_of_elements is not None:
            result['NumberOfElements'] = self.number_of_elements
        if self.pageable is not None:
            result['Pageable'] = self.pageable.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.size is not None:
            result['Size'] = self.size
        if self.sort is not None:
            result['Sort'] = self.sort.to_map()
        if self.total_elements is not None:
            result['TotalElements'] = self.total_elements
        if self.total_pages is not None:
            result['TotalPages'] = self.total_pages
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.content = []
        if m.get('Content') is not None:
            for k in m.get('Content'):
                temp_model = ProjectFindUploadsResponseBodyContent()
                self.content.append(temp_model.from_map(k))
        if m.get('Empty') is not None:
            self.empty = m.get('Empty')
        if m.get('First') is not None:
            self.first = m.get('First')
        if m.get('Last') is not None:
            self.last = m.get('Last')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('NumberOfElements') is not None:
            self.number_of_elements = m.get('NumberOfElements')
        if m.get('Pageable') is not None:
            temp_model = ProjectFindUploadsResponseBodyPageable()
            self.pageable = temp_model.from_map(m['Pageable'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Size') is not None:
            self.size = m.get('Size')
        if m.get('Sort') is not None:
            temp_model = ProjectFindUploadsResponseBodySort()
            self.sort = temp_model.from_map(m['Sort'])
        if m.get('TotalElements') is not None:
            self.total_elements = m.get('TotalElements')
        if m.get('TotalPages') is not None:
            self.total_pages = m.get('TotalPages')
        return self


class ProjectFindUploadsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ProjectFindUploadsResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ProjectFindUploadsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ProjectGetOneRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        project_id: int = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.project_id = project_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.project_id is not None:
            result['ProjectId'] = self.project_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('ProjectId') is not None:
            self.project_id = m.get('ProjectId')
        return self


class ProjectGetOneResponseBody(TeaModel):
    def __init__(
        self,
        error_code: str = None,
        error_msg: str = None,
        request_id: str = None,
        result_obj: Dict[str, Any] = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.error_msg = error_msg
        # Id of the request
        self.request_id = request_id
        self.result_obj = result_obj
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.error_msg is not None:
            result['ErrorMsg'] = self.error_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_obj is not None:
            result['ResultObj'] = self.result_obj
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('ErrorMsg') is not None:
            self.error_msg = m.get('ErrorMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultObj') is not None:
            self.result_obj = m.get('ResultObj')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ProjectGetOneResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ProjectGetOneResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ProjectGetOneResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ProjectGetOneAppRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        project_id: int = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.project_id = project_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.project_id is not None:
            result['ProjectId'] = self.project_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('ProjectId') is not None:
            self.project_id = m.get('ProjectId')
        return self


class ProjectGetOneAppResponseBodyBuildStatusInfo(TeaModel):
    def __init__(
        self,
        end_time: str = None,
        progress: int = None,
        start_time: str = None,
        status: str = None,
        tips: str = None,
    ):
        self.end_time = end_time
        self.progress = progress
        self.start_time = start_time
        self.status = status
        self.tips = tips

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.status is not None:
            result['Status'] = self.status
        if self.tips is not None:
            result['Tips'] = self.tips
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Tips') is not None:
            self.tips = m.get('Tips')
        return self


class ProjectGetOneAppResponseBodyExtInfo(TeaModel):
    def __init__(
        self,
        floorplanarea: str = None,
        onlinedns: str = None,
        status: str = None,
    ):
        self.floorplanarea = floorplanarea
        self.onlinedns = onlinedns
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.floorplanarea is not None:
            result['FLOORPLANAREA'] = self.floorplanarea
        if self.onlinedns is not None:
            result['ONLINEDNS'] = self.onlinedns
        if self.status is not None:
            result['STATUS'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('FLOORPLANAREA') is not None:
            self.floorplanarea = m.get('FLOORPLANAREA')
        if m.get('ONLINEDNS') is not None:
            self.onlinedns = m.get('ONLINEDNS')
        if m.get('STATUS') is not None:
            self.status = m.get('STATUS')
        return self


class ProjectGetOneAppResponseBodyFunctionStatusInfo(TeaModel):
    def __init__(
        self,
        end_time: str = None,
        progress: int = None,
        start_time: str = None,
        status: str = None,
        tips: str = None,
    ):
        self.end_time = end_time
        self.progress = progress
        self.start_time = start_time
        self.status = status
        self.tips = tips

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.status is not None:
            result['Status'] = self.status
        if self.tips is not None:
            result['Tips'] = self.tips
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Tips') is not None:
            self.tips = m.get('Tips')
        return self


class ProjectGetOneAppResponseBodyNote(TeaModel):
    def __init__(
        self,
        description: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        id: int = None,
        name: str = None,
    ):
        self.description = description
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.id = id
        self.name = name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        if self.name is not None:
            result['Name'] = self.name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        return self


class ProjectGetOneAppResponseBodyPublishStatusInfo(TeaModel):
    def __init__(
        self,
        end_time: str = None,
        progress: int = None,
        start_time: str = None,
        status: str = None,
        tips: str = None,
    ):
        self.end_time = end_time
        self.progress = progress
        self.start_time = start_time
        self.status = status
        self.tips = tips

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.status is not None:
            result['Status'] = self.status
        if self.tips is not None:
            result['Tips'] = self.tips
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Tips') is not None:
            self.tips = m.get('Tips')
        return self


class ProjectGetOneAppResponseBodyUploadStatusInfo(TeaModel):
    def __init__(
        self,
        end_time: str = None,
        progress: int = None,
        start_time: str = None,
        status: str = None,
        tips: str = None,
    ):
        self.end_time = end_time
        self.progress = progress
        self.start_time = start_time
        self.status = status
        self.tips = tips

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.status is not None:
            result['Status'] = self.status
        if self.tips is not None:
            result['Tips'] = self.tips
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Tips') is not None:
            self.tips = m.get('Tips')
        return self


class ProjectGetOneAppResponseBody(TeaModel):
    def __init__(
        self,
        biz_type: str = None,
        build_status_info: ProjectGetOneAppResponseBodyBuildStatusInfo = None,
        display_name: str = None,
        ext_info: ProjectGetOneAppResponseBodyExtInfo = None,
        function_status_info: ProjectGetOneAppResponseBodyFunctionStatusInfo = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        highmodel_assigned_time: str = None,
        icon: str = None,
        id: int = None,
        isv_assigned_time: str = None,
        latest_pipeline_usage_instance: Dict[str, Any] = None,
        model_confirmed_time: str = None,
        nick_name: str = None,
        note: ProjectGetOneAppResponseBodyNote = None,
        order_id: int = None,
        project_group_id: str = None,
        project_source: str = None,
        project_status: str = None,
        publish_status_info: ProjectGetOneAppResponseBodyPublishStatusInfo = None,
        recent_build_time: str = None,
        request_id: str = None,
        status: str = None,
        thumbnail: str = None,
        upload_status_info: ProjectGetOneAppResponseBodyUploadStatusInfo = None,
    ):
        self.biz_type = biz_type
        self.build_status_info = build_status_info
        self.display_name = display_name
        self.ext_info = ext_info
        self.function_status_info = function_status_info
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.highmodel_assigned_time = highmodel_assigned_time
        self.icon = icon
        self.id = id
        self.isv_assigned_time = isv_assigned_time
        self.latest_pipeline_usage_instance = latest_pipeline_usage_instance
        self.model_confirmed_time = model_confirmed_time
        self.nick_name = nick_name
        self.note = note
        self.order_id = order_id
        self.project_group_id = project_group_id
        self.project_source = project_source
        self.project_status = project_status
        self.publish_status_info = publish_status_info
        self.recent_build_time = recent_build_time
        # Id of the request
        self.request_id = request_id
        self.status = status
        self.thumbnail = thumbnail
        self.upload_status_info = upload_status_info

    def validate(self):
        if self.build_status_info:
            self.build_status_info.validate()
        if self.ext_info:
            self.ext_info.validate()
        if self.function_status_info:
            self.function_status_info.validate()
        if self.note:
            self.note.validate()
        if self.publish_status_info:
            self.publish_status_info.validate()
        if self.upload_status_info:
            self.upload_status_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.build_status_info is not None:
            result['BuildStatusInfo'] = self.build_status_info.to_map()
        if self.display_name is not None:
            result['DisplayName'] = self.display_name
        if self.ext_info is not None:
            result['ExtInfo'] = self.ext_info.to_map()
        if self.function_status_info is not None:
            result['FunctionStatusInfo'] = self.function_status_info.to_map()
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.highmodel_assigned_time is not None:
            result['HighmodelAssignedTime'] = self.highmodel_assigned_time
        if self.icon is not None:
            result['Icon'] = self.icon
        if self.id is not None:
            result['Id'] = self.id
        if self.isv_assigned_time is not None:
            result['IsvAssignedTime'] = self.isv_assigned_time
        if self.latest_pipeline_usage_instance is not None:
            result['LatestPipelineUsageInstance'] = self.latest_pipeline_usage_instance
        if self.model_confirmed_time is not None:
            result['ModelConfirmedTime'] = self.model_confirmed_time
        if self.nick_name is not None:
            result['NickName'] = self.nick_name
        if self.note is not None:
            result['Note'] = self.note.to_map()
        if self.order_id is not None:
            result['OrderId'] = self.order_id
        if self.project_group_id is not None:
            result['ProjectGroupId'] = self.project_group_id
        if self.project_source is not None:
            result['ProjectSource'] = self.project_source
        if self.project_status is not None:
            result['ProjectStatus'] = self.project_status
        if self.publish_status_info is not None:
            result['PublishStatusInfo'] = self.publish_status_info.to_map()
        if self.recent_build_time is not None:
            result['RecentBuildTime'] = self.recent_build_time
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        if self.thumbnail is not None:
            result['Thumbnail'] = self.thumbnail
        if self.upload_status_info is not None:
            result['UploadStatusInfo'] = self.upload_status_info.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('BuildStatusInfo') is not None:
            temp_model = ProjectGetOneAppResponseBodyBuildStatusInfo()
            self.build_status_info = temp_model.from_map(m['BuildStatusInfo'])
        if m.get('DisplayName') is not None:
            self.display_name = m.get('DisplayName')
        if m.get('ExtInfo') is not None:
            temp_model = ProjectGetOneAppResponseBodyExtInfo()
            self.ext_info = temp_model.from_map(m['ExtInfo'])
        if m.get('FunctionStatusInfo') is not None:
            temp_model = ProjectGetOneAppResponseBodyFunctionStatusInfo()
            self.function_status_info = temp_model.from_map(m['FunctionStatusInfo'])
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('HighmodelAssignedTime') is not None:
            self.highmodel_assigned_time = m.get('HighmodelAssignedTime')
        if m.get('Icon') is not None:
            self.icon = m.get('Icon')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('IsvAssignedTime') is not None:
            self.isv_assigned_time = m.get('IsvAssignedTime')
        if m.get('LatestPipelineUsageInstance') is not None:
            self.latest_pipeline_usage_instance = m.get('LatestPipelineUsageInstance')
        if m.get('ModelConfirmedTime') is not None:
            self.model_confirmed_time = m.get('ModelConfirmedTime')
        if m.get('NickName') is not None:
            self.nick_name = m.get('NickName')
        if m.get('Note') is not None:
            temp_model = ProjectGetOneAppResponseBodyNote()
            self.note = temp_model.from_map(m['Note'])
        if m.get('OrderId') is not None:
            self.order_id = m.get('OrderId')
        if m.get('ProjectGroupId') is not None:
            self.project_group_id = m.get('ProjectGroupId')
        if m.get('ProjectSource') is not None:
            self.project_source = m.get('ProjectSource')
        if m.get('ProjectStatus') is not None:
            self.project_status = m.get('ProjectStatus')
        if m.get('PublishStatusInfo') is not None:
            temp_model = ProjectGetOneAppResponseBodyPublishStatusInfo()
            self.publish_status_info = temp_model.from_map(m['PublishStatusInfo'])
        if m.get('RecentBuildTime') is not None:
            self.recent_build_time = m.get('RecentBuildTime')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Thumbnail') is not None:
            self.thumbnail = m.get('Thumbnail')
        if m.get('UploadStatusInfo') is not None:
            temp_model = ProjectGetOneAppResponseBodyUploadStatusInfo()
            self.upload_status_info = temp_model.from_map(m['UploadStatusInfo'])
        return self


class ProjectGetOneAppResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ProjectGetOneAppResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ProjectGetOneAppResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ProjectGetStatusAndOssRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        params: str = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.params = params

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.params is not None:
            result['Params'] = self.params
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('Params') is not None:
            self.params = m.get('Params')
        return self


class ProjectGetStatusAndOssResponseBodyProjectStatusAndOssResponseList(TeaModel):
    def __init__(
        self,
        dataset_publish_status: str = None,
        gmt_published: str = None,
        icon: str = None,
        name: str = None,
        oss_sts: Dict[str, Any] = None,
        pipeline_status: str = None,
        project_id: int = None,
    ):
        self.dataset_publish_status = dataset_publish_status
        self.gmt_published = gmt_published
        self.icon = icon
        self.name = name
        self.oss_sts = oss_sts
        self.pipeline_status = pipeline_status
        self.project_id = project_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dataset_publish_status is not None:
            result['DatasetPublishStatus'] = self.dataset_publish_status
        if self.gmt_published is not None:
            result['GmtPublished'] = self.gmt_published
        if self.icon is not None:
            result['Icon'] = self.icon
        if self.name is not None:
            result['Name'] = self.name
        if self.oss_sts is not None:
            result['OssSts'] = self.oss_sts
        if self.pipeline_status is not None:
            result['PipelineStatus'] = self.pipeline_status
        if self.project_id is not None:
            result['ProjectId'] = self.project_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DatasetPublishStatus') is not None:
            self.dataset_publish_status = m.get('DatasetPublishStatus')
        if m.get('GmtPublished') is not None:
            self.gmt_published = m.get('GmtPublished')
        if m.get('Icon') is not None:
            self.icon = m.get('Icon')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('OssSts') is not None:
            self.oss_sts = m.get('OssSts')
        if m.get('PipelineStatus') is not None:
            self.pipeline_status = m.get('PipelineStatus')
        if m.get('ProjectId') is not None:
            self.project_id = m.get('ProjectId')
        return self


class ProjectGetStatusAndOssResponseBody(TeaModel):
    def __init__(
        self,
        project_status_and_oss_response_list: List[ProjectGetStatusAndOssResponseBodyProjectStatusAndOssResponseList] = None,
        request_id: str = None,
    ):
        self.project_status_and_oss_response_list = project_status_and_oss_response_list
        self.request_id = request_id

    def validate(self):
        if self.project_status_and_oss_response_list:
            for k in self.project_status_and_oss_response_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['ProjectStatusAndOssResponseList'] = []
        if self.project_status_and_oss_response_list is not None:
            for k in self.project_status_and_oss_response_list:
                result['ProjectStatusAndOssResponseList'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.project_status_and_oss_response_list = []
        if m.get('ProjectStatusAndOssResponseList') is not None:
            for k in m.get('ProjectStatusAndOssResponseList'):
                temp_model = ProjectGetStatusAndOssResponseBodyProjectStatusAndOssResponseList()
                self.project_status_and_oss_response_list.append(temp_model.from_map(k))
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class ProjectGetStatusAndOssResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ProjectGetStatusAndOssResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ProjectGetStatusAndOssResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ProjectSyncProjectStatusRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        params: str = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.params = params

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.params is not None:
            result['Params'] = self.params
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('Params') is not None:
            self.params = m.get('Params')
        return self


class ProjectSyncProjectStatusResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
    ):
        # Id of the request
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class ProjectSyncProjectStatusResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ProjectSyncProjectStatusResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ProjectSyncProjectStatusResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class PublishGalleryRequest(TeaModel):
    def __init__(
        self,
        dataset_id: int = None,
        tag: str = None,
        template: str = None,
    ):
        self.dataset_id = dataset_id
        self.tag = tag
        self.template = template

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dataset_id is not None:
            result['DatasetId'] = self.dataset_id
        if self.tag is not None:
            result['Tag'] = self.tag
        if self.template is not None:
            result['Template'] = self.template
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DatasetId') is not None:
            self.dataset_id = m.get('DatasetId')
        if m.get('Tag') is not None:
            self.tag = m.get('Tag')
        if m.get('Template') is not None:
            self.template = m.get('Template')
        return self


class PublishGalleryResponseBody(TeaModel):
    def __init__(
        self,
        data: Dict[str, Any] = None,
        error: str = None,
        msg_code: str = None,
        msg_info: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.data = data
        self.error = error
        self.msg_code = msg_code
        self.msg_info = msg_info
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data
        if self.error is not None:
            result['Error'] = self.error
        if self.msg_code is not None:
            result['MsgCode'] = self.msg_code
        if self.msg_info is not None:
            result['MsgInfo'] = self.msg_info
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Error') is not None:
            self.error = m.get('Error')
        if m.get('MsgCode') is not None:
            self.msg_code = m.get('MsgCode')
        if m.get('MsgInfo') is not None:
            self.msg_info = m.get('MsgInfo')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class PublishGalleryResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: PublishGalleryResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = PublishGalleryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class PublishRealRequest(TeaModel):
    def __init__(
        self,
        dataset_id: int = None,
        project_id: int = None,
        tag: str = None,
    ):
        # datasetId
        self.dataset_id = dataset_id
        # projectId
        self.project_id = project_id
        # tag
        self.tag = tag

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dataset_id is not None:
            result['DatasetId'] = self.dataset_id
        if self.project_id is not None:
            result['ProjectId'] = self.project_id
        if self.tag is not None:
            result['Tag'] = self.tag
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DatasetId') is not None:
            self.dataset_id = m.get('DatasetId')
        if m.get('ProjectId') is not None:
            self.project_id = m.get('ProjectId')
        if m.get('Tag') is not None:
            self.tag = m.get('Tag')
        return self


class PublishRealResponseBody(TeaModel):
    def __init__(
        self,
        data: str = None,
        error: str = None,
        msg_code: str = None,
        msg_info: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        # data
        self.data = data
        # error
        self.error = error
        # msgCode
        self.msg_code = msg_code
        # msgInfo
        self.msg_info = msg_info
        # traceId
        self.request_id = request_id
        # success
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data
        if self.error is not None:
            result['Error'] = self.error
        if self.msg_code is not None:
            result['MsgCode'] = self.msg_code
        if self.msg_info is not None:
            result['MsgInfo'] = self.msg_info
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Error') is not None:
            self.error = m.get('Error')
        if m.get('MsgCode') is not None:
            self.msg_code = m.get('MsgCode')
        if m.get('MsgInfo') is not None:
            self.msg_info = m.get('MsgInfo')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class PublishRealResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: PublishRealResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = PublishRealResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryAccountLabelRequest(TeaModel):
    def __init__(
        self,
        label_series: str = None,
        pk: int = None,
        token: str = None,
    ):
        self.label_series = label_series
        self.pk = pk
        # token 通过聚宝盆申请，预发环境label 查询必须使用
        self.token = token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.label_series is not None:
            result['LabelSeries'] = self.label_series
        if self.pk is not None:
            result['PK'] = self.pk
        if self.token is not None:
            result['Token'] = self.token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('LabelSeries') is not None:
            self.label_series = m.get('LabelSeries')
        if m.get('PK') is not None:
            self.pk = m.get('PK')
        if m.get('Token') is not None:
            self.token = m.get('Token')
        return self


class QueryAccountLabelResponseBodyData(TeaModel):
    def __init__(
        self,
        label: str = None,
        label_series: str = None,
    ):
        self.label = label
        self.label_series = label_series

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.label is not None:
            result['Label'] = self.label
        if self.label_series is not None:
            result['LabelSeries'] = self.label_series
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Label') is not None:
            self.label = m.get('Label')
        if m.get('LabelSeries') is not None:
            self.label_series = m.get('LabelSeries')
        return self


class QueryAccountLabelResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        count: int = None,
        data: List[QueryAccountLabelResponseBodyData] = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.count = count
        self.data = data
        self.message = message
        # Id of the request
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.count is not None:
            result['Count'] = self.count
        result['Data'] = []
        if self.data is not None:
            for k in self.data:
                result['Data'].append(k.to_map() if k else None)
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Count') is not None:
            self.count = m.get('Count')
        self.data = []
        if m.get('Data') is not None:
            for k in m.get('Data'):
                temp_model = QueryAccountLabelResponseBodyData()
                self.data.append(temp_model.from_map(k))
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class QueryAccountLabelResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: QueryAccountLabelResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = QueryAccountLabelResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryBizLogByOpTypeAndTimeRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        params: str = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.params = params

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.params is not None:
            result['Params'] = self.params
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('Params') is not None:
            self.params = m.get('Params')
        return self


class QueryBizLogByOpTypeAndTimeResponseBody(TeaModel):
    def __init__(
        self,
        error_code: str = None,
        error_msg: str = None,
        request_id: str = None,
        result_obj: Dict[str, Any] = None,
        success: str = None,
    ):
        self.error_code = error_code
        self.error_msg = error_msg
        # Id of the request
        self.request_id = request_id
        self.result_obj = result_obj
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.error_msg is not None:
            result['ErrorMsg'] = self.error_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_obj is not None:
            result['ResultObj'] = self.result_obj
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('ErrorMsg') is not None:
            self.error_msg = m.get('ErrorMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultObj') is not None:
            self.result_obj = m.get('ResultObj')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class QueryBizLogByOpTypeAndTimeResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: QueryBizLogByOpTypeAndTimeResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = QueryBizLogByOpTypeAndTimeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryQRCodeInfoRequest(TeaModel):
    def __init__(
        self,
        sid: str = None,
    ):
        # sId
        self.sid = sid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.sid is not None:
            result['SId'] = self.sid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('SId') is not None:
            self.sid = m.get('SId')
        return self


class QueryQRCodeInfoResponseBody(TeaModel):
    def __init__(
        self,
        data: str = None,
        error: str = None,
        msg_code: str = None,
        msg_info: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        # data
        self.data = data
        # error
        self.error = error
        # msgCode
        self.msg_code = msg_code
        # msgInfo
        self.msg_info = msg_info
        # traceId
        self.request_id = request_id
        # success
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data
        if self.error is not None:
            result['Error'] = self.error
        if self.msg_code is not None:
            result['MsgCode'] = self.msg_code
        if self.msg_info is not None:
            result['MsgInfo'] = self.msg_info
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Error') is not None:
            self.error = m.get('Error')
        if m.get('MsgCode') is not None:
            self.msg_code = m.get('MsgCode')
        if m.get('MsgInfo') is not None:
            self.msg_info = m.get('MsgInfo')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class QueryQRCodeInfoResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: QueryQRCodeInfoResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = QueryQRCodeInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ScanDataCreateProjectRequestCreateScanUserDataRequest(TeaModel):
    def __init__(
        self,
        user_mob_num: str = None,
        user_nick: str = None,
        user_type: str = None,
    ):
        # 会员类型对应的手机号码
        self.user_mob_num = user_mob_num
        # 会员类型对应的昵称
        self.user_nick = user_nick
        # 目前只支持TB一种类型
        self.user_type = user_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.user_mob_num is not None:
            result['UserMobNum'] = self.user_mob_num
        if self.user_nick is not None:
            result['UserNick'] = self.user_nick
        if self.user_type is not None:
            result['UserType'] = self.user_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('UserMobNum') is not None:
            self.user_mob_num = m.get('UserMobNum')
        if m.get('UserNick') is not None:
            self.user_nick = m.get('UserNick')
        if m.get('UserType') is not None:
            self.user_type = m.get('UserType')
        return self


class ScanDataCreateProjectRequest(TeaModel):
    def __init__(
        self,
        biz_order_no: str = None,
        create_scan_user_data_request: ScanDataCreateProjectRequestCreateScanUserDataRequest = None,
        project_desc: str = None,
        project_name: str = None,
        source: str = None,
    ):
        # 业务幂等编号
        self.biz_order_no = biz_order_no
        # createScanUserDataRequest
        self.create_scan_user_data_request = create_scan_user_data_request
        # 项目描述
        self.project_desc = project_desc
        # 单个人下不允许出现相同项目名
        self.project_name = project_name
        # 目前只支持3VJIA
        self.source = source

    def validate(self):
        if self.create_scan_user_data_request:
            self.create_scan_user_data_request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_order_no is not None:
            result['BizOrderNo'] = self.biz_order_no
        if self.create_scan_user_data_request is not None:
            result['CreateScanUserDataRequest'] = self.create_scan_user_data_request.to_map()
        if self.project_desc is not None:
            result['ProjectDesc'] = self.project_desc
        if self.project_name is not None:
            result['ProjectName'] = self.project_name
        if self.source is not None:
            result['Source'] = self.source
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizOrderNo') is not None:
            self.biz_order_no = m.get('BizOrderNo')
        if m.get('CreateScanUserDataRequest') is not None:
            temp_model = ScanDataCreateProjectRequestCreateScanUserDataRequest()
            self.create_scan_user_data_request = temp_model.from_map(m['CreateScanUserDataRequest'])
        if m.get('ProjectDesc') is not None:
            self.project_desc = m.get('ProjectDesc')
        if m.get('ProjectName') is not None:
            self.project_name = m.get('ProjectName')
        if m.get('Source') is not None:
            self.source = m.get('Source')
        return self


class ScanDataCreateProjectShrinkRequest(TeaModel):
    def __init__(
        self,
        biz_order_no: str = None,
        create_scan_user_data_request_shrink: str = None,
        project_desc: str = None,
        project_name: str = None,
        source: str = None,
    ):
        # 业务幂等编号
        self.biz_order_no = biz_order_no
        # createScanUserDataRequest
        self.create_scan_user_data_request_shrink = create_scan_user_data_request_shrink
        # 项目描述
        self.project_desc = project_desc
        # 单个人下不允许出现相同项目名
        self.project_name = project_name
        # 目前只支持3VJIA
        self.source = source

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_order_no is not None:
            result['BizOrderNo'] = self.biz_order_no
        if self.create_scan_user_data_request_shrink is not None:
            result['CreateScanUserDataRequest'] = self.create_scan_user_data_request_shrink
        if self.project_desc is not None:
            result['ProjectDesc'] = self.project_desc
        if self.project_name is not None:
            result['ProjectName'] = self.project_name
        if self.source is not None:
            result['Source'] = self.source
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizOrderNo') is not None:
            self.biz_order_no = m.get('BizOrderNo')
        if m.get('CreateScanUserDataRequest') is not None:
            self.create_scan_user_data_request_shrink = m.get('CreateScanUserDataRequest')
        if m.get('ProjectDesc') is not None:
            self.project_desc = m.get('ProjectDesc')
        if m.get('ProjectName') is not None:
            self.project_name = m.get('ProjectName')
        if m.get('Source') is not None:
            self.source = m.get('Source')
        return self


class ScanDataCreateProjectResponseBody(TeaModel):
    def __init__(
        self,
        async_: bool = None,
        async_token: str = None,
        error_code: str = None,
        error_msg: str = None,
        project_id: int = None,
        request_id: str = None,
        retry: bool = None,
        success: bool = None,
    ):
        # async
        self.async_ = async_
        # asyncToken
        self.async_token = async_token
        # errorCode
        self.error_code = error_code
        # errorMsg
        self.error_msg = error_msg
        # resultObj
        self.project_id = project_id
        # traceId
        self.request_id = request_id
        # retry
        self.retry = retry
        # success
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.async_ is not None:
            result['Async'] = self.async_
        if self.async_token is not None:
            result['AsyncToken'] = self.async_token
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.error_msg is not None:
            result['ErrorMsg'] = self.error_msg
        if self.project_id is not None:
            result['ProjectId'] = self.project_id
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.retry is not None:
            result['Retry'] = self.retry
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Async') is not None:
            self.async_ = m.get('Async')
        if m.get('AsyncToken') is not None:
            self.async_token = m.get('AsyncToken')
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('ErrorMsg') is not None:
            self.error_msg = m.get('ErrorMsg')
        if m.get('ProjectId') is not None:
            self.project_id = m.get('ProjectId')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Retry') is not None:
            self.retry = m.get('Retry')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ScanDataCreateProjectResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ScanDataCreateProjectResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ScanDataCreateProjectResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ScanDataQueryProjectRequest(TeaModel):
    def __init__(
        self,
        biz_order_no: str = None,
        project_id: int = None,
        source: str = None,
    ):
        # 业务幂等ID，用于防止重复请求，写操作必传
        self.biz_order_no = biz_order_no
        # 查询的项目ID
        self.project_id = project_id
        # 数据源，目前只有3VJIA，需要新增请联系接口owner
        self.source = source

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_order_no is not None:
            result['BizOrderNo'] = self.biz_order_no
        if self.project_id is not None:
            result['ProjectId'] = self.project_id
        if self.source is not None:
            result['Source'] = self.source
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizOrderNo') is not None:
            self.biz_order_no = m.get('BizOrderNo')
        if m.get('ProjectId') is not None:
            self.project_id = m.get('ProjectId')
        if m.get('Source') is not None:
            self.source = m.get('Source')
        return self


class ScanDataQueryProjectResponseBody(TeaModel):
    def __init__(
        self,
        async_: bool = None,
        async_token: str = None,
        error_code: str = None,
        error_msg: str = None,
        request_id: str = None,
        result_obj: Dict[str, Any] = None,
        retry: bool = None,
        success: bool = None,
    ):
        # async
        self.async_ = async_
        # asyncToken
        self.async_token = async_token
        # errorCode
        self.error_code = error_code
        # errorMsg
        self.error_msg = error_msg
        # traceId
        self.request_id = request_id
        # resultObj
        self.result_obj = result_obj
        # retry
        self.retry = retry
        # success
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.async_ is not None:
            result['Async'] = self.async_
        if self.async_token is not None:
            result['AsyncToken'] = self.async_token
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.error_msg is not None:
            result['ErrorMsg'] = self.error_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_obj is not None:
            result['ResultObj'] = self.result_obj
        if self.retry is not None:
            result['Retry'] = self.retry
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Async') is not None:
            self.async_ = m.get('Async')
        if m.get('AsyncToken') is not None:
            self.async_token = m.get('AsyncToken')
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('ErrorMsg') is not None:
            self.error_msg = m.get('ErrorMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultObj') is not None:
            self.result_obj = m.get('ResultObj')
        if m.get('Retry') is not None:
            self.retry = m.get('Retry')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ScanDataQueryProjectResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ScanDataQueryProjectResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ScanDataQueryProjectResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ScanDataRemoveRoleRequestRemoveUserDataRequest(TeaModel):
    def __init__(
        self,
        user_mob_num: str = None,
        user_nick: str = None,
        user_type: str = None,
    ):
        # 会员手机号码
        self.user_mob_num = user_mob_num
        # 会员昵称
        self.user_nick = user_nick
        # 会员类型，目前只支持TB淘宝
        self.user_type = user_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.user_mob_num is not None:
            result['UserMobNum'] = self.user_mob_num
        if self.user_nick is not None:
            result['UserNick'] = self.user_nick
        if self.user_type is not None:
            result['UserType'] = self.user_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('UserMobNum') is not None:
            self.user_mob_num = m.get('UserMobNum')
        if m.get('UserNick') is not None:
            self.user_nick = m.get('UserNick')
        if m.get('UserType') is not None:
            self.user_type = m.get('UserType')
        return self


class ScanDataRemoveRoleRequest(TeaModel):
    def __init__(
        self,
        biz_order_no: str = None,
        project_id: int = None,
        remove_user_data_request: ScanDataRemoveRoleRequestRemoveUserDataRequest = None,
        role_name: str = None,
        source: str = None,
    ):
        # 业务幂等编号，用于幂等处理
        self.biz_order_no = biz_order_no
        # 移除角色的项目ID，必须是开放平台图对应source创建的项目
        self.project_id = project_id
        # removeUserDataRequest
        self.remove_user_data_request = remove_user_data_request
        # 移除角色名称，本次只支持PROJECT_MANAGER
        self.role_name = role_name
        # 数据请求来源，目前只支持广州三维家3VJIA
        self.source = source

    def validate(self):
        if self.remove_user_data_request:
            self.remove_user_data_request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_order_no is not None:
            result['BizOrderNo'] = self.biz_order_no
        if self.project_id is not None:
            result['ProjectId'] = self.project_id
        if self.remove_user_data_request is not None:
            result['RemoveUserDataRequest'] = self.remove_user_data_request.to_map()
        if self.role_name is not None:
            result['RoleName'] = self.role_name
        if self.source is not None:
            result['Source'] = self.source
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizOrderNo') is not None:
            self.biz_order_no = m.get('BizOrderNo')
        if m.get('ProjectId') is not None:
            self.project_id = m.get('ProjectId')
        if m.get('RemoveUserDataRequest') is not None:
            temp_model = ScanDataRemoveRoleRequestRemoveUserDataRequest()
            self.remove_user_data_request = temp_model.from_map(m['RemoveUserDataRequest'])
        if m.get('RoleName') is not None:
            self.role_name = m.get('RoleName')
        if m.get('Source') is not None:
            self.source = m.get('Source')
        return self


class ScanDataRemoveRoleShrinkRequest(TeaModel):
    def __init__(
        self,
        biz_order_no: str = None,
        project_id: int = None,
        remove_user_data_request_shrink: str = None,
        role_name: str = None,
        source: str = None,
    ):
        # 业务幂等编号，用于幂等处理
        self.biz_order_no = biz_order_no
        # 移除角色的项目ID，必须是开放平台图对应source创建的项目
        self.project_id = project_id
        # removeUserDataRequest
        self.remove_user_data_request_shrink = remove_user_data_request_shrink
        # 移除角色名称，本次只支持PROJECT_MANAGER
        self.role_name = role_name
        # 数据请求来源，目前只支持广州三维家3VJIA
        self.source = source

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_order_no is not None:
            result['BizOrderNo'] = self.biz_order_no
        if self.project_id is not None:
            result['ProjectId'] = self.project_id
        if self.remove_user_data_request_shrink is not None:
            result['RemoveUserDataRequest'] = self.remove_user_data_request_shrink
        if self.role_name is not None:
            result['RoleName'] = self.role_name
        if self.source is not None:
            result['Source'] = self.source
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizOrderNo') is not None:
            self.biz_order_no = m.get('BizOrderNo')
        if m.get('ProjectId') is not None:
            self.project_id = m.get('ProjectId')
        if m.get('RemoveUserDataRequest') is not None:
            self.remove_user_data_request_shrink = m.get('RemoveUserDataRequest')
        if m.get('RoleName') is not None:
            self.role_name = m.get('RoleName')
        if m.get('Source') is not None:
            self.source = m.get('Source')
        return self


class ScanDataRemoveRoleResponseBody(TeaModel):
    def __init__(
        self,
        async_: bool = None,
        async_token: str = None,
        error_code: str = None,
        error_msg: str = None,
        project_id: int = None,
        request_id: str = None,
        retry: bool = None,
        success: bool = None,
    ):
        # async
        self.async_ = async_
        # asyncToken
        self.async_token = async_token
        # errorCode
        self.error_code = error_code
        # errorMsg
        self.error_msg = error_msg
        # resultObj
        self.project_id = project_id
        # traceId
        self.request_id = request_id
        # retry
        self.retry = retry
        # success
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.async_ is not None:
            result['Async'] = self.async_
        if self.async_token is not None:
            result['AsyncToken'] = self.async_token
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.error_msg is not None:
            result['ErrorMsg'] = self.error_msg
        if self.project_id is not None:
            result['ProjectId'] = self.project_id
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.retry is not None:
            result['Retry'] = self.retry
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Async') is not None:
            self.async_ = m.get('Async')
        if m.get('AsyncToken') is not None:
            self.async_token = m.get('AsyncToken')
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('ErrorMsg') is not None:
            self.error_msg = m.get('ErrorMsg')
        if m.get('ProjectId') is not None:
            self.project_id = m.get('ProjectId')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Retry') is not None:
            self.retry = m.get('Retry')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ScanDataRemoveRoleResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ScanDataRemoveRoleResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ScanDataRemoveRoleResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ScanDataShareProjectRequestShareUserDataRequest(TeaModel):
    def __init__(
        self,
        user_mob_num: str = None,
        user_nick: str = None,
        user_type: str = None,
    ):
        # 分享用户的手机号码
        self.user_mob_num = user_mob_num
        # 分享用户的昵称
        self.user_nick = user_nick
        # 分享用户的会员类型，目前只支持淘宝TB
        self.user_type = user_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.user_mob_num is not None:
            result['UserMobNum'] = self.user_mob_num
        if self.user_nick is not None:
            result['UserNick'] = self.user_nick
        if self.user_type is not None:
            result['UserType'] = self.user_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('UserMobNum') is not None:
            self.user_mob_num = m.get('UserMobNum')
        if m.get('UserNick') is not None:
            self.user_nick = m.get('UserNick')
        if m.get('UserType') is not None:
            self.user_type = m.get('UserType')
        return self


class ScanDataShareProjectRequest(TeaModel):
    def __init__(
        self,
        biz_order_no: str = None,
        project_id: int = None,
        role_name: str = None,
        share_user_data_request: ScanDataShareProjectRequestShareUserDataRequest = None,
        source: str = None,
    ):
        # 业务幂等ID，用于防止重复请求，写操作必传
        self.biz_order_no = biz_order_no
        # 需要分享的项目ID
        self.project_id = project_id
        # 权限角色名，目前只支持项目管理员（PROJECT_MANAGER）
        self.role_name = role_name
        # shareUserDataRequest
        self.share_user_data_request = share_user_data_request
        # 对应数据源，目前仅支持广州三维家，需要新增源需要和接口负责人沟通并添加
        self.source = source

    def validate(self):
        if self.share_user_data_request:
            self.share_user_data_request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_order_no is not None:
            result['BizOrderNo'] = self.biz_order_no
        if self.project_id is not None:
            result['ProjectId'] = self.project_id
        if self.role_name is not None:
            result['RoleName'] = self.role_name
        if self.share_user_data_request is not None:
            result['ShareUserDataRequest'] = self.share_user_data_request.to_map()
        if self.source is not None:
            result['Source'] = self.source
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizOrderNo') is not None:
            self.biz_order_no = m.get('BizOrderNo')
        if m.get('ProjectId') is not None:
            self.project_id = m.get('ProjectId')
        if m.get('RoleName') is not None:
            self.role_name = m.get('RoleName')
        if m.get('ShareUserDataRequest') is not None:
            temp_model = ScanDataShareProjectRequestShareUserDataRequest()
            self.share_user_data_request = temp_model.from_map(m['ShareUserDataRequest'])
        if m.get('Source') is not None:
            self.source = m.get('Source')
        return self


class ScanDataShareProjectShrinkRequest(TeaModel):
    def __init__(
        self,
        biz_order_no: str = None,
        project_id: int = None,
        role_name: str = None,
        share_user_data_request_shrink: str = None,
        source: str = None,
    ):
        # 业务幂等ID，用于防止重复请求，写操作必传
        self.biz_order_no = biz_order_no
        # 需要分享的项目ID
        self.project_id = project_id
        # 权限角色名，目前只支持项目管理员（PROJECT_MANAGER）
        self.role_name = role_name
        # shareUserDataRequest
        self.share_user_data_request_shrink = share_user_data_request_shrink
        # 对应数据源，目前仅支持广州三维家，需要新增源需要和接口负责人沟通并添加
        self.source = source

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_order_no is not None:
            result['BizOrderNo'] = self.biz_order_no
        if self.project_id is not None:
            result['ProjectId'] = self.project_id
        if self.role_name is not None:
            result['RoleName'] = self.role_name
        if self.share_user_data_request_shrink is not None:
            result['ShareUserDataRequest'] = self.share_user_data_request_shrink
        if self.source is not None:
            result['Source'] = self.source
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizOrderNo') is not None:
            self.biz_order_no = m.get('BizOrderNo')
        if m.get('ProjectId') is not None:
            self.project_id = m.get('ProjectId')
        if m.get('RoleName') is not None:
            self.role_name = m.get('RoleName')
        if m.get('ShareUserDataRequest') is not None:
            self.share_user_data_request_shrink = m.get('ShareUserDataRequest')
        if m.get('Source') is not None:
            self.source = m.get('Source')
        return self


class ScanDataShareProjectResponseBody(TeaModel):
    def __init__(
        self,
        async_: bool = None,
        async_token: str = None,
        error_code: str = None,
        error_msg: str = None,
        project_id: int = None,
        request_id: str = None,
        retry: bool = None,
        success: bool = None,
    ):
        # async
        self.async_ = async_
        # asyncToken
        self.async_token = async_token
        # errorCode
        self.error_code = error_code
        # errorMsg
        self.error_msg = error_msg
        # resultObj
        self.project_id = project_id
        # traceId
        self.request_id = request_id
        # retry
        self.retry = retry
        # success
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.async_ is not None:
            result['Async'] = self.async_
        if self.async_token is not None:
            result['AsyncToken'] = self.async_token
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.error_msg is not None:
            result['ErrorMsg'] = self.error_msg
        if self.project_id is not None:
            result['ProjectId'] = self.project_id
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.retry is not None:
            result['Retry'] = self.retry
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Async') is not None:
            self.async_ = m.get('Async')
        if m.get('AsyncToken') is not None:
            self.async_token = m.get('AsyncToken')
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('ErrorMsg') is not None:
            self.error_msg = m.get('ErrorMsg')
        if m.get('ProjectId') is not None:
            self.project_id = m.get('ProjectId')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Retry') is not None:
            self.retry = m.get('Retry')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ScanDataShareProjectResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ScanDataShareProjectResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ScanDataShareProjectResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ScanDataUpdateProjectRequest(TeaModel):
    def __init__(
        self,
        biz_order_no: str = None,
        project_desc: str = None,
        project_id: int = None,
        project_name: str = None,
        source: str = None,
        user_mob_num: str = None,
        user_nick: str = None,
        user_type: str = None,
    ):
        # 业务幂等ID，用于防止重复请求，写操作必传
        self.biz_order_no = biz_order_no
        # 更新的项目描述信息
        self.project_desc = project_desc
        # 项目ID
        self.project_id = project_id
        # 项目名称
        self.project_name = project_name
        # 对应数据源，目前仅支持广州三维家，需要新增源需要和接口负责人沟通并添加
        self.source = source
        # 用户手机号码
        self.user_mob_num = user_mob_num
        # 用户昵称
        self.user_nick = user_nick
        # 用户会员类型，目前只支持TB淘宝
        self.user_type = user_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_order_no is not None:
            result['BizOrderNo'] = self.biz_order_no
        if self.project_desc is not None:
            result['ProjectDesc'] = self.project_desc
        if self.project_id is not None:
            result['ProjectId'] = self.project_id
        if self.project_name is not None:
            result['ProjectName'] = self.project_name
        if self.source is not None:
            result['Source'] = self.source
        if self.user_mob_num is not None:
            result['UserMobNum'] = self.user_mob_num
        if self.user_nick is not None:
            result['UserNick'] = self.user_nick
        if self.user_type is not None:
            result['UserType'] = self.user_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizOrderNo') is not None:
            self.biz_order_no = m.get('BizOrderNo')
        if m.get('ProjectDesc') is not None:
            self.project_desc = m.get('ProjectDesc')
        if m.get('ProjectId') is not None:
            self.project_id = m.get('ProjectId')
        if m.get('ProjectName') is not None:
            self.project_name = m.get('ProjectName')
        if m.get('Source') is not None:
            self.source = m.get('Source')
        if m.get('UserMobNum') is not None:
            self.user_mob_num = m.get('UserMobNum')
        if m.get('UserNick') is not None:
            self.user_nick = m.get('UserNick')
        if m.get('UserType') is not None:
            self.user_type = m.get('UserType')
        return self


class ScanDataUpdateProjectResponseBody(TeaModel):
    def __init__(
        self,
        async_: bool = None,
        async_token: str = None,
        error_code: str = None,
        error_msg: str = None,
        project_id: int = None,
        request_id: str = None,
        retry: bool = None,
        success: bool = None,
    ):
        # async
        self.async_ = async_
        # asyncToken
        self.async_token = async_token
        # errorCode
        self.error_code = error_code
        # errorMsg
        self.error_msg = error_msg
        # resultObj
        self.project_id = project_id
        # traceId
        self.request_id = request_id
        # retry
        self.retry = retry
        # success
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.async_ is not None:
            result['Async'] = self.async_
        if self.async_token is not None:
            result['AsyncToken'] = self.async_token
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.error_msg is not None:
            result['ErrorMsg'] = self.error_msg
        if self.project_id is not None:
            result['ProjectId'] = self.project_id
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.retry is not None:
            result['Retry'] = self.retry
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Async') is not None:
            self.async_ = m.get('Async')
        if m.get('AsyncToken') is not None:
            self.async_token = m.get('AsyncToken')
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('ErrorMsg') is not None:
            self.error_msg = m.get('ErrorMsg')
        if m.get('ProjectId') is not None:
            self.project_id = m.get('ProjectId')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Retry') is not None:
            self.retry = m.get('Retry')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ScanDataUpdateProjectResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ScanDataUpdateProjectResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ScanDataUpdateProjectResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SpiltBimDrawingRequest(TeaModel):
    def __init__(
        self,
        drawing_id: int = None,
        task_id: int = None,
    ):
        # A short description of struct
        self.drawing_id = drawing_id
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.drawing_id is not None:
            result['DrawingId'] = self.drawing_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DrawingId') is not None:
            self.drawing_id = m.get('DrawingId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class SpiltBimDrawingResponseBody(TeaModel):
    def __init__(
        self,
        datas: bool = None,
        err_code: int = None,
        err_msg: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.datas = datas
        self.err_code = err_code
        self.err_msg = err_msg
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.datas is not None:
            result['Datas'] = self.datas
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_msg is not None:
            result['ErrMsg'] = self.err_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Datas') is not None:
            self.datas = m.get('Datas')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMsg') is not None:
            self.err_msg = m.get('ErrMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class SpiltBimDrawingResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: SpiltBimDrawingResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = SpiltBimDrawingResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TestPopParamsResponseBody(TeaModel):
    def __init__(
        self,
        data: str = None,
        request_id: str = None,
    ):
        self.data = data
        # Id of the request
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class TestPopParamsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: TestPopParamsResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = TestPopParamsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TransTextToAudioRequest(TeaModel):
    def __init__(
        self,
        text: str = None,
    ):
        # text
        self.text = text

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.text is not None:
            result['Text'] = self.text
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Text') is not None:
            self.text = m.get('Text')
        return self


class TransTextToAudioResponseBody(TeaModel):
    def __init__(
        self,
        data: str = None,
        error: str = None,
        msg_code: str = None,
        msg_info: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        # data
        self.data = data
        # error
        self.error = error
        # msgCode
        self.msg_code = msg_code
        # msgInfo
        self.msg_info = msg_info
        # traceId
        self.request_id = request_id
        # success
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data
        if self.error is not None:
            result['Error'] = self.error
        if self.msg_code is not None:
            result['MsgCode'] = self.msg_code
        if self.msg_info is not None:
            result['MsgInfo'] = self.msg_info
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Error') is not None:
            self.error = m.get('Error')
        if m.get('MsgCode') is not None:
            self.msg_code = m.get('MsgCode')
        if m.get('MsgInfo') is not None:
            self.msg_info = m.get('MsgInfo')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class TransTextToAudioResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: TransTextToAudioResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = TransTextToAudioResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateBimFragmentRequestFloorInfo(TeaModel):
    def __init__(
        self,
        floor_name: str = None,
        floor_num: str = None,
    ):
        self.floor_name = floor_name
        self.floor_num = floor_num

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.floor_name is not None:
            result['FloorName'] = self.floor_name
        if self.floor_num is not None:
            result['FloorNum'] = self.floor_num
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('FloorName') is not None:
            self.floor_name = m.get('FloorName')
        if m.get('FloorNum') is not None:
            self.floor_num = m.get('FloorNum')
        return self


class UpdateBimFragmentRequest(TeaModel):
    def __init__(
        self,
        building_no: str = None,
        coordinates: List[List[float]] = None,
        drawing_id: int = None,
        floor_info: UpdateBimFragmentRequestFloorInfo = None,
        id: int = None,
        selection_mode: str = None,
        sub_type: str = None,
        suffix: str = None,
        task_id: int = None,
        type: str = None,
    ):
        # 楼栋号
        self.building_no = building_no
        self.coordinates = coordinates
        # 标准图纸Id
        self.drawing_id = drawing_id
        self.floor_info = floor_info
        # 归类id
        self.id = id
        # 选择方式
        self.selection_mode = selection_mode
        # 子类型
        self.sub_type = sub_type
        # 后缀
        self.suffix = suffix
        self.task_id = task_id
        # 类型
        self.type = type

    def validate(self):
        if self.floor_info:
            self.floor_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.building_no is not None:
            result['BuildingNo'] = self.building_no
        if self.coordinates is not None:
            result['Coordinates'] = self.coordinates
        if self.drawing_id is not None:
            result['DrawingId'] = self.drawing_id
        if self.floor_info is not None:
            result['FloorInfo'] = self.floor_info.to_map()
        if self.id is not None:
            result['Id'] = self.id
        if self.selection_mode is not None:
            result['SelectionMode'] = self.selection_mode
        if self.sub_type is not None:
            result['SubType'] = self.sub_type
        if self.suffix is not None:
            result['Suffix'] = self.suffix
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BuildingNo') is not None:
            self.building_no = m.get('BuildingNo')
        if m.get('Coordinates') is not None:
            self.coordinates = m.get('Coordinates')
        if m.get('DrawingId') is not None:
            self.drawing_id = m.get('DrawingId')
        if m.get('FloorInfo') is not None:
            temp_model = UpdateBimFragmentRequestFloorInfo()
            self.floor_info = temp_model.from_map(m['FloorInfo'])
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('SelectionMode') is not None:
            self.selection_mode = m.get('SelectionMode')
        if m.get('SubType') is not None:
            self.sub_type = m.get('SubType')
        if m.get('Suffix') is not None:
            self.suffix = m.get('Suffix')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class UpdateBimFragmentShrinkRequest(TeaModel):
    def __init__(
        self,
        building_no: str = None,
        coordinates_shrink: str = None,
        drawing_id: int = None,
        floor_info_shrink: str = None,
        id: int = None,
        selection_mode: str = None,
        sub_type: str = None,
        suffix: str = None,
        task_id: int = None,
        type: str = None,
    ):
        # 楼栋号
        self.building_no = building_no
        self.coordinates_shrink = coordinates_shrink
        # 标准图纸Id
        self.drawing_id = drawing_id
        self.floor_info_shrink = floor_info_shrink
        # 归类id
        self.id = id
        # 选择方式
        self.selection_mode = selection_mode
        # 子类型
        self.sub_type = sub_type
        # 后缀
        self.suffix = suffix
        self.task_id = task_id
        # 类型
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.building_no is not None:
            result['BuildingNo'] = self.building_no
        if self.coordinates_shrink is not None:
            result['Coordinates'] = self.coordinates_shrink
        if self.drawing_id is not None:
            result['DrawingId'] = self.drawing_id
        if self.floor_info_shrink is not None:
            result['FloorInfo'] = self.floor_info_shrink
        if self.id is not None:
            result['Id'] = self.id
        if self.selection_mode is not None:
            result['SelectionMode'] = self.selection_mode
        if self.sub_type is not None:
            result['SubType'] = self.sub_type
        if self.suffix is not None:
            result['Suffix'] = self.suffix
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BuildingNo') is not None:
            self.building_no = m.get('BuildingNo')
        if m.get('Coordinates') is not None:
            self.coordinates_shrink = m.get('Coordinates')
        if m.get('DrawingId') is not None:
            self.drawing_id = m.get('DrawingId')
        if m.get('FloorInfo') is not None:
            self.floor_info_shrink = m.get('FloorInfo')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('SelectionMode') is not None:
            self.selection_mode = m.get('SelectionMode')
        if m.get('SubType') is not None:
            self.sub_type = m.get('SubType')
        if m.get('Suffix') is not None:
            self.suffix = m.get('Suffix')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class UpdateBimFragmentResponseBodyDatas(TeaModel):
    def __init__(
        self,
        drawing_id: int = None,
        drawing_mode: str = None,
        id: int = None,
    ):
        self.drawing_id = drawing_id
        self.drawing_mode = drawing_mode
        self.id = id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.drawing_id is not None:
            result['DrawingId'] = self.drawing_id
        if self.drawing_mode is not None:
            result['DrawingMode'] = self.drawing_mode
        if self.id is not None:
            result['Id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DrawingId') is not None:
            self.drawing_id = m.get('DrawingId')
        if m.get('DrawingMode') is not None:
            self.drawing_mode = m.get('DrawingMode')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        return self


class UpdateBimFragmentResponseBody(TeaModel):
    def __init__(
        self,
        datas: UpdateBimFragmentResponseBodyDatas = None,
        err_code: int = None,
        err_msg: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.datas = datas
        self.err_code = err_code
        self.err_msg = err_msg
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.datas:
            self.datas.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.datas is not None:
            result['Datas'] = self.datas.to_map()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_msg is not None:
            result['ErrMsg'] = self.err_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Datas') is not None:
            temp_model = UpdateBimFragmentResponseBodyDatas()
            self.datas = temp_model.from_map(m['Datas'])
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMsg') is not None:
            self.err_msg = m.get('ErrMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class UpdateBimFragmentResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: UpdateBimFragmentResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = UpdateBimFragmentResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateBimModelConfigRequest(TeaModel):
    def __init__(
        self,
        beam_height: int = None,
        beam_mode: int = None,
        beam_offset: int = None,
        door_height: int = None,
        door_offset: int = None,
        id: int = None,
        room_mode: int = None,
        slab_mode: int = None,
        slab_thickness: int = None,
        task_id: int = None,
        window_height: int = None,
        window_offset: int = None,
    ):
        # 梁高
        self.beam_height = beam_height
        # 梁模式
        self.beam_mode = beam_mode
        # 梁偏移
        self.beam_offset = beam_offset
        # 门高
        self.door_height = door_height
        # 门偏移
        self.door_offset = door_offset
        self.id = id
        # 房间模式
        self.room_mode = room_mode
        # 板模式
        self.slab_mode = slab_mode
        # 板厚度
        self.slab_thickness = slab_thickness
        # 任务id
        self.task_id = task_id
        # 窗高
        self.window_height = window_height
        # 窗偏移
        self.window_offset = window_offset

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.beam_height is not None:
            result['BeamHeight'] = self.beam_height
        if self.beam_mode is not None:
            result['BeamMode'] = self.beam_mode
        if self.beam_offset is not None:
            result['BeamOffset'] = self.beam_offset
        if self.door_height is not None:
            result['DoorHeight'] = self.door_height
        if self.door_offset is not None:
            result['DoorOffset'] = self.door_offset
        if self.id is not None:
            result['Id'] = self.id
        if self.room_mode is not None:
            result['RoomMode'] = self.room_mode
        if self.slab_mode is not None:
            result['SlabMode'] = self.slab_mode
        if self.slab_thickness is not None:
            result['SlabThickness'] = self.slab_thickness
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.window_height is not None:
            result['WindowHeight'] = self.window_height
        if self.window_offset is not None:
            result['WindowOffset'] = self.window_offset
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BeamHeight') is not None:
            self.beam_height = m.get('BeamHeight')
        if m.get('BeamMode') is not None:
            self.beam_mode = m.get('BeamMode')
        if m.get('BeamOffset') is not None:
            self.beam_offset = m.get('BeamOffset')
        if m.get('DoorHeight') is not None:
            self.door_height = m.get('DoorHeight')
        if m.get('DoorOffset') is not None:
            self.door_offset = m.get('DoorOffset')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('RoomMode') is not None:
            self.room_mode = m.get('RoomMode')
        if m.get('SlabMode') is not None:
            self.slab_mode = m.get('SlabMode')
        if m.get('SlabThickness') is not None:
            self.slab_thickness = m.get('SlabThickness')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('WindowHeight') is not None:
            self.window_height = m.get('WindowHeight')
        if m.get('WindowOffset') is not None:
            self.window_offset = m.get('WindowOffset')
        return self


class UpdateBimModelConfigResponseBody(TeaModel):
    def __init__(
        self,
        datas: int = None,
        err_code: int = None,
        err_msg: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.datas = datas
        self.err_code = err_code
        self.err_msg = err_msg
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.datas is not None:
            result['Datas'] = self.datas
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_msg is not None:
            result['ErrMsg'] = self.err_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Datas') is not None:
            self.datas = m.get('Datas')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMsg') is not None:
            self.err_msg = m.get('ErrMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class UpdateBimModelConfigResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: UpdateBimModelConfigResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = UpdateBimModelConfigResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateBimProjectDrawFilesRequestArchitectureFiles(TeaModel):
    def __init__(
        self,
        name: str = None,
        path: str = None,
    ):
        self.name = name
        self.path = path

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.name is not None:
            result['Name'] = self.name
        if self.path is not None:
            result['Path'] = self.path
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Path') is not None:
            self.path = m.get('Path')
        return self


class UpdateBimProjectDrawFilesRequestStructureFiles(TeaModel):
    def __init__(
        self,
        name: str = None,
        path: str = None,
    ):
        self.name = name
        self.path = path

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.name is not None:
            result['Name'] = self.name
        if self.path is not None:
            result['Path'] = self.path
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Path') is not None:
            self.path = m.get('Path')
        return self


class UpdateBimProjectDrawFilesRequest(TeaModel):
    def __init__(
        self,
        architecture_files: List[UpdateBimProjectDrawFilesRequestArchitectureFiles] = None,
        structure_files: List[UpdateBimProjectDrawFilesRequestStructureFiles] = None,
        task_id: int = None,
    ):
        # 建筑
        self.architecture_files = architecture_files
        # 结构
        self.structure_files = structure_files
        # 任务id
        self.task_id = task_id

    def validate(self):
        if self.architecture_files:
            for k in self.architecture_files:
                if k:
                    k.validate()
        if self.structure_files:
            for k in self.structure_files:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['ArchitectureFiles'] = []
        if self.architecture_files is not None:
            for k in self.architecture_files:
                result['ArchitectureFiles'].append(k.to_map() if k else None)
        result['StructureFiles'] = []
        if self.structure_files is not None:
            for k in self.structure_files:
                result['StructureFiles'].append(k.to_map() if k else None)
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.architecture_files = []
        if m.get('ArchitectureFiles') is not None:
            for k in m.get('ArchitectureFiles'):
                temp_model = UpdateBimProjectDrawFilesRequestArchitectureFiles()
                self.architecture_files.append(temp_model.from_map(k))
        self.structure_files = []
        if m.get('StructureFiles') is not None:
            for k in m.get('StructureFiles'):
                temp_model = UpdateBimProjectDrawFilesRequestStructureFiles()
                self.structure_files.append(temp_model.from_map(k))
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class UpdateBimProjectDrawFilesShrinkRequest(TeaModel):
    def __init__(
        self,
        architecture_files_shrink: str = None,
        structure_files_shrink: str = None,
        task_id: int = None,
    ):
        # 建筑
        self.architecture_files_shrink = architecture_files_shrink
        # 结构
        self.structure_files_shrink = structure_files_shrink
        # 任务id
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.architecture_files_shrink is not None:
            result['ArchitectureFiles'] = self.architecture_files_shrink
        if self.structure_files_shrink is not None:
            result['StructureFiles'] = self.structure_files_shrink
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ArchitectureFiles') is not None:
            self.architecture_files_shrink = m.get('ArchitectureFiles')
        if m.get('StructureFiles') is not None:
            self.structure_files_shrink = m.get('StructureFiles')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class UpdateBimProjectDrawFilesResponseBody(TeaModel):
    def __init__(
        self,
        datas: int = None,
        err_code: int = None,
        err_msg: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.datas = datas
        self.err_code = err_code
        self.err_msg = err_msg
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.datas is not None:
            result['Datas'] = self.datas
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_msg is not None:
            result['ErrMsg'] = self.err_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Datas') is not None:
            self.datas = m.get('Datas')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMsg') is not None:
            self.err_msg = m.get('ErrMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class UpdateBimProjectDrawFilesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: UpdateBimProjectDrawFilesResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = UpdateBimProjectDrawFilesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateBimStandardDwInfoRequest(TeaModel):
    def __init__(
        self,
        data: List[Dict[str, Any]] = None,
        keys: List[str] = None,
        standard_id: int = None,
        task_id: int = None,
    ):
        self.data = data
        self.keys = keys
        self.standard_id = standard_id
        # 任务id
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data
        if self.keys is not None:
            result['Keys'] = self.keys
        if self.standard_id is not None:
            result['StandardId'] = self.standard_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Keys') is not None:
            self.keys = m.get('Keys')
        if m.get('StandardId') is not None:
            self.standard_id = m.get('StandardId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class UpdateBimStandardDwInfoShrinkRequest(TeaModel):
    def __init__(
        self,
        data_shrink: str = None,
        keys_shrink: str = None,
        standard_id: int = None,
        task_id: int = None,
    ):
        self.data_shrink = data_shrink
        self.keys_shrink = keys_shrink
        self.standard_id = standard_id
        # 任务id
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data_shrink is not None:
            result['Data'] = self.data_shrink
        if self.keys_shrink is not None:
            result['Keys'] = self.keys_shrink
        if self.standard_id is not None:
            result['StandardId'] = self.standard_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Data') is not None:
            self.data_shrink = m.get('Data')
        if m.get('Keys') is not None:
            self.keys_shrink = m.get('Keys')
        if m.get('StandardId') is not None:
            self.standard_id = m.get('StandardId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class UpdateBimStandardDwInfoResponseBody(TeaModel):
    def __init__(
        self,
        datas: int = None,
        err_code: int = None,
        err_msg: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.datas = datas
        self.err_code = err_code
        self.err_msg = err_msg
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.datas is not None:
            result['Datas'] = self.datas
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_msg is not None:
            result['ErrMsg'] = self.err_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Datas') is not None:
            self.datas = m.get('Datas')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMsg') is not None:
            self.err_msg = m.get('ErrMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class UpdateBimStandardDwInfoResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: UpdateBimStandardDwInfoResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = UpdateBimStandardDwInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateBimStandardElevationRequest(TeaModel):
    def __init__(
        self,
        floors: List[Dict[str, Any]] = None,
        mode: str = None,
        standard_id: int = None,
        task_id: int = None,
        terrace_height: float = None,
    ):
        self.floors = floors
        self.mode = mode
        self.standard_id = standard_id
        # 任务id
        self.task_id = task_id
        self.terrace_height = terrace_height

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.floors is not None:
            result['Floors'] = self.floors
        if self.mode is not None:
            result['Mode'] = self.mode
        if self.standard_id is not None:
            result['StandardId'] = self.standard_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.terrace_height is not None:
            result['TerraceHeight'] = self.terrace_height
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Floors') is not None:
            self.floors = m.get('Floors')
        if m.get('Mode') is not None:
            self.mode = m.get('Mode')
        if m.get('StandardId') is not None:
            self.standard_id = m.get('StandardId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('TerraceHeight') is not None:
            self.terrace_height = m.get('TerraceHeight')
        return self


class UpdateBimStandardElevationShrinkRequest(TeaModel):
    def __init__(
        self,
        floors_shrink: str = None,
        mode: str = None,
        standard_id: int = None,
        task_id: int = None,
        terrace_height: float = None,
    ):
        self.floors_shrink = floors_shrink
        self.mode = mode
        self.standard_id = standard_id
        # 任务id
        self.task_id = task_id
        self.terrace_height = terrace_height

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.floors_shrink is not None:
            result['Floors'] = self.floors_shrink
        if self.mode is not None:
            result['Mode'] = self.mode
        if self.standard_id is not None:
            result['StandardId'] = self.standard_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.terrace_height is not None:
            result['TerraceHeight'] = self.terrace_height
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Floors') is not None:
            self.floors_shrink = m.get('Floors')
        if m.get('Mode') is not None:
            self.mode = m.get('Mode')
        if m.get('StandardId') is not None:
            self.standard_id = m.get('StandardId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('TerraceHeight') is not None:
            self.terrace_height = m.get('TerraceHeight')
        return self


class UpdateBimStandardElevationResponseBody(TeaModel):
    def __init__(
        self,
        datas: int = None,
        err_code: int = None,
        err_msg: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.datas = datas
        self.err_code = err_code
        self.err_msg = err_msg
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.datas is not None:
            result['Datas'] = self.datas
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_msg is not None:
            result['ErrMsg'] = self.err_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Datas') is not None:
            self.datas = m.get('Datas')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMsg') is not None:
            self.err_msg = m.get('ErrMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class UpdateBimStandardElevationResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: UpdateBimStandardElevationResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = UpdateBimStandardElevationResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateBimStandardSlabInfoRequestLegends(TeaModel):
    def __init__(
        self,
        elevation_height: str = None,
        elevation_mode: str = None,
        elevation_operator: str = None,
        pattern_name: str = None,
        picture: str = None,
        thickness: int = None,
    ):
        self.elevation_height = elevation_height
        self.elevation_mode = elevation_mode
        self.elevation_operator = elevation_operator
        self.pattern_name = pattern_name
        self.picture = picture
        self.thickness = thickness

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.elevation_height is not None:
            result['ElevationHeight'] = self.elevation_height
        if self.elevation_mode is not None:
            result['ElevationMode'] = self.elevation_mode
        if self.elevation_operator is not None:
            result['ElevationOperator'] = self.elevation_operator
        if self.pattern_name is not None:
            result['PatternName'] = self.pattern_name
        if self.picture is not None:
            result['Picture'] = self.picture
        if self.thickness is not None:
            result['Thickness'] = self.thickness
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ElevationHeight') is not None:
            self.elevation_height = m.get('ElevationHeight')
        if m.get('ElevationMode') is not None:
            self.elevation_mode = m.get('ElevationMode')
        if m.get('ElevationOperator') is not None:
            self.elevation_operator = m.get('ElevationOperator')
        if m.get('PatternName') is not None:
            self.pattern_name = m.get('PatternName')
        if m.get('Picture') is not None:
            self.picture = m.get('Picture')
        if m.get('Thickness') is not None:
            self.thickness = m.get('Thickness')
        return self


class UpdateBimStandardSlabInfoRequest(TeaModel):
    def __init__(
        self,
        legends: List[UpdateBimStandardSlabInfoRequestLegends] = None,
        root_dir: str = None,
        standard_id: int = None,
        task_id: int = None,
        thickness: int = None,
    ):
        self.legends = legends
        self.root_dir = root_dir
        self.standard_id = standard_id
        # 任务id
        self.task_id = task_id
        self.thickness = thickness

    def validate(self):
        if self.legends:
            for k in self.legends:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Legends'] = []
        if self.legends is not None:
            for k in self.legends:
                result['Legends'].append(k.to_map() if k else None)
        if self.root_dir is not None:
            result['RootDir'] = self.root_dir
        if self.standard_id is not None:
            result['StandardId'] = self.standard_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.thickness is not None:
            result['Thickness'] = self.thickness
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.legends = []
        if m.get('Legends') is not None:
            for k in m.get('Legends'):
                temp_model = UpdateBimStandardSlabInfoRequestLegends()
                self.legends.append(temp_model.from_map(k))
        if m.get('RootDir') is not None:
            self.root_dir = m.get('RootDir')
        if m.get('StandardId') is not None:
            self.standard_id = m.get('StandardId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('Thickness') is not None:
            self.thickness = m.get('Thickness')
        return self


class UpdateBimStandardSlabInfoShrinkRequest(TeaModel):
    def __init__(
        self,
        legends_shrink: str = None,
        root_dir: str = None,
        standard_id: int = None,
        task_id: int = None,
        thickness: int = None,
    ):
        self.legends_shrink = legends_shrink
        self.root_dir = root_dir
        self.standard_id = standard_id
        # 任务id
        self.task_id = task_id
        self.thickness = thickness

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.legends_shrink is not None:
            result['Legends'] = self.legends_shrink
        if self.root_dir is not None:
            result['RootDir'] = self.root_dir
        if self.standard_id is not None:
            result['StandardId'] = self.standard_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.thickness is not None:
            result['Thickness'] = self.thickness
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Legends') is not None:
            self.legends_shrink = m.get('Legends')
        if m.get('RootDir') is not None:
            self.root_dir = m.get('RootDir')
        if m.get('StandardId') is not None:
            self.standard_id = m.get('StandardId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('Thickness') is not None:
            self.thickness = m.get('Thickness')
        return self


class UpdateBimStandardSlabInfoResponseBody(TeaModel):
    def __init__(
        self,
        datas: int = None,
        err_code: int = None,
        err_msg: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.datas = datas
        self.err_code = err_code
        self.err_msg = err_msg
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.datas is not None:
            result['Datas'] = self.datas
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_msg is not None:
            result['ErrMsg'] = self.err_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Datas') is not None:
            self.datas = m.get('Datas')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMsg') is not None:
            self.err_msg = m.get('ErrMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class UpdateBimStandardSlabInfoResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: UpdateBimStandardSlabInfoResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = UpdateBimStandardSlabInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateNoteRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        params: str = None,
        project_id: int = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.params = params
        self.project_id = project_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.params is not None:
            result['Params'] = self.params
        if self.project_id is not None:
            result['ProjectId'] = self.project_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('Params') is not None:
            self.params = m.get('Params')
        if m.get('ProjectId') is not None:
            self.project_id = m.get('ProjectId')
        return self


class UpdateNoteResponseBody(TeaModel):
    def __init__(
        self,
        description: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        id: int = None,
        name: str = None,
        request_id: str = None,
    ):
        self.description = description
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.id = id
        self.name = name
        # Id of the request
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        if self.name is not None:
            result['Name'] = self.name
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class UpdateNoteResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: UpdateNoteResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = UpdateNoteResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateUserRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        params: str = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.params = params

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.params is not None:
            result['Params'] = self.params
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('Params') is not None:
            self.params = m.get('Params')
        return self


class UpdateUserResponseBody(TeaModel):
    def __init__(
        self,
        company_id: int = None,
        company_name: str = None,
        email: str = None,
        ext_1: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        id: int = None,
        name: str = None,
        phone: str = None,
        request_id: str = None,
        status: str = None,
    ):
        self.company_id = company_id
        self.company_name = company_name
        self.email = email
        self.ext_1 = ext_1
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.id = id
        self.name = name
        self.phone = phone
        # Id of the request
        self.request_id = request_id
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.company_id is not None:
            result['CompanyId'] = self.company_id
        if self.company_name is not None:
            result['CompanyName'] = self.company_name
        if self.email is not None:
            result['Email'] = self.email
        if self.ext_1 is not None:
            result['Ext1'] = self.ext_1
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        if self.name is not None:
            result['Name'] = self.name
        if self.phone is not None:
            result['Phone'] = self.phone
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CompanyId') is not None:
            self.company_id = m.get('CompanyId')
        if m.get('CompanyName') is not None:
            self.company_name = m.get('CompanyName')
        if m.get('Email') is not None:
            self.email = m.get('Email')
        if m.get('Ext1') is not None:
            self.ext_1 = m.get('Ext1')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Phone') is not None:
            self.phone = m.get('Phone')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class UpdateUserResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: UpdateUserResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = UpdateUserResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UserFindAllRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        params: str = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.params = params

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.params is not None:
            result['Params'] = self.params
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('Params') is not None:
            self.params = m.get('Params')
        return self


class UserFindAllResponseBodyContentRoles(TeaModel):
    def __init__(
        self,
        code: str = None,
        company_id: int = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        id: int = None,
        name: str = None,
        parent_id: int = None,
        status: str = None,
        type: str = None,
    ):
        self.code = code
        self.company_id = company_id
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.id = id
        self.name = name
        self.parent_id = parent_id
        self.status = status
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.company_id is not None:
            result['CompanyId'] = self.company_id
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        if self.name is not None:
            result['Name'] = self.name
        if self.parent_id is not None:
            result['ParentId'] = self.parent_id
        if self.status is not None:
            result['Status'] = self.status
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('CompanyId') is not None:
            self.company_id = m.get('CompanyId')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('ParentId') is not None:
            self.parent_id = m.get('ParentId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class UserFindAllResponseBodyContent(TeaModel):
    def __init__(
        self,
        aliyun_account: str = None,
        aliyun_uid: str = None,
        aliyun_uid_type: str = None,
        company_id: int = None,
        company_name: str = None,
        email: str = None,
        ext_1: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        id: int = None,
        name: str = None,
        parent_uid: str = None,
        phone: str = None,
        roles: List[UserFindAllResponseBodyContentRoles] = None,
        status: str = None,
    ):
        self.aliyun_account = aliyun_account
        self.aliyun_uid = aliyun_uid
        self.aliyun_uid_type = aliyun_uid_type
        self.company_id = company_id
        self.company_name = company_name
        self.email = email
        self.ext_1 = ext_1
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.id = id
        self.name = name
        self.parent_uid = parent_uid
        self.phone = phone
        self.roles = roles
        self.status = status

    def validate(self):
        if self.roles:
            for k in self.roles:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_account is not None:
            result['AliyunAccount'] = self.aliyun_account
        if self.aliyun_uid is not None:
            result['AliyunUid'] = self.aliyun_uid
        if self.aliyun_uid_type is not None:
            result['AliyunUidType'] = self.aliyun_uid_type
        if self.company_id is not None:
            result['CompanyId'] = self.company_id
        if self.company_name is not None:
            result['CompanyName'] = self.company_name
        if self.email is not None:
            result['Email'] = self.email
        if self.ext_1 is not None:
            result['Ext1'] = self.ext_1
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        if self.name is not None:
            result['Name'] = self.name
        if self.parent_uid is not None:
            result['ParentUid'] = self.parent_uid
        if self.phone is not None:
            result['Phone'] = self.phone
        result['Roles'] = []
        if self.roles is not None:
            for k in self.roles:
                result['Roles'].append(k.to_map() if k else None)
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunAccount') is not None:
            self.aliyun_account = m.get('AliyunAccount')
        if m.get('AliyunUid') is not None:
            self.aliyun_uid = m.get('AliyunUid')
        if m.get('AliyunUidType') is not None:
            self.aliyun_uid_type = m.get('AliyunUidType')
        if m.get('CompanyId') is not None:
            self.company_id = m.get('CompanyId')
        if m.get('CompanyName') is not None:
            self.company_name = m.get('CompanyName')
        if m.get('Email') is not None:
            self.email = m.get('Email')
        if m.get('Ext1') is not None:
            self.ext_1 = m.get('Ext1')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('ParentUid') is not None:
            self.parent_uid = m.get('ParentUid')
        if m.get('Phone') is not None:
            self.phone = m.get('Phone')
        self.roles = []
        if m.get('Roles') is not None:
            for k in m.get('Roles'):
                temp_model = UserFindAllResponseBodyContentRoles()
                self.roles.append(temp_model.from_map(k))
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class UserFindAllResponseBodyPageableSort(TeaModel):
    def __init__(
        self,
        empty: bool = None,
        sorted: bool = None,
        unsorted: bool = None,
    ):
        self.empty = empty
        self.sorted = sorted
        self.unsorted = unsorted

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.empty is not None:
            result['Empty'] = self.empty
        if self.sorted is not None:
            result['Sorted'] = self.sorted
        if self.unsorted is not None:
            result['Unsorted'] = self.unsorted
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Empty') is not None:
            self.empty = m.get('Empty')
        if m.get('Sorted') is not None:
            self.sorted = m.get('Sorted')
        if m.get('Unsorted') is not None:
            self.unsorted = m.get('Unsorted')
        return self


class UserFindAllResponseBodyPageable(TeaModel):
    def __init__(
        self,
        offset: int = None,
        page_number: int = None,
        page_size: int = None,
        paged: bool = None,
        sort: UserFindAllResponseBodyPageableSort = None,
        unpaged: bool = None,
    ):
        self.offset = offset
        self.page_number = page_number
        self.page_size = page_size
        self.paged = paged
        self.sort = sort
        self.unpaged = unpaged

    def validate(self):
        if self.sort:
            self.sort.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.offset is not None:
            result['Offset'] = self.offset
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.paged is not None:
            result['Paged'] = self.paged
        if self.sort is not None:
            result['Sort'] = self.sort.to_map()
        if self.unpaged is not None:
            result['Unpaged'] = self.unpaged
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Offset') is not None:
            self.offset = m.get('Offset')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('Paged') is not None:
            self.paged = m.get('Paged')
        if m.get('Sort') is not None:
            temp_model = UserFindAllResponseBodyPageableSort()
            self.sort = temp_model.from_map(m['Sort'])
        if m.get('Unpaged') is not None:
            self.unpaged = m.get('Unpaged')
        return self


class UserFindAllResponseBodySort(TeaModel):
    def __init__(
        self,
        empty: bool = None,
        sorted: bool = None,
        unsorted: bool = None,
    ):
        self.empty = empty
        self.sorted = sorted
        self.unsorted = unsorted

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.empty is not None:
            result['Empty'] = self.empty
        if self.sorted is not None:
            result['Sorted'] = self.sorted
        if self.unsorted is not None:
            result['Unsorted'] = self.unsorted
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Empty') is not None:
            self.empty = m.get('Empty')
        if m.get('Sorted') is not None:
            self.sorted = m.get('Sorted')
        if m.get('Unsorted') is not None:
            self.unsorted = m.get('Unsorted')
        return self


class UserFindAllResponseBody(TeaModel):
    def __init__(
        self,
        content: List[UserFindAllResponseBodyContent] = None,
        empty: bool = None,
        first: bool = None,
        last: bool = None,
        number: int = None,
        number_of_elements: int = None,
        pageable: UserFindAllResponseBodyPageable = None,
        request_id: str = None,
        size: int = None,
        sort: UserFindAllResponseBodySort = None,
        total_elements: int = None,
        total_pages: int = None,
    ):
        self.content = content
        self.empty = empty
        self.first = first
        self.last = last
        self.number = number
        self.number_of_elements = number_of_elements
        self.pageable = pageable
        # Id of the request
        self.request_id = request_id
        self.size = size
        self.sort = sort
        self.total_elements = total_elements
        self.total_pages = total_pages

    def validate(self):
        if self.content:
            for k in self.content:
                if k:
                    k.validate()
        if self.pageable:
            self.pageable.validate()
        if self.sort:
            self.sort.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Content'] = []
        if self.content is not None:
            for k in self.content:
                result['Content'].append(k.to_map() if k else None)
        if self.empty is not None:
            result['Empty'] = self.empty
        if self.first is not None:
            result['First'] = self.first
        if self.last is not None:
            result['Last'] = self.last
        if self.number is not None:
            result['Number'] = self.number
        if self.number_of_elements is not None:
            result['NumberOfElements'] = self.number_of_elements
        if self.pageable is not None:
            result['Pageable'] = self.pageable.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.size is not None:
            result['Size'] = self.size
        if self.sort is not None:
            result['Sort'] = self.sort.to_map()
        if self.total_elements is not None:
            result['TotalElements'] = self.total_elements
        if self.total_pages is not None:
            result['TotalPages'] = self.total_pages
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.content = []
        if m.get('Content') is not None:
            for k in m.get('Content'):
                temp_model = UserFindAllResponseBodyContent()
                self.content.append(temp_model.from_map(k))
        if m.get('Empty') is not None:
            self.empty = m.get('Empty')
        if m.get('First') is not None:
            self.first = m.get('First')
        if m.get('Last') is not None:
            self.last = m.get('Last')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('NumberOfElements') is not None:
            self.number_of_elements = m.get('NumberOfElements')
        if m.get('Pageable') is not None:
            temp_model = UserFindAllResponseBodyPageable()
            self.pageable = temp_model.from_map(m['Pageable'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Size') is not None:
            self.size = m.get('Size')
        if m.get('Sort') is not None:
            temp_model = UserFindAllResponseBodySort()
            self.sort = temp_model.from_map(m['Sort'])
        if m.get('TotalElements') is not None:
            self.total_elements = m.get('TotalElements')
        if m.get('TotalPages') is not None:
            self.total_pages = m.get('TotalPages')
        return self


class UserFindAllResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: UserFindAllResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = UserFindAllResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UserFindByRolesRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        role_names: str = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.role_names = role_names

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.role_names is not None:
            result['RoleNames'] = self.role_names
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('RoleNames') is not None:
            self.role_names = m.get('RoleNames')
        return self


class UserFindByRolesResponseBodyData(TeaModel):
    def __init__(
        self,
        email: str = None,
        ext_1: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        id: int = None,
        name: str = None,
        phone: str = None,
        status: str = None,
    ):
        self.email = email
        self.ext_1 = ext_1
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.id = id
        self.name = name
        self.phone = phone
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.email is not None:
            result['Email'] = self.email
        if self.ext_1 is not None:
            result['Ext1'] = self.ext_1
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        if self.name is not None:
            result['Name'] = self.name
        if self.phone is not None:
            result['Phone'] = self.phone
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Email') is not None:
            self.email = m.get('Email')
        if m.get('Ext1') is not None:
            self.ext_1 = m.get('Ext1')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Phone') is not None:
            self.phone = m.get('Phone')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class UserFindByRolesResponseBody(TeaModel):
    def __init__(
        self,
        data: List[UserFindByRolesResponseBodyData] = None,
        request_id: str = None,
    ):
        self.data = data
        self.request_id = request_id

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Data'] = []
        if self.data is not None:
            for k in self.data:
                result['Data'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.data = []
        if m.get('Data') is not None:
            for k in m.get('Data'):
                temp_model = UserFindByRolesResponseBodyData()
                self.data.append(temp_model.from_map(k))
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class UserFindByRolesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: UserFindByRolesResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = UserFindByRolesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UserGetOneRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        user_id: int = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class UserGetOneResponseBodyRoles(TeaModel):
    def __init__(
        self,
        code: str = None,
        company_id: int = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        id: int = None,
        name: str = None,
        parent_id: int = None,
        status: str = None,
        type: str = None,
    ):
        self.code = code
        self.company_id = company_id
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.id = id
        self.name = name
        self.parent_id = parent_id
        self.status = status
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.company_id is not None:
            result['CompanyId'] = self.company_id
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        if self.name is not None:
            result['Name'] = self.name
        if self.parent_id is not None:
            result['ParentId'] = self.parent_id
        if self.status is not None:
            result['Status'] = self.status
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('CompanyId') is not None:
            self.company_id = m.get('CompanyId')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('ParentId') is not None:
            self.parent_id = m.get('ParentId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class UserGetOneResponseBody(TeaModel):
    def __init__(
        self,
        aliyun_account: str = None,
        aliyun_uid: str = None,
        aliyun_uid_type: str = None,
        company_id: int = None,
        company_name: str = None,
        email: str = None,
        ext_1: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        id: int = None,
        name: str = None,
        parent_uid: str = None,
        phone: str = None,
        request_id: str = None,
        roles: List[UserGetOneResponseBodyRoles] = None,
        status: str = None,
    ):
        self.aliyun_account = aliyun_account
        self.aliyun_uid = aliyun_uid
        self.aliyun_uid_type = aliyun_uid_type
        self.company_id = company_id
        self.company_name = company_name
        self.email = email
        self.ext_1 = ext_1
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.id = id
        self.name = name
        self.parent_uid = parent_uid
        self.phone = phone
        # Id of the request
        self.request_id = request_id
        self.roles = roles
        self.status = status

    def validate(self):
        if self.roles:
            for k in self.roles:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_account is not None:
            result['AliyunAccount'] = self.aliyun_account
        if self.aliyun_uid is not None:
            result['AliyunUid'] = self.aliyun_uid
        if self.aliyun_uid_type is not None:
            result['AliyunUidType'] = self.aliyun_uid_type
        if self.company_id is not None:
            result['CompanyId'] = self.company_id
        if self.company_name is not None:
            result['CompanyName'] = self.company_name
        if self.email is not None:
            result['Email'] = self.email
        if self.ext_1 is not None:
            result['Ext1'] = self.ext_1
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        if self.name is not None:
            result['Name'] = self.name
        if self.parent_uid is not None:
            result['ParentUid'] = self.parent_uid
        if self.phone is not None:
            result['Phone'] = self.phone
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Roles'] = []
        if self.roles is not None:
            for k in self.roles:
                result['Roles'].append(k.to_map() if k else None)
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunAccount') is not None:
            self.aliyun_account = m.get('AliyunAccount')
        if m.get('AliyunUid') is not None:
            self.aliyun_uid = m.get('AliyunUid')
        if m.get('AliyunUidType') is not None:
            self.aliyun_uid_type = m.get('AliyunUidType')
        if m.get('CompanyId') is not None:
            self.company_id = m.get('CompanyId')
        if m.get('CompanyName') is not None:
            self.company_name = m.get('CompanyName')
        if m.get('Email') is not None:
            self.email = m.get('Email')
        if m.get('Ext1') is not None:
            self.ext_1 = m.get('Ext1')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('ParentUid') is not None:
            self.parent_uid = m.get('ParentUid')
        if m.get('Phone') is not None:
            self.phone = m.get('Phone')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.roles = []
        if m.get('Roles') is not None:
            for k in m.get('Roles'):
                temp_model = UserGetOneResponseBodyRoles()
                self.roles.append(temp_model.from_map(k))
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class UserGetOneResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: UserGetOneResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = UserGetOneResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UserListMenusRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
    ):
        self.aliyun_jwt = aliyun_jwt

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        return self


class UserListMenusResponseBodyData(TeaModel):
    def __init__(
        self,
        gmt_create: str = None,
        gmt_modified: str = None,
        id: int = None,
        name: str = None,
        status: str = None,
        url: str = None,
    ):
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.id = id
        self.name = name
        self.status = status
        self.url = url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        if self.name is not None:
            result['Name'] = self.name
        if self.status is not None:
            result['Status'] = self.status
        if self.url is not None:
            result['Url'] = self.url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Url') is not None:
            self.url = m.get('Url')
        return self


class UserListMenusResponseBody(TeaModel):
    def __init__(
        self,
        data: List[UserListMenusResponseBodyData] = None,
        request_id: str = None,
    ):
        self.data = data
        self.request_id = request_id

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Data'] = []
        if self.data is not None:
            for k in self.data:
                result['Data'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.data = []
        if m.get('Data') is not None:
            for k in m.get('Data'):
                temp_model = UserListMenusResponseBodyData()
                self.data.append(temp_model.from_map(k))
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class UserListMenusResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: UserListMenusResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = UserListMenusResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UserListPermissionsRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
    ):
        self.aliyun_jwt = aliyun_jwt

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        return self


class UserListPermissionsResponseBodyData(TeaModel):
    def __init__(
        self,
        company_id: int = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        id: int = None,
        name: str = None,
        status: str = None,
        type: str = None,
    ):
        self.company_id = company_id
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.id = id
        self.name = name
        self.status = status
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.company_id is not None:
            result['CompanyId'] = self.company_id
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        if self.name is not None:
            result['Name'] = self.name
        if self.status is not None:
            result['Status'] = self.status
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CompanyId') is not None:
            self.company_id = m.get('CompanyId')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class UserListPermissionsResponseBody(TeaModel):
    def __init__(
        self,
        data: List[UserListPermissionsResponseBodyData] = None,
        request_id: str = None,
    ):
        self.data = data
        self.request_id = request_id

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Data'] = []
        if self.data is not None:
            for k in self.data:
                result['Data'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.data = []
        if m.get('Data') is not None:
            for k in m.get('Data'):
                temp_model = UserListPermissionsResponseBodyData()
                self.data.append(temp_model.from_map(k))
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class UserListPermissionsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: UserListPermissionsResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = UserListPermissionsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UserListRolesRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
    ):
        self.aliyun_jwt = aliyun_jwt

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        return self


class UserListRolesResponseBodyData(TeaModel):
    def __init__(
        self,
        code: str = None,
        company_id: int = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        id: int = None,
        name: str = None,
        parent_id: int = None,
        status: str = None,
        type: str = None,
    ):
        self.code = code
        self.company_id = company_id
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.id = id
        self.name = name
        self.parent_id = parent_id
        self.status = status
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.company_id is not None:
            result['CompanyId'] = self.company_id
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        if self.name is not None:
            result['Name'] = self.name
        if self.parent_id is not None:
            result['ParentId'] = self.parent_id
        if self.status is not None:
            result['Status'] = self.status
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('CompanyId') is not None:
            self.company_id = m.get('CompanyId')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('ParentId') is not None:
            self.parent_id = m.get('ParentId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class UserListRolesResponseBody(TeaModel):
    def __init__(
        self,
        data: List[UserListRolesResponseBodyData] = None,
        request_id: str = None,
    ):
        self.data = data
        self.request_id = request_id

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Data'] = []
        if self.data is not None:
            for k in self.data:
                result['Data'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.data = []
        if m.get('Data') is not None:
            for k in m.get('Data'):
                temp_model = UserListRolesResponseBodyData()
                self.data.append(temp_model.from_map(k))
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class UserListRolesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: UserListRolesResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = UserListRolesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UserListSubRolesRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
    ):
        self.aliyun_jwt = aliyun_jwt

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        return self


class UserListSubRolesResponseBodyData(TeaModel):
    def __init__(
        self,
        code: str = None,
        company_id: int = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        id: int = None,
        name: str = None,
        parent_id: int = None,
        status: str = None,
        type: str = None,
    ):
        self.code = code
        self.company_id = company_id
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.id = id
        self.name = name
        self.parent_id = parent_id
        self.status = status
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.company_id is not None:
            result['CompanyId'] = self.company_id
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        if self.name is not None:
            result['Name'] = self.name
        if self.parent_id is not None:
            result['ParentId'] = self.parent_id
        if self.status is not None:
            result['Status'] = self.status
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('CompanyId') is not None:
            self.company_id = m.get('CompanyId')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('ParentId') is not None:
            self.parent_id = m.get('ParentId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class UserListSubRolesResponseBody(TeaModel):
    def __init__(
        self,
        data: List[UserListSubRolesResponseBodyData] = None,
        request_id: str = None,
    ):
        self.data = data
        # Id of the request
        self.request_id = request_id

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Data'] = []
        if self.data is not None:
            for k in self.data:
                result['Data'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.data = []
        if m.get('Data') is not None:
            for k in m.get('Data'):
                temp_model = UserListSubRolesResponseBodyData()
                self.data.append(temp_model.from_map(k))
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class UserListSubRolesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: UserListSubRolesResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = UserListSubRolesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ValidAliyunUidRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        aliyun_uid: str = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.aliyun_uid = aliyun_uid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.aliyun_uid is not None:
            result['AliyunUid'] = self.aliyun_uid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('AliyunUid') is not None:
            self.aliyun_uid = m.get('AliyunUid')
        return self


class ValidAliyunUidResponseBody(TeaModel):
    def __init__(
        self,
        is_valid: str = None,
        message: str = None,
        request_id: str = None,
    ):
        self.is_valid = is_valid
        self.message = message
        # Id of the request
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.is_valid is not None:
            result['IsValid'] = self.is_valid
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('IsValid') is not None:
            self.is_valid = m.get('IsValid')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class ValidAliyunUidResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ValidAliyunUidResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ValidAliyunUidResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ValidCompanyNameRequest(TeaModel):
    def __init__(
        self,
        aliyun_jwt: str = None,
        company_name: str = None,
    ):
        self.aliyun_jwt = aliyun_jwt
        self.company_name = company_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_jwt is not None:
            result['AliyunJwt'] = self.aliyun_jwt
        if self.company_name is not None:
            result['CompanyName'] = self.company_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunJwt') is not None:
            self.aliyun_jwt = m.get('AliyunJwt')
        if m.get('CompanyName') is not None:
            self.company_name = m.get('CompanyName')
        return self


class ValidCompanyNameResponseBody(TeaModel):
    def __init__(
        self,
        is_valid: str = None,
        message: str = None,
        request_id: str = None,
    ):
        self.is_valid = is_valid
        self.message = message
        # Id of the request
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.is_valid is not None:
            result['IsValid'] = self.is_valid
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('IsValid') is not None:
            self.is_valid = m.get('IsValid')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class ValidCompanyNameResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ValidCompanyNameResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ValidCompanyNameResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class VrUserCreateScanUserRequest(TeaModel):
    def __init__(
        self,
        biz_order_no: str = None,
        phone_num: str = None,
        source: str = None,
    ):
        # 业务幂等ID，用于防止重复请求，写操作必传
        self.biz_order_no = biz_order_no
        # 用户需要创建扫描权限账号的手机号码
        self.phone_num = phone_num
        # 数据源，目前只有3VJIA，需要新增请联系接口owner
        self.source = source

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_order_no is not None:
            result['BizOrderNo'] = self.biz_order_no
        if self.phone_num is not None:
            result['PhoneNum'] = self.phone_num
        if self.source is not None:
            result['Source'] = self.source
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizOrderNo') is not None:
            self.biz_order_no = m.get('BizOrderNo')
        if m.get('PhoneNum') is not None:
            self.phone_num = m.get('PhoneNum')
        if m.get('Source') is not None:
            self.source = m.get('Source')
        return self


class VrUserCreateScanUserResponseBody(TeaModel):
    def __init__(
        self,
        async_: bool = None,
        async_token: str = None,
        error_code: str = None,
        error_msg: str = None,
        request_id: str = None,
        result_obj: Dict[str, Any] = None,
        retry: bool = None,
        success: bool = None,
    ):
        # async
        self.async_ = async_
        # asyncToken
        self.async_token = async_token
        # errorCode
        self.error_code = error_code
        # errorMsg
        self.error_msg = error_msg
        # traceId
        self.request_id = request_id
        # resultObj
        self.result_obj = result_obj
        # retry
        self.retry = retry
        # success
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.async_ is not None:
            result['Async'] = self.async_
        if self.async_token is not None:
            result['AsyncToken'] = self.async_token
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.error_msg is not None:
            result['ErrorMsg'] = self.error_msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_obj is not None:
            result['ResultObj'] = self.result_obj
        if self.retry is not None:
            result['Retry'] = self.retry
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Async') is not None:
            self.async_ = m.get('Async')
        if m.get('AsyncToken') is not None:
            self.async_token = m.get('AsyncToken')
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('ErrorMsg') is not None:
            self.error_msg = m.get('ErrorMsg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultObj') is not None:
            self.result_obj = m.get('ResultObj')
        if m.get('Retry') is not None:
            self.retry = m.get('Retry')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class VrUserCreateScanUserResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: VrUserCreateScanUserResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = VrUserCreateScanUserResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


