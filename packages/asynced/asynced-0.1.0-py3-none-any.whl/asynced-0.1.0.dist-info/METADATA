Metadata-Version: 2.1
Name: asynced
Version: 0.1.0
Summary: Async python for Event-Driven applications
Home-page: https://github.com/jorenham/asynced
License: MIT
Author: Joren Hammudoglu
Author-email: jhammudoglu@gmail.com
Requires-Python: >=3.9,<4
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.9
Requires-Dist: typing-extensions (>4.1.0); python_version < "3.10"
Project-URL: Repository, https://github.com/jorenham/asynced
Description-Content-Type: text/markdown

# AsyncED

Async python for Event-Driven applications

## High-level API

*Coming soon...*

## Low-level API

### Perpetual

Where asyncio futures are the bridge between low-level events and a
coroutines, perpetuals are the bridge between event streams and async
iterators.

In it's essence, a perpetual is an asyncio.Future that can have its result
(or exception) set multiple times, at least until it is stopped. Besides
a perpetual being awaitable just like a future, it is an async iterator as
well.


### ensure_future

Wrap an async iterable in a perpetual, and automatically starts iterating. 

See [perpetual_drumkit.py](examples/perpetual_drumkit.py) for an example.

~

*More docs and examples coming soon...*

