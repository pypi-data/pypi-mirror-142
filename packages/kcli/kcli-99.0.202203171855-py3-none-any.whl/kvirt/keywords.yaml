autostart: Autostarts vm (libvirt specific)
base: |
  Allows you to point to a parent profile so that values are taken from parent when not found in the current profile.
  Scripts and commands are rather concatenated between default, father and children
client: Allows to target a different client/host for the corresponding entry
cloudinit:
cmdline: Cmdline to pass to the vm
cmds: Array of commands to run
cpuflags: |
  You can specify a list of strings with features to enable or use dict entries with name of the feature and policy either set to require,disable, optional or force.
  The value for vmx is ignored, as it's handled by the nested flag
cpuhotplug:
cpumodel:
cpupinning: cpupinning conf to apply
diskinterface: You can set it to ide, ssd or nvme instead
disks: |
  Array of disks to define.
  For each of them, you can specify pool, size, thin (as boolean), interface (either ide or virtio) and a wwn.
  If you omit parameters, default values will be used from config or profile file (You can actually let the entire entry blank or just indicate a size number directly)
disksize:
diskthin:
dns:
domain:
enableroot:
files: |
  Array of files to inject to the vm. For each of them, you can specify path, owner ( root by default) , permissions (600 by default ) and either origin or content to gather content data directly or from specified origin.
  When specifying a directory as origin, all the files it contains will be parsed and added
flavor: Specific to gcp, aws, openstack and packet
gateway:
guestid:
image: |
  Should point to your base cloud image(optional).
  You can either specify short name or complete path.
  If you omit the full path and your image lives in several pools, the one from last (alphabetical) pool will be used
initrd: Initrd location to pass to the vm. Needs to be local to the hypervisor
insecure: Handles all the ssh option details so you don't get any warnings about man in the middle
iso:
kernel: Kernel location to pass to the vm. Needs to be local to the hypervisor
keys: Array of ssh public keys to inject to the vm. Whether the actual content or the public key path
mailfrom: Mail address to send mail from
mailserver: Mail server where to send the notification (on port 25)
mailto: List of mail addresses to send mail to
memory:
memoryhotplug:
nested:
nets: |
  Array of networks to define.
  For each of them, you can specify just a string for the name, or a dict containing name, public and alias and ip, mask and gateway, and bridge.
  Any visible network is valid, in particular bridge networks can be used on libvirt, beyond regular nat networks
networkwait: Delay in seconds before attempting to run further commands, to be used in environments where networking takes more time to come up
notify: Sends result of a command or a script run from the vm to one of the supported notify engines
notifycmd: |
  Which command to run for notification.
  If none is provided and no notifyscript either, defaults to sending last 100 lines of the cloudinit file of the machine, or ignition for coreos based vms
notifymethod: |
  Array of notify engines.
  Other options are slack and mail
notifyscript: Script to execute on the vm and whose output will be sent to notification engines
numamode: numamode to apply to the workers only.
numcpus:
pcidevices: |
  array of pcidevices to passthrough to the first worker only.
  Check [here](https://github.com/karmab/kcli-plan-samples/blob/master/pcipassthrough/pci.yml) for an example
playbook: |
  Generates a playbook for the vm of the plan instead of creating it.
  Useful to run parts of a plan on baremetal
pool:
privatekey: Inject your private key to the nodes of your plan
profile: name of one of your profile
pushbullettoken: Token to use when notifying through pushbullet
reservedns:
reservehost:
reserveip:
rhnactivationkey: Red Hat Network activation key
rhnorg: Red Hat Network organization
rhnpassword: Red Hat Network password
rhnpool: Red Hat Network pool
rhnregister: |
  Auto registers vms whose template starts with rhel Defaults to false.
  Requires to either rhnuser and rhnpassword, or rhnactivationkey and rhnorg, and an optional rhnpool
rhnserver: Red Hat Network server (for registering to a Satellite server)
rhnuser: Red Hat Network user
rng: Enables a RNG device in the vm
rootpassword: Root password to inject (when beeing to lazy to use a cmd to set it)
scripts: |
  Array of paths of custom script to inject with cloudinit.
  It will be merged with cmds parameter.
  You can either specify full paths or relative to where you're running kcli. Only checked in profile or plan file
sharedfolders: |
  List of paths to share between a kvm hypervisor and vm.
  You will also need to make sure that the path is accessible as qemu user (typically with id 107) and use an hypervisor and a guest with 9p support (centos/rhel lack it)
sharedkey: |
  Share a private/public key between all the nodes of your plan.
  Additionally, root access will be allowed
slackchannel: Slack Channel where to send the notification
slacktoken: |
  Token to use when notifying through slack.
  Should be the token of an app generated in your workspace
start:
storemetadata: |
  Creates a /root/.metadata yaml file whith all the overrides applied.
  On gcp, those overrides are also stored as extra metadata
tags: |
  Array of tags to apply to gcp instances (usefull when matched in a firewall rule).
  In the case of kubevirt, it s rather a dict of key=value used as node selector (allowing to force vms to be scheduled on a matching node)
tpm: Enables a TPM device in the vm, using emulator mode. Requires swtpm in the host
virttype: |
  Only used for libvirt where it evaluates to kvm if acceleration shows in capabilities, or qemu emulation otherwise.
  If a value is provided, it must be either kvm, qemu, xen or lxc
vmrules: |
  List of rules with an associated dict to apply for te corresponding entry, if a regex on the entry name is matched.
  The profile of the matching vm will be updated with the content of the rule
vnc: if set to true, vnc is used for console instead of spice
wait: Whether to wait for cloudinit/ignition to fully apply
waitcommand: a specific command to use to validate that vm is ready
waittimeout: Timeout when waiting for a vm to be ready. Default zero value means the wait wont timeout
yamlinventory: Ansible generated inventory for single vms or for plans containing ansible entries will be yaml based.
zerotier_kubelet: Whether to configure kubelet to use the first zerotier address as node ip
zerotier_net: List of zerotier public networks where to join. Will trigger installation of zerotier on the node
