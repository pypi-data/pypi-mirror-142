{"version":3,"sources":["webpack://@quansight/jupyterlab-ksmm/./lib/components/alerts.js","webpack://@quansight/jupyterlab-ksmm/./lib/components/envvar.js","webpack://@quansight/jupyterlab-ksmm/./lib/components/keyval.js","webpack://@quansight/jupyterlab-ksmm/./lib/components/kscardgrid.js","webpack://@quansight/jupyterlab-ksmm/./lib/components/ksform.js","webpack://@quansight/jupyterlab-ksmm/./lib/components/ksmenu.js","webpack://@quansight/jupyterlab-ksmm/./lib/handler.js","webpack://@quansight/jupyterlab-ksmm/./lib/index.js","webpack://@quansight/jupyterlab-ksmm/./lib/widget.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAA0B;AACgB;AACnC;AACP,YAAY,0DAAmB,CAAC,0DAAK,GAAG,qBAAqB;AAC7D;AACA,QAAQ,0DAAmB,OAAO,SAAS,8BAA8B,sCAAsC;AAC/G;;;;;;;;;;;;;;;;;;ACN0B;AAC1B;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,0DAAmB;AAC/B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,QAAQ,0DAAmB,YAAY;AACvC;AACA,aAAa,EAAE;AACf;;;;;;;;;;;;;;;;;;ACjCwC;AACxC;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACO;AACP,0BAA0B,+CAAQ;AAClC,0BAA0B,+CAAQ;AAClC,YAAY,0DAAmB;AAC/B,QAAQ,0DAAmB,WAAW;AACtC;AACA;AACA,aAAa,EAAE;AACf,QAAQ,0DAAmB,WAAW;AACtC;AACA;AACA,aAAa,EAAE;AACf;;;;;;;;;;;;;;;;;;;;ACpB0B;AACc;AACoB;AAC5D;AACA,WAAW,oFAAoF;AAC/F,YAAY,0DAAmB,CAAC,yDAAI,GAAG;AACvC;AACA;AACA,SAAS,gCAAgC;AACzC,QAAQ,0DAAmB,CAAC,8DAAS;AACrC,YAAY,0DAAmB,CAAC,+DAAU;AAC1C;AACA;AACA,YAAY,0DAAmB,CAAC,+DAAU;AAC1C,QAAQ,0DAAmB,CAAC,gEAAW,GAAG,0BAA0B;AACpE,YAAY,0DAAmB,OAAO,SAAS,oBAAoB,kEAAkE;AACrI,gBAAgB,0DAAmB,CAAC,qDAAS;AAC7C,YAAY,0DAAmB,OAAO,SAAS,oBAAoB,gEAAgE;AACnI,gBAAgB,0DAAmB,CAAC,kDAAM;AAC1C,YAAY,0DAAmB,OAAO,SAAS,oBAAoB,kEAAkE;AACrI,gBAAgB,0DAAmB,CAAC,mDAAO;AAC3C;AACA,iEAAe,QAAQ,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;ACtBgB;AACA;AACF;AACM;AACP;AACK;AACJ;AACE;AACxC;AACA,0BAA0B,+CAAQ;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,0DAAmB,CAAC,yDAAI,GAAG,+DAA+D,mCAAmC,0DAAmB,CAAC,wDAAG,GAAG,2DAA2D;AAC9N,QAAQ,0DAAmB,CAAC,iDAAY,GAAG,kHAAkH;AAC7J;AACO;AACP;AACA;AACA;AACA,yBAAyB,mDAAc;AACvC;AACA,sCAAsC,+CAAU;AAChD;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA,YAAY,0DAAmB,CAAC,uDAAc;AAC9C,QAAQ,0DAAmB,CAAC,0DAAI,GAAG,+FAA+F;AAClI,QAAQ,0DAAmB,CAAC,2DAAM,GAAG,wDAAwD;AAC7F;;;;;;;;;;;;;;;;;;ACnC0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,YAAY,0DAAmB,qDAAqD,0DAAmB,SAAS,4CAA4C;AAC5J;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACnD+C;AACS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACO,kDAAkD;AACzD;AACA,qBAAqB,+EAA6B;AAClD,uBAAuB,8DAAW;AAClC;AACA;AACA;AACA,yBAAyB,8EAA4B;AACrD;AACA;AACA,kBAAkB,+EAA6B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gFAA8B;AAChD;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AClCsD;AACL;AAC8B;AAC5B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,gCAAgC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,2DAAS;AACxB;AACA,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA,wDAAwD,yFAAa;AACrE;AACA,oCAAoC,4DAAuB;AAC3D,mCAAmC,gEAAc,EAAE,UAAU;AAC7D;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iEAAe,aAAa,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;ACvCsB;AACA;AACD;AAClD,WAAW,cAAc;AACc;AACQ;AACO;AACR;AACA;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,+CAAQ,GAAG;AACvC,oCAAoC,+CAAQ;AAC5C,gDAAgD,+CAAQ,GAAG;AAC3D,wDAAwD,+CAAQ;AAChE,oCAAoC,+CAAQ;AAC5C,oCAAoC,+CAAQ;AAC5C,gCAAgC,+CAAQ,GAAG;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,oDAAU;AAClB;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA,QAAQ,oDAAU;AAClB;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,QAAQ,oDAAU;AAClB;AACA,kCAAkC,oBAAoB;AACtD,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,QAAQ,oDAAU;AAClB;AACA,kCAAkC,oBAAoB;AACtD,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,oDAAU;AAClB;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,SAAS;AACzC,iCAAiC,0BAA0B;AAC3D,aAAa;AACb;AACA;AACA;AACA,IAAI,gDAAS;AACb;AACA;AACA,KAAK;AACL,YAAY,0DAAmB,CAAC,8DAAS,GAAG,cAAc;AAC1D,QAAQ,0DAAmB;AAC3B;AACA,YAAY,0DAAmB,SAAS;AACxC;AACA;AACA,iBAAiB,EAAE,sCAAsC,0DAAmB,CAAC,2DAAQ,GAAG,qDAAqD,SAAI,mDAAmD,SAAI,uDAAuD,SAAI,uCAAuC;AAC1S,oBAAoB,0DAAmB,CAAC,+DAAe,GAAG,4BAA4B;AACtF,qBAAqB,0DAAmB,CAAC,uDAAO,GAAG,iFAAiF,SAAI,+BAA+B,SAAI,GAAG;AAC9K;AACA;AACA;AACA;AACO,sCAAsC,6DAAW;AACxD;AACA;AACA;AACA;AACA;AACA,eAAe,0DAAmB;AAClC;AACA","file":"lib_index_js-webpack_sharing_consume_default_lumino_coreutils-webpack_sharing_consume_default-054be0.d4b65e343bc75485d000.js","sourcesContent":["import React from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nexport const SuccessAlertBox = (props) => {\n    return (React.createElement(Alert, { variant: \"success\" },\n        \"Success \",\n        React.createElement(\"a\", { style: { textDecoration: \"underline\" }, onClick: () => props.handleClose() }, \"Close\")));\n};\n","import React from \"react\";\n/*\n * This function is a field that is rendered\n * for the environment variable.\n */\nexport const EnvVarForm = (props) => {\n    /*\n     * Function to handle a change of key values in a key value store\n     */\n    const handleKeyChange = (key, newkey) => {\n        props.formData[newkey] = props.formData[key];\n        delete props.formData[key];\n        console.log(props.formData);\n    };\n    /*\n     * Function to handle any changing values\n     */\n    const handleValueChange = (key, newvalue) => {\n        props.formData[key] = newvalue;\n        console.log(props.formData);\n    };\n    const widget = props.uiSchema[\"ui:widget\"];\n    const formData = props.formData;\n    return (React.createElement(\"div\", null,\n        props.properties.map((item) => widget((props = {\n            value: item,\n            formData: formData,\n            handleKey: handleKeyChange,\n            handleVal: handleValueChange,\n        }))),\n        React.createElement(\"button\", { type: \"button\", onClick: (e) => {\n                alert(props.onAddClick);\n            } }, \"Add New\")));\n};\n","import React, { useState } from \"react\";\n/*\n * This function has a callback to mutate the formData to\n * add a new 'string':'string' type to the dictionary.\n *\n * Renders a widget for a python dict of\n * { 'string':'string', 'string':'string' }\n */\nexport const KeyValueWidget = (props) => {\n    const [key, setKey] = useState(props.value.name);\n    const [val, setVal] = useState(props.formData[props.value.name]);\n    return (React.createElement(\"div\", null,\n        React.createElement(\"input\", { type: \"string\", value: key, onChange: (e) => {\n                props.handleKey(key, e.target.value);\n                setKey(e.target.value);\n            } }),\n        React.createElement(\"input\", { type: \"string\", value: val, onChange: (e) => {\n                props.handleVal(key, e.target.value);\n                setVal(e.target.value);\n            } })));\n};\n","import React from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport { FaRegEdit, FaCopy, FaTrash } from \"react-icons/fa\";\nconst CardGrid = (props) => {\n    const { cardPayload, handleSelectKernelspec, handleCopyKernelspec, handleDeleteKernelspec } = props;\n    return (React.createElement(Card, { style: {\n            width: \"18rem\",\n            height: \"12rem\",\n        }, key: cardPayload.kernel_name },\n        React.createElement(Card.Body, null,\n            React.createElement(Card.Title, null,\n                \"Kernel: \",\n                cardPayload.kernel_name),\n            React.createElement(Card.Title, null, cardPayload.jupyter_name)),\n        React.createElement(Card.Footer, { className: \"align-left\" },\n            React.createElement(\"a\", { style: { cursor: \"pointer\" }, onClick: () => handleSelectKernelspec(cardPayload.kernel_name) },\n                React.createElement(FaRegEdit, null)),\n            React.createElement(\"a\", { style: { cursor: \"pointer\" }, onClick: () => handleCopyKernelspec(cardPayload.kernel_name) },\n                React.createElement(FaCopy, null)),\n            React.createElement(\"a\", { style: { cursor: \"pointer\" }, onClick: () => handleDeleteKernelspec(cardPayload.kernel_name) },\n                React.createElement(FaTrash, null)))));\n};\nexport default CardGrid;\n","import React, { useState } from \"react\";\nimport Tabs from \"react-bootstrap/Tabs\";\nimport Tab from \"react-bootstrap/Tab\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"@rjsf/bootstrap-4\";\nimport { KeyValueWidget } from \"./keyval\";\nimport { EnvVarForm } from \"./envvar\";\nimport { IKsFormGroup } from \"./ksmenu\";\nconst TabMenu = (props) => {\n    const [tab, setTab] = useState(\"General Settings\");\n    /*\n     * Generate the menu titles for the schema.\n     */\n    var menuHeaders = [\n        \"General Settings\",\n        \"Launch Arguments\",\n    ];\n    return (React.createElement(Tabs, { defaultActiveKey: menuHeaders[0], onSelect: (k) => setTab(k) }, menuHeaders.map((menuHeader) => (React.createElement(Tab, { eventKey: menuHeader, key: menuHeader, title: menuHeader },\n        React.createElement(IKsFormGroup, { selecteditem: tab, properties: props.properties, handleAdditionalProperties: props.onAddClick, mainprops: props }))))));\n};\nexport const IKsForm = (props) => {\n    const uiSchema = {\n        \"ui:ObjectFieldTemplate\": TabMenu,\n        env: {\n            \"ui:widget\": KeyValueWidget,\n            \"ui:autofocus\": true,\n            \"ui:ObjectFieldTemplate\": EnvVarForm,\n            \"ui:options\": {\n                expandable: true,\n            },\n        },\n    };\n    return (React.createElement(React.Fragment, null,\n        React.createElement(Form, { schema: props.schema, uiSchema: uiSchema, formData: props.formData, onSubmit: props.onSubmit }),\n        React.createElement(Button, { variant: \"secondary\", onClick: () => props.onCancel() }, \"Cancel\")));\n};\n","import React from \"react\";\n/*\n * This is a nested component in the FieldTemplate, and\n * does all the work for rendering the different options in their\n * respective places.\n *\n * props: data -> The data to render - namely, the data as defined in the schema\n */\nexport const IKsFormGroup = (props) => {\n    const fg = generateFormGroupMap(props.properties);\n    return (React.createElement(\"div\", null, fg[props.selecteditem].map((index) => (React.createElement(\"div\", { className: \"property-wrapper\", key: index }, props.properties[index].content)))));\n};\n/*\n * Grab the location of the element in the array,\n * returning a value of the positions in the array.\n */\nfunction generateFormGroupMap(dataArr) {\n    const GeneralSettingsArray = [];\n    const LaunchArgumentsArray = [];\n    const EnvironmentVariableArray = [];\n    const ComputeParametersArray = [];\n    const MetadataArray = [];\n    dataArr.forEach((element) => {\n        if (element.name == \"display_name\" ||\n            element.name == \"interrupt_mode\" ||\n            element.name == \"language\") {\n            GeneralSettingsArray.push(dataArr.indexOf(element));\n        }\n        else if (element.name == \"argv\") {\n            LaunchArgumentsArray.push(dataArr.indexOf(element));\n        }\n        else if (element.name == \"env\") {\n            EnvironmentVariableArray.push(dataArr.indexOf(element));\n        }\n        else if (element.name == \"parameters\") {\n            ComputeParametersArray.push(dataArr.indexOf(element));\n        }\n        else if (element.name == \"metadata\") {\n            MetadataArray.push(dataArr.indexOf(element));\n        }\n        else {\n            console.log(\"Unknown element name\", element.name);\n        }\n    });\n    return {\n        [\"General Settings\"]: GeneralSettingsArray,\n        [\"Launch Arguments\"]: LaunchArgumentsArray,\n        [\"Environment Variables\"]: EnvironmentVariableArray,\n        [\"Compute Parameters\"]: ComputeParametersArray,\n        [\"Metadata\"]: MetadataArray,\n    };\n}\n","import { URLExt } from '@jupyterlab/coreutils';\nimport { ServerConnection } from '@jupyterlab/services';\n/**\n * Call the API extension\n *\n * @param endPoint API REST end point for the extension\n * @param init Initial values for the request\n * @returns The response body interpreted as JSON\n */\nexport async function requestAPI(endPoint = '', init = {}) {\n    // Make request to Jupyter API\n    const settings = ServerConnection.makeSettings();\n    const requestUrl = URLExt.join(settings.baseUrl, 'ksmm', // API Namespace\n    endPoint);\n    let response;\n    try {\n        response = await ServerConnection.makeRequest(requestUrl, init, settings);\n    }\n    catch (error) {\n        throw new ServerConnection.NetworkError(error);\n    }\n    let data = await response.text();\n    if (data.length > 0) {\n        try {\n            data = JSON.parse(data);\n        }\n        catch (error) {\n            console.log('Not a JSON response body.', response);\n        }\n    }\n    if (!response.ok) {\n        throw new ServerConnection.ResponseError(response, data.message || data);\n    }\n    return data;\n}\n","import { MainAreaWidget } from \"@jupyterlab/apputils\";\nimport { ILauncher } from \"@jupyterlab/launcher\";\nimport { extensionIcon } from \"@jupyterlab/ui-components/lib/icon/iconimports\";\nimport { KernelspecManagerWidget } from \"./widget\";\n/*\n * The command IDs used by the to create a kernelspec.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.create = \"ksmm:create-kernelspec\";\n})(CommandIDs || (CommandIDs = {}));\n/**\n * Initialization data for the ksmm extension.\n */\nconst ksmmExtension = {\n    id: \"jupyterlab-ksmm-plugin\",\n    autoStart: true,\n    optional: [ILauncher],\n    activate: (app, launcher) => {\n        const { commands } = app;\n        const command = CommandIDs.create;\n        commands.addCommand(command, {\n            caption: \"A way to manage Kernelspecs\",\n            label: \"Kernelspec Management\",\n            icon: (args) => (args['isPalette'] ? null : extensionIcon),\n            execute: () => {\n                const content = new KernelspecManagerWidget();\n                const widget = new MainAreaWidget({ content });\n                widget.title.label = \"Kernelspec Management\";\n                app.shell.add(widget, \"main\");\n            }\n        });\n        if (launcher) {\n            launcher.add({\n                command\n            });\n        }\n    }\n};\nexport default ksmmExtension;\n","import React, { useState, useEffect } from \"react\";\nimport { ReactWidget } from \"@jupyterlab/apputils\";\nimport Container from \"react-bootstrap/Container\";\n// import { JSONSchema7 } from \"json-schema\";\nimport { requestAPI } from \"./handler\";\nimport CardGrid from \"./components/kscardgrid\";\nimport { SuccessAlertBox } from \"./components/alerts\";\nimport { IKsForm } from \"./components/ksform\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n/**\n * React component for listing the possible\n * ipykernel options.\n *\n * @returns The React component.\n */\nconst KernelManagerComponent = () => {\n    const [data, setData] = useState({});\n    const [showForm, setShowForm] = useState(false);\n    const [kernelFormData, setKernelFormData] = useState({});\n    const [selectedKernelName, setSelectedKernelName] = useState(\"\");\n    const [cardData, setCardData] = useState([]);\n    const [alertBox, setAlertBox] = useState(false);\n    const [schema, setSchema] = useState({});\n    /**\n     * Handles the Kernel Selection\n     * at the select screen. ,\n     */\n    const handleSelectKernelspec = (kernelName) => {\n        setSelectedKernelName(kernelName);\n        setKernelFormData(data[kernelName]);\n        setShowForm(true);\n    };\n    /**\n     * Return Home on click.\n     * TODO: Add Guards to check if editing.\n     */\n    const handleGoHome = () => {\n        setShowForm(false);\n        setAlertBox(false);\n    };\n    const refreshSchemas = () => {\n        requestAPI(\"/schema\", {\n            method: \"GET\",\n        }).then((s) => {\n            setSchema(s);\n        });\n    };\n    const refreshKernelspecs = () => {\n        requestAPI(\"/\", {\n            method: \"GET\",\n        }).then((res) => {\n            setData(res);\n            setCardData(createCardData(res));\n        });\n    };\n    const handleCopyKernelspec = (kernel_name) => {\n        requestAPI(\"/copy\", {\n            method: \"POST\",\n            body: JSON.stringify({ name: kernel_name }),\n        }).then((data) => {\n            alert(\"A copy of \" + kernel_name + \" has been created.\");\n            refreshKernelspecs();\n        });\n    };\n    const handleDeleteKernelspec = (kernel_name) => {\n        requestAPI(\"/delete\", {\n            method: \"POST\",\n            body: JSON.stringify({ name: kernel_name }),\n        }).then((data) => {\n            alert(kernel_name + \" has been deleted.\");\n            refreshKernelspecs();\n        });\n    };\n    /**\n     * Handles a form submission when\n     * kernels are modified in any form.\n     *\n     * Passed as a prop to Form\n     */\n    const handleSubmitKernelspec = (e) => {\n        requestAPI(\"/\", {\n            method: \"POST\",\n            body: JSON.stringify({\n                editedKernelPayload: JSON.stringify(e.formData),\n                originalKernelName: selectedKernelName,\n            }),\n        }).then((data) => {\n            if (data.success) {\n                setAlertBox(true);\n                refreshKernelspecs();\n                setKernelFormData(e.formData);\n            }\n        });\n    };\n    /**\n     * Generate the package of data needed\n     * to display at the card selection screen.\n     *\n     * This method is called on when then data is generated to\n     * send into the method generating the card data.\n     */\n    const createCardData = (ks) => {\n        var arr = new Array();\n        for (const property in ks) {\n            arr.push({\n                kernel_name: `${property}`,\n                jupyter_name: `${ks[property].display_name}`,\n            });\n        }\n        return arr;\n    };\n    useEffect(() => {\n        refreshSchemas();\n        refreshKernelspecs();\n    }, []);\n    return (React.createElement(Container, { fluid: true },\n        React.createElement(\"div\", null, \"Kernelspec Manager\"),\n        !showForm &&\n            React.createElement(\"div\", { style: {\n                    display: \"flex\",\n                    flexWrap: \"wrap\"\n                } }, cardData.map((cardPayload, idx) => (React.createElement(CardGrid, { handleSelectKernelspec: handleSelectKernelspec.bind(this), handleCopyKernelspec: handleCopyKernelspec.bind(this), handleDeleteKernelspec: handleDeleteKernelspec.bind(this), cardPayload: cardPayload, key: idx })))),\n        alertBox && React.createElement(SuccessAlertBox, { handleClose: handleGoHome }),\n        showForm && (React.createElement(IKsForm, { schema: schema, formData: kernelFormData, onSubmit: handleSubmitKernelspec.bind(this), onCancel: handleGoHome.bind(this) }))));\n};\n/**\n * KernelspecManagerWidget main class.\n */\nexport class KernelspecManagerWidget extends ReactWidget {\n    constructor() {\n        super();\n        this.addClass(\"jp-Ksmm\");\n    }\n    render() {\n        return React.createElement(KernelManagerComponent, null);\n    }\n}\n"],"sourceRoot":""}