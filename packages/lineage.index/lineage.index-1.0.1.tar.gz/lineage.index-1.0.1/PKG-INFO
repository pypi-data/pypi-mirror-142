Metadata-Version: 1.1
Name: lineage.index
Version: 1.0.1
Summary: Adds an index and metadata that allows to search for content of a collective.lineage childsite
Home-page: http://github/com/collective/lineage.index
Author: Harald Friessnegger
Author-email: harald@webmeisterei.com
License: GPL
Description: Introduction
        ============
        
        ``lineage.index`` is an addon to `collective.lineage <http://plone.org/products/collective-lineage/>`_ that lets you search for content within a certain childsite.
        
        
        How does it work?
        -----------------
        
        ``lineage.index`` registers an index ``childsite`` on all items implementing ``Products.CMFCore.interfaces.IContentish`` (which will be Dexterity based content types).
        
        The childsite's UID can be used to search for content located in this childsite.
        
        When listing items on the main portal, you can use the metadata-column ``childsite`` to indicate which childsites the content has been aggregated from.
        
        
        How do I use it?
        ----------------
        
        Once installed, new content gets indexed under the UID of its closest childsite.
        Existing content requires a catalog update (see `Installation`_).
        
        You can search for content within a childsite using the index:
        
        .. code-block:: python
        
            brains = portal_catalog(childsite='9df827df17a94ad0aeda278e9570dc88')
        
        Each brain has a metadata column telling which childsite it's located in:
        
        .. code-block:: python
        
            >>> brains[0].childsite
            '9df827df17a94ad0aeda278e9570dc88'
        
        If the item comes from the main portal (i.e. not inside a childsite),
        
        - in Plone 5 ``None`` will be indexed.
        - in Plone 6 the UID of the portal will be indexed.
        
        This allows you to find only content from the main portal no belonging to any child site:
        
        .. code-block:: python
        
            >>> brains = portal_catalog(childsite=None)  # Plone 5.x
        
            >>> from plone.api import portal
            >>> brains = portal_catalog(childsite=portal.get().UID())  # Plone 6+
        
        There's also a vocabulary ``lineage.childsites`` listing the available childsites with their title.
        
        To show the title of the subsite of a brain you can use the utility view:
        
        .. code-block:: html
        
            <ul tal:define="util context/@@childsite">
                <li tal:repeat="item folderContents">
                    <span tal:replace="item/Title">Item 1</span> in
                    <span tal:replace="python: util.titleForKey(item.childsite)>Subportal One</span>
                </li>
            </ul>
        
        Installation
        ============
        
        Install ``lineage.index`` with buildout or pip.
        Ensure to have the ZCML included.
        
        In Plone install ``Lineage Index`` in Site Setup, Extensions.
        
        In case you already have childsites and content that shall be indexed go to ZMI, ``portal_catalog``, ``Advanced``.
        Then click the ``Update Catalog`` button to populate the index and the catalog metadata (this may take a while).
        
        Gotchas
        =======
        
        The vocabulary caches all childsite titles until Zope is restarted.
        If you add childsites you need to restart Zope to make them show up in the vocabulary.
        
        
        Changelog
        =========
        
        1.0.1 (2022-03-11)
        ------------------
        
        - Fix README
          [jensens]
        
        
        1.0 (2022-03-11)
        ----------------
        
        - Add portal to vocabulary in Plone 6.
          [jensens]
        
        - Fix recursion bug, if a context has no acquisition parent.
          [zworkb]
        
        - Minimal modernisation: black, isort, pyupgrade, more metadata, readme edited.
          [jensens]
        
        - Add uninstall profile.
          [thet]
        
        
        0.5 (2015-06-25)
        ----------------
        
        - Depend on ``plone.api`` and use it to get the portal object.
          [thet]
        
        - Add ``chilsiteForContext`` method, which returns the childsite UUID for a
          given context.
          [thet]
        
        - Upgrade to ``UUID`` basd indexing instead of using the ``id``. The id is not
          unique and causes problems when multiple lineage subsites with the same id
          are registered. Furthermore, the uuid can be used to retrieve the lineage
          childsite object without traversing up the content tree. A upgrade step is
          included.
          [thet]
        
        
        0.4 (2012-01-10)
        ----------------
        
        - PEP8 fixes
          [claytron]
        
        - Use ``IContentish`` instead of ``IATContentType`` to ensure that all
          CMF, AT and Dexterity based content gets indexed properly.
          [claytron]
        
        0.3 (2012-01-08)
        ----------------
        
        - Make non child site content be indexed as ``None`` so that "main site"
          content can be found via this index also.
          [claytron]
        
        - Make compatible with Plone 4.1
          [jensens]
        
        - Add ``catalog.xml`` and remove ``setuphandlers`` logic.
          [jensens]
        
        - Add ``collective.lineage`` to ``metadata.xml`` dependencies.
          [jensens]
        
        - PEP8 fixes
          [jensens]
        
        - Change extensions of reStructuredText files so they preview correctly.
          [jensens]
        
        - Moved code to GitHub
          [jensens]
        
        0.2 (2011-04-28)
        ----------------
        
        - Since Lineage's ChildSite is not implementing IPloneSiteRoot anymore,
          changed the indexing reference to implementing INavigationRoot
          [tbesluau]
        
        - For other versions of ATContentType, we need to try and import the interface(s)
          with and without the 's'
          [tbesluau]
        
        
        0.1b1 (2010-03-16)
        ------------------
        
        - Initial release
        
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Environment :: Web Environment
Classifier: Framework :: Plone
Classifier: Framework :: Plone :: Addon
Classifier: Framework :: Plone :: 5.2
Classifier: Framework :: Plone :: 6.0
Classifier: License :: OSI Approved :: GNU General Public License v2 (GPLv2)
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Topic :: Internet :: WWW/HTTP
Classifier: Topic :: Internet :: WWW/HTTP :: Dynamic Content
Classifier: Topic :: Software Development :: Libraries :: Python Modules
