# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['gatered']

package_data = \
{'': ['*']}

install_requires = \
['aiometer>=0.3.0', 'httpx[http2]>=0.21.0']

setup_kwargs = {
    'name': 'gatered',
    'version': '0.3.0',
    'description': 'Reddit Gateway API Library',
    'long_description': '# GateRed\n\nReddit Gateway API Library, w/ pushshift history support.\n\n[![Latest Version](https://img.shields.io/pypi/v/gatered.svg)](https://pypi.python.org/pypi/gatered)\n[![Supported Python Versions](https://img.shields.io/pypi/pyversions/gatered)](https://pypi.python.org/pypi/gatered)\n[![CI](https://github.com/countertek/gatered/actions/workflows/ci.yml/badge.svg?branch=main)](https://github.com/countertek/gatered/actions/workflows/ci.yml)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![GitHub license](https://img.shields.io/github/license/countertek/gatered)](https://github.com/countertek/gatered/blob/main/LICENSE)\n\n## Introduction\n\nThe idea is to access reddit data without logins and limits through its web API and proxy support.\n\n### Installing\n\nYou can install this library easily from pypi:\n\n```bash\n# with pip\npip install gatered\n\n# with poetry\npoetry add gatered\n```\n\n### Using\n\nThe library provides easy functions to get start fast:\n- `get_post_comments`\n- `get_posts`\n- `get_pushshift_posts`\n\nAlternatively you can directly use `Client` and `PushShiftAPI` classes to implement your own logics.\n\nErrors can be handled with either `RequestError` or `HTTPStatusError`, see [httpx exceptions](https://www.python-httpx.org/exceptions/) to learn more.\n\nSee the `examples` folder to learn more.\n\n## Documentation\n\n<a href="./gatered/func.py#L12"><img align="right" style="float:right;" src="https://img.shields.io/badge/-source-cccccc?style=flat-square"></a>\n\n### <kbd>function</kbd> `get_post_comments`\n\n```python\nget_post_comments(\n    submission_id: str,\n    all_comments: bool = False,\n    httpx_options: Dict[str, Any] = {}\n)\n```\n\nHelper function to get submission and its comments. If `all_comments` is `True`, it will fetch all the comments that are nested by reddit. \n\nReturns `post` (submission) and its `comments` as list.\n\n#### Parameters \n\nsubmission_id: :class:`str`  \nThe Submission id (starts with `t3_`). \n\nall_comments: Optional[:class:`bool`]  \nSet this to `True` to also get all nested comments. Default to `False`. \n\n\n<a href="./gatered/func.py#L34"><img align="right" style="float:right;" src="https://img.shields.io/badge/-source-cccccc?style=flat-square"></a>\n\n### <kbd>function</kbd> `get_posts`\n\n```python\nget_posts(\n    subreddit_name: str,\n    sort: Optional[str] = \'hot\',\n    t: Optional[str] = \'day\',\n    page_limit: Optional[int] = 4,\n    req_delay: int = 0.5,\n    httpx_options: Dict[str, Any] = {}\n)\n```\n\nAsync Generator to get submissions page by page.\n\nReturns an async generator. Use async for loop to handle page results.\n\n#### Parameters\n\nsubreddit_name: :class:`str`  \nName of the subreddit. \n\nsort: Optional[:class:`str`]  \nOption to sort the submissions, default to `hot`  \nAvailable options: `hot`, `new`, `top`, `rising` \n\nt: Optional[:class:`str`]  \nType for sorting submissions by `top`, default to `day`  \nAvailable options: `hour`, `day`, `week`, `month`, `year`, `all` \n\npage_limit: Optional[:class:`int`]  \nSet a request limit for pages to fetch. Disable this limit by passing `None`.  Default to 4 (which will fetch 100 posts) \n\nreq_delay: Optional[:class:`int`]  \nSet delay between each page request. Set 0 to disable it. Default to 0.5. \n\n\n<a href="./gatered/func.py#L93"><img align="right" style="float:right;" src="https://img.shields.io/badge/-source-cccccc?style=flat-square"></a>\n\n### <kbd>function</kbd> `get_pushshift_posts`\n\n```python\nget_pushshift_posts(\n    subreddit_name: str,\n    start_desc: datetime = None,\n    end_till: datetime = None,\n    req_delay: int = 0.5,\n    httpx_options: Dict[str, Any] = {}\n)\n```\n\nAsync Generator to get submissions by time range. \n\nReturns an async generator. Use async for loop to handle page results. \n\n#### Parameters\n\nsubreddit_name: :class:`str`  \nName of the subreddit. \n\nstart_desc: Optional[:class:`datetime`]  \nProvide `datetime` to get posts of a time range. Default to `None` to get from latest posts. \n\nend_till: Optional[:class:`datetime`]  \nProvide `datetime` to get posts of a time range.  Default to `None` to get all existing posts. \n\nreq_delay: Optional[:class:`int`]  \nSet delay between each page request. Set 0 to disable it. Default to 0.5. \n\n---\n\n<a href="./gatered/client.py#L16"><img align="right" style="float:right;" src="https://img.shields.io/badge/-source-cccccc?style=flat-square"></a>\n\n## <kbd>class</kbd> `Client`\nThe Client that interacts with the Reddit gateway API and returns raw JSON.  \nHttpx options can be passed in when creating the client such as proxies: https://www.python-httpx.org/api/#asyncclient \n\n<a href="./gatered/client.py#L42"><img align="right" style="float:right;" src="https://img.shields.io/badge/-source-cccccc?style=flat-square"></a>\n\n### <kbd>method</kbd> `__init__`\n\n```python\n__init__(**options: Any)\n```\n\n<a href="./gatered/client.py#L220"><img align="right" style="float:right;" src="https://img.shields.io/badge/-source-cccccc?style=flat-square"></a>\n\n### <kbd>method</kbd> `get_post_comments`\n\n```python\nget_post_comments(\n    submission_id: str,\n    sort: Optional[str] = None,\n    all_comments: bool = False,\n    max_at_once: int = 8,\n    max_per_second: int = 4,\n    **kwargs: Any\n)\n```\n\nGet submission and its comments. If `all_comments` is `True`, it will fetch all the comments that are nested by reddit.\n\nReturns `post` (submission) and its `comments` as list.\n\n#### Parameters \n\nsubmission_id: :class:`str`  \nThe Submission id (starts with `t3_`).\n\nsort: Optional[:class:`str`]  \nOption to sort the comments of the submission, default to `None` (best)  Available options: `top`, `new`, `controversial`, `old`, `qa`. \n\nall_comments: Optional[:class:`bool`]  \nSet this to `True` to also get all nested comments. Default to `False`.  \n\nmax_at_once: Optional[:class:`int`]  \nLimits the maximum number of concurrently requests for all comments. Default to 8. \n\nmax_per_second: Optional[:class:`int`]  \nLimits the number of requests spawned per second. Default to 4. \n\n\n<a href="./gatered/client.py#L285"><img align="right" style="float:right;" src="https://img.shields.io/badge/-source-cccccc?style=flat-square"></a>\n\n### <kbd>method</kbd> `get_posts`\n\n```python\nget_posts(\n    subreddit_name: str,\n    sort: Optional[str] = \'hot\',\n    t: Optional[str] = \'day\',\n    after: Optional[str] = None,\n    dist: Optional[int] = None,\n    **kwargs: Any\n)\n```\n\nGet submissions list from a subreddit, with ads filtered. This provides flexibility for you to handle pagninations by yourself.\n\nReturns `subreddit` and its `posts` (submissions) as list, as well as `token` and `dist` for paginations. \n\n#### Parameters \n\nsubreddit_name: :class:`str`  \nThe Subreddit name. \n\nsort: Optional[:class:`str`]  \nOption to sort the submissions, default to `hot`   \nAvailable options: `hot`, `new`, `top`, `rising` \n\nt: Optional[:class:`str`]  Type for sorting submissions by `top`, default to `day`  Available options: `hour`, `day`, `week`, `month`, `year`, `all` \n\nafter: Optional[:class:`str`], dist: Optional[:class:`str`]  \nNeeded for pagnitions. \n\n---\n\n<a href="./gatered/pushshift.py#L13"><img align="right" style="float:right;" src="https://img.shields.io/badge/-source-cccccc?style=flat-square"></a>\n\n## <kbd>class</kbd> `PushShiftAPI`\nThe Client that interacts with the PushShift API and returns raw JSON. Httpx options can be passed in when creating the client. \n\nThis acts as a helper to fetch past submissions based on time range (which is not provided by reddit). To get the comments, it\'s recommended to use offical Gateway API as source. \n\n<a href="./gatered/pushshift.py#L37"><img align="right" style="float:right;" src="https://img.shields.io/badge/-source-cccccc?style=flat-square"></a>\n\n### <kbd>method</kbd> `__init__`\n\n```python\n__init__(**options: Any)\n```\n\n<a href="./gatered/pushshift.py#L83"><img align="right" style="float:right;" src="https://img.shields.io/badge/-source-cccccc?style=flat-square"></a>\n\n### <kbd>method</kbd> `get_posts`\n\n```python\nget_posts(\n    subreddit_name: str,\n    before: int = None,\n    after: int = None,\n    sort: str = \'desc\',\n    size: int = 100,\n    **kwargs: Any\n)\n```\n\nGet submissions list from a subreddit. \n\nReturns a list of submissions. \n\n#### Parameters \n\nsubreddit_name: :class:`str`  \nThe Subreddit name. \n\nbefore: Optional[:class:`int`], after: Optional[:class:`int`]  \nProvide epoch time (without ms) to get posts from a time range. Default to `None` to get latest posts. \n\nsort: Optional[:class:`str`]  \nOption to sort the submissions, default to `desc`  \nAvailable options: `asc`, `desc` \n\nsize: Optional[:class:`int`]  \nSize of list to fetch. Default to maximum of 100. \n\n---\n\n## Plan\n\n- [x] Reddit Gateway API (fetch posts and comments)\n- [x] Add support to fetch past submissions using pushshift\n- [x] Add GitHub Action CI check and publish flow\n- [x] Publish on PyPI w/ portry\n- [x] Handle pagination through async generators\n- [x] Refine documentation in README and add examples\n- [ ] Make an example sandbox in replit\n- [ ] Prepare test cases\n',
    'author': 'Darwin',
    'author_email': 'darekaze@gmail.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/CounterTek/gatered',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.8,<4.0',
}


setup(**setup_kwargs)
