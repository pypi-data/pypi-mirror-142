local kap = import 'lib/kapitan.libjsonnet';
local params = kap.inventory().parameters;

local namespaced(ns, obj) =
  obj {
    metadata+: { namespace: ns },
  };

/**
 * \brief A function to filter NULL values.
 *
 * \arg `list` The array to filter
 *
 * \deprecated Use `std.prune(a)` instead.
 */
local filterNull(list) = std.trace('filterNull is deprecated, use std.prune(a) instead', std.filter(function(obj) obj != null, list));

local yaml_load_all = std.native('yaml_load_all');

/**
 * \brief Add namespace `namespace` in all objects defined in file `obj_file`.
 *
 * This method uses the `yaml_load_all` native callback to load a
 * multi-document YAML file and sets metadata.namespace to the argument
 * namespace for objects which have kind in kinds.
 *
 * \arg `obj_file` The file name of the input file. Loaded as multid-document
 *      YAML.
 * \arg `namespace` The namespace to patch into the objects
 * \arg `kinds` An array defining which object kinds to patch. If this
 *      argument is `null`, all objects in the input will be patched. Defaults
 *      to null.
 */
local patch_namespace(obj_file, namespace, kinds=null, exclude_objects=[]) =
  // read objects from input file, drop null objects
  local objs = std.filter(function(o) o != null, yaml_load_all(obj_file));
  // convert kinds array into set
  local kindset = if kinds != null then std.set(kinds);
  // generate object filter function depending on whether we want to only
  // patch specific object kinds.
  local kindfilter = if kinds != null then
    function(o) std.setMember(o.kind, kindset)
  else
    function(o) true;
  local include = if std.length(exclude_objects) > 0 then
    local filterfn(o) =
      local conds = std.map(function(e) e.kind == o.kind && e.name == o.metadata.name,
                            exclude_objects);
      !std.foldl(function(aggregate, cond) aggregate || cond, conds, false);
    filterfn
  else
    function(o) true;
  // helper to patch the objects
  local addns(obj) = obj { metadata+: { namespace: namespace } };
  // add namespace to objects for which objfilter returns true
  [
    if kindfilter(obj) && include(obj) then addns(obj) else obj
    for obj in objs
  ];

local list_dir(dir, basename=true) =
  std.native('list_dir')(dir, basename);

local addNamespaceToHelmOutput(template_dir, namespace, exclude_objects=[]) =
  local chart_files = list_dir(template_dir);
  local input_file(elem) = template_dir + '/' + elem;
  local stem(elem) =
    local elems = std.split(elem, '.');
    std.join('.', elems[:std.length(elems) - 1]);
  {
    [stem(elem)]: patch_namespace(input_file(elem),
                                  namespace,
                                  exclude_objects=exclude_objects)
    for elem in chart_files
  };

/**
* \brief Helper to inject proxy variables into a containers environment.
*
* HTTP proxy configuration is supposed to be done at `parameters.global` and
* meant to be used by all components. This helper makes it easy to add those
* values to a containers environment. No need to do any checks whether or not
* they have to be added.
*
* This helper is suitable to be used with `env_:` from the Kubernetes Jsonnet
* library. If the list form is used, combine it with `com.envList`.
*
* \return Dictionary. When configured, contains the http proxy environment
*         variables in both upper and lower case form. Will be empty otherwise.
*/
local proxyVars = if std.objectHas(params, 'global') then {
  [if std.objectHas(params.global, 'http_proxy') then 'HTTP_PROXY']: params.global.http_proxy,
  [if std.objectHas(params.global, 'http_proxy') then 'http_proxy']: params.global.http_proxy,
  [if std.objectHas(params.global, 'https_proxy') then 'HTTPS_PROXY']: params.global.https_proxy,
  [if std.objectHas(params.global, 'https_proxy') then 'https_proxy']: params.global.https_proxy,
  [if std.objectHas(params.global, 'no_proxy') then 'NO_PROXY']: params.global.no_proxy,
  [if std.objectHas(params.global, 'no_proxy') then 'no_proxy']: params.global.no_proxy,
} else {};

/**
* \brief Helper function to convert a dictionary into an environment list.
*
* Kubernetes containers require environment variables to be a list of objects.
* In its simplest form, the object contains the keys `name` and `value`.
*
* This helper converts a dictionary into such a list where keys become `name`,
* and values become `value`.
*
* \arg map Dictionary to be converted.
*
* \return List of dictionaries with `name`, `value` keys.
*/
local envList(map) = [
  if std.type(map[x]) == 'object'
  then {
    name: x,
    valueFrom: map[x],
  } else {
    // Let `null` value stay as such (vs string-ified)
    name: x,
    value: if map[x] == null then null else std.toString(map[x]),
  }
  for x in std.objectFields(map)
];

/*
 * \brief Helper to get a fields value or a default.
 *
 * \arg dict An arbitrary dictionary data structure.
 * \arg field The name of a field.
 * \arg default The value to return if the field is not present on the dict.
 */
local getValueOrDefault(dict, field, default) =
  if std.objectHas(dict, field) then dict[field] else default;

/*
 * \brief makes an object deep mergeable
 *
 * Builds a new object from its input.
 * All keys which contain an object or array will be suffixed with `+` in the result.
 *
 * \arg o An arbitrary object.
 * \return The transformed object.
 */
local makeMergeable(o) = {
  [key]+: makeMergeable(o[key])
  for key in std.objectFields(o)
  if std.isObject(o[key])
} + {
  [key]+: o[key]
  for key in std.objectFields(o)
  if std.isArray(o[key])
} + {
  [key]: o[key]
  for key in std.objectFields(o)
  if !std.isObject(o[key]) && !std.isArray(o[key])
};

{
  inventory: std.native('inventory'),
  yaml_load: std.native('yaml_load'),
  yaml_load_all: yaml_load_all,
  namespaced: namespaced,
  filterNull: filterNull,
  patchNamespace: patch_namespace,
  addNamespaceToHelmOutput: addNamespaceToHelmOutput,
  proxyVars: proxyVars,
  envList: envList,
  getValueOrDefault: getValueOrDefault,
  makeMergeable: makeMergeable,
}
