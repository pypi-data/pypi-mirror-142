#!/usr/bin/env python
from setuptools import setup
setup(
  name = 'cs.queues',
  author = 'Cameron Simpson',
  author_email = 'cs@cskk.id.au',
  version = '20220317',
  url = 'https://bitbucket.org/cameron_simpson/css/commits/all',
  description =
    'some Queue subclasses and ducktypes',
  long_description =
    ('Queue-like items: iterable queues, channels, etc.\n'    
 '\n'    
 '*Latest release 20220317*:\n'    
 'Add missed import.\n'    
 '\n'    
 '## Class `Channel`\n'    
 '\n'    
 'A zero-storage data passage.\n'    
 'Unlike a `Queue(1)`, `put()` blocks waiting for the matching `get()`.\n'    
 '\n'    
 '*Method `Channel.__init__(self)`*:\n'    
 'pylint: disable=consider-using-with\n'    
 '\n'    
 '*Method `Channel.__call__(self, *a)`*:\n'    
 'Call the `Channel`.\n'    
 'With no arguments, do a `.get()`.\n'    
 'With an argument, do a `.put()`.\n'    
 '\n'    
 '*Method `Channel.__iter__(self)`*:\n'    
 'A `Channel` is iterable.\n'    
 '\n'    
 '*Method `Channel.__next__(self)`*:\n'    
 '`next(Channel)` calls `Channel.get()`.\n'    
 '\n'    
 '*Method `Channel.__str__(self)`*:\n'    
 'pylint: disable=consider-using-with\n'    
 '\n'    
 '*Method `Channel.close(self)`*:\n'    
 'Close the `Channel`, preventing further `put()`s.\n'    
 '\n'    
 '*Method `Channel.get(self, *a, **kw)`*:\n'    
 'Wrapper function to check that this instance is not closed.\n'    
 '\n'    
 '*Method `Channel.put(self, *a, **kw)`*:\n'    
 'Wrapper function to check that this instance is not closed.\n'    
 '\n'    
 '## Function `IterablePriorityQueue(capacity=0, name=None)`\n'    
 '\n'    
 'Factory to create an iterable `PriorityQueue`.\n'    
 '\n'    
 '## Function `IterableQueue(capacity=0, name=None)`\n'    
 '\n'    
 'Factory to create an iterable `Queue`.\n'    
 '\n'    
 '## Class `ListQueue`\n'    
 '\n'    
 'A simple iterable queue based on a `list`.\n'    
 '\n'    
 '*Method `ListQueue.__init__(self, queued=None)`*:\n'    
 'Initialise the queue.\n'    
 '`queued` is an optional iterable of initial items for the queue.\n'    
 '\n'    
 '*Method `ListQueue.__bool__(self)`*:\n'    
 'A `ListQueue` looks a bit like a container,\n'    
 'and is false when empty.\n'    
 '\n'    
 '*Method `ListQueue.__iter__(self)`*:\n'    
 'A `ListQueue` is iterable.\n'    
 '\n'    
 '*Method `ListQueue.__next__(self)`*:\n'    
 'Iteration gets from the queue.\n'    
 '\n'    
 '*Method `ListQueue.extend(self, items)`*:\n'    
 'Convenient/performant queue-lots-of-items.\n'    
 '\n'    
 '*Method `ListQueue.get(self)`*:\n'    
 'Get pops from the start of the list.\n'    
 '\n'    
 '*Method `ListQueue.insert(self, index, item)`*:\n'    
 'Insert `item` at `index` in the queue.\n'    
 '\n'    
 '*Method `ListQueue.prepend(self, items, offset=0)`*:\n'    
 'Insert `items` at `offset` (default `0`, the front of the queue).\n'    
 '\n'    
 '*Method `ListQueue.put(self, item)`*:\n'    
 'Put appends to the queue.\n'    
 '\n'    
 '## `NullQ = <NullQueue:NullQ blocking=False>`\n'    
 '\n'    
 'A queue-like object that discards its inputs.\n'    
 'Calls to `.get()` raise `Queue_Empty`.\n'    
 '\n'    
 '## Class `NullQueue(cs.resources.MultiOpenMixin, '    
 'cs.context.ContextManagerMixin)`\n'    
 '\n'    
 'A queue-like object that discards its inputs.\n'    
 'Calls to `.get()` raise `Queue_Empty`.\n'    
 '\n'    
 '*Method `NullQueue.__init__(self, blocking=False, name=None)`*:\n'    
 'Initialise the `NullQueue`.\n'    
 '\n'    
 'Parameters:\n'    
 '* `blocking`: optional; if true, calls to `.get()` block until\n'    
 '  `.shutdown()`; default: `False`.\n'    
 '* `name`: optional name for this `NullQueue`.\n'    
 '\n'    
 '*Method `NullQueue.get(self)`*:\n'    
 'Get the next value. Always raises `Queue_Empty`.\n'    
 'If `.blocking,` delay until `.shutdown()`.\n'    
 '\n'    
 '*Method `NullQueue.put(self, item)`*:\n'    
 'Put a value onto the queue; it is discarded.\n'    
 '\n'    
 '*Method `NullQueue.shutdown(self)`*:\n'    
 'Shut down the queue.\n'    
 '\n'    
 '*Method `NullQueue.startup(self)`*:\n'    
 'Start the queue.\n'    
 '\n'    
 '## Class `PushQueue(cs.resources.MultiOpenMixin, '    
 'cs.context.ContextManagerMixin)`\n'    
 '\n'    
 'A puttable object which looks like an iterable `Queue`.\n'    
 '\n'    
 'In this base class,\n'    
 'calling `.put(item)` calls `functor` supplied at initialisation\n'    
 'to trigger a function on data arrival\n'    
 'whose iterable of results are put onto the output queue.\n'    
 '\n'    
 'As an example, the `cs.pipeline.Pipeline` class\n'    
 'uses subclasses of `PushQueue` for each pipeline stage,\n'    
 'overriding the `.put(item)` method\n'    
 'to mediate the call of `functor` through `cs.later.Later`\n'    
 'as resource controlled concurrency.\n'    
 '\n'    
 '*Method `PushQueue.__init__(self, name, functor, outQ)`*:\n'    
 'Initialise the PushQueue with the callable `functor`\n'    
 'and the output queue `outQ`.\n'    
 '\n'    
 'Parameters:\n'    
 '* `functor` is a one-to-many function which accepts a single\n'    
 '  item of input and returns an iterable of outputs; it may be a\n'    
 '  generator. These outputs are passed to `outQ.put` individually as\n'    
 '  received.\n'    
 '* `outQ` is a `MultiOpenMixin` which accepts via its `.put()` method.\n'    
 '\n'    
 '*Method `PushQueue.put(self, *a, **kw)`*:\n'    
 'Wrapper function to check that this instance is not closed.\n'    
 '\n'    
 '*Method `PushQueue.shutdown(self)`*:\n'    
 'shutdown() is called by MultiOpenMixin._close() to close\n'    
 'the outQ for real.\n'    
 '\n'    
 '*Method `PushQueue.startup(self)`*:\n'    
 'Start up.\n'    
 '\n'    
 '## Class `TimerQueue`\n'    
 '\n'    
 'Class to run a lot of "in the future" jobs without using a bazillion\n'    
 'Timer threads.\n'    
 '\n'    
 '*Method `TimerQueue.add(self, when, func)`*:\n'    
 "Queue a new job to be called at 'when'.\n"    
 "'func' is the job function, typically made with `functools.partial`.\n"    
 '\n'    
 '*Method `TimerQueue.close(self, cancel=False)`*:\n'    
 'Close the `TimerQueue`. This forbids further job submissions.\n'    
 'If `cancel` is supplied and true, cancel all pending jobs.\n'    
 'Note: it is still necessary to call `TimerQueue.join()` to\n'    
 'wait for all pending jobs.\n'    
 '\n'    
 '*Method `TimerQueue.join(self)`*:\n'    
 'Wait for the main loop thread to finish.\n'    
 '\n'    
 '# Release Log\n'    
 '\n'    
 '\n'    
 '\n'    
 '*Release 20220317*:\n'    
 'Add missed import.\n'    
 '\n'    
 '*Release 20220313*:\n'    
 'New ListQueue.prepend(items[,offset=0]) method.\n'    
 '\n'    
 '*Release 20211116*:\n'    
 'ListQueue: new insert() method.\n'    
 '\n'    
 '*Release 20210924*:\n'    
 'Channel: make a Channel iterable.\n'    
 '\n'    
 '*Release 20210913*:\n'    
 'New ListQueue simple iterable queue based on a list with list-like .append '    
 'and .extend.\n'    
 '\n'    
 '*Release 20201025*:\n'    
 'Drop obsolete call to MultiOpenMixin.__init__.\n'    
 '\n'    
 '*Release 20200718*:\n'    
 '_QueueIterator: set finalise_later via new MultiOpenMixin property, required '    
 'by recent MultiOpenMixin change.\n'    
 '\n'    
 '*Release 20200521*:\n'    
 'IterableQueue,IterablePriorityQueue: simplify wrappers, bypasses weird bug '    
 'from overengineering these.\n'    
 '\n'    
 '*Release 20191007*:\n'    
 '* PushQueue: improve __str__.\n'    
 '* Clean lint, drop cs.obj dependency.\n'    
 '\n'    
 '*Release 20190812*:\n'    
 '_QueueIterator: do MultiOpenMixin.__init__ so that __str__ is functional.\n'    
 '\n'    
 '*Release 20181022*:\n'    
 'Bugfix Channel, drasticly simplify PushQueue, other minor changes.\n'    
 '\n'    
 '*Release 20160828*:\n'    
 '* Use "install_requires" instead of "requires" in DISTINFO.\n'    
 '* TimerQueue.add: support optional *a and **kw arguments for func.\n'    
 '* Many bugfixes and internal changes.\n'    
 '\n'    
 '*Release 20150115*:\n'    
 'More PyPI metadata fixups.\n'    
 '\n'    
 '*Release 20150111*:\n'    
 'Initial PyPI release.'),
  install_requires = ['cs.logutils', 'cs.pfx', 'cs.py3', 'cs.resources', 'cs.seq'],
  classifiers = ['Programming Language :: Python', 'Programming Language :: Python :: 2', 'Programming Language :: Python :: 3', 'Development Status :: 4 - Beta', 'Intended Audience :: Developers', 'Operating System :: OS Independent', 'Topic :: Software Development :: Libraries :: Python Modules', 'License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)'],
  keywords = ['python2', 'python3'],
  license = 'GNU General Public License v3 or later (GPLv3+)',
  long_description_content_type = 'text/markdown',
  package_dir = {'': 'lib/python'},
  py_modules = ['cs.queues'],
)
