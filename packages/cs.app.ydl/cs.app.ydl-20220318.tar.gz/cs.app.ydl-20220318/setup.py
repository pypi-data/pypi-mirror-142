#!/usr/bin/env python
from setuptools import setup
setup(
  name = 'cs.app.ydl',
  author = 'Cameron Simpson',
  author_email = 'cs@cskk.id.au',
  version = '20220318',
  url = 'https://bitbucket.org/cameron_simpson/css/commits/all',
  description =
    'Convenient command line and library wrapper for youtube-dl.',
  long_description =
    ('Convenient command line and library wrapper for youtube-dl.\n'    
 '\n'    
 '*Latest release 20220318*:\n'    
 '* YDLCommand.main: plumb options.parallel through to the OverYDL '    
 'constructor.\n'    
 '* Bump required revision for cs.cmdutils.\n'    
 '\n'    
 'The `youtube-dl` tool and associated `youtube_dl` Python module\n'    
 'are very useful for downloading media from various websites.\n'    
 'However, as an end user who almost never streams because of my\n'    
 'soggy internet link, I find fetching several items is quite serial and\n'    
 'visually noisy.\n'    
 '\n'    
 'This module provides a command line tool `ydl` which:\n'    
 '- runs multiple downloads in parallel with progress bars\n'    
 '- prints the downloaded filename as each completes\n'    
 '\n'    
 'Interactively, I keep this shell function:\n'    
 '\n'    
 '    ydl(){\n'    
 '      ( set -ue\n'    
 '        dldir=${DL:-$HOME/dl}/v\n'    
 '        [ -d "$dldir" ] || set-x mkdir "$dldir"\n'    
 '        cd "$dldir"\n'    
 '        command ydl ${1+"$@"}\n'    
 '      )\n'    
 '    }\n'    
 '\n'    
 'which runs the downloader in my preferred download area\n'    
 'without tedious manual `cd`ing.\n'    
 '\n'    
 '## Function `main(argv=None)`\n'    
 '\n'    
 'Main command line.\n'    
 '\n'    
 '## Class `OverYDL`\n'    
 '\n'    
 'A manager for multiple `YDL` instances.\n'    
 '\n'    
 '*Method `OverYDL.queue(self, *a, **kw)`*:\n'    
 'Queue a fetch of `url` and return a `Result`.\n'    
 '\n'    
 '*Method `OverYDL.queue_iter(self, urls)`*:\n'    
 'Queue the URLs of the iterable `urls`,\n'    
 'essentially a convenience wrapper for the `queue` method.\n'    
 'Returns a list of the `Result`s for each queued URL.\n'    
 '\n'    
 '*Method `OverYDL.report(self, Rs=None)`*:\n'    
 'Wrapper returning `cs.result.report(.Rs)`.\n'    
 '`Rs` defaults to `list(self.Rs`, the accumulated `Result`s.\n'    
 '\n'    
 '## Class `YDL`\n'    
 '\n'    
 'Manager for a download process.\n'    
 '\n'    
 '*Method `YDL.__init__(self, url, *, fstags, upd=None, tick=None, '    
 'over_progress=None, sem, **kw_opts)`*:\n'    
 'Initialise the manager.\n'    
 '\n'    
 'Parameters:\n'    
 '* `url`: the URL to download\n'    
 '* `fstags`: mandatory keyword argument, a `cs.fstags.FSTags` instance\n'    
 '* `upd`: optional `cs.upd.Upd` instance for progress reporting\n'    
 '* `tick`: optional callback to indicate state change\n'    
 '* `over_progress`: an `OverProgress` to which to add each new `Progress` '    
 'instance\n'    
 '* `sem`: a shared `Semaphore` governing download parallelism\n'    
 '* `kw_opts`: other keyword arguments are used to initialise\n'    
 '  the options for the underlying `YoutubeDL` instance\n'    
 '\n'    
 '*Method `YDL.bg(self)`*:\n'    
 'Return the `Result` for this download,\n'    
 'starting the download if necessary.\n'    
 '\n'    
 '*Property `YDL.output_filename`*:\n'    
 'The target output filename.\n'    
 '\n'    
 '*Method `YDL.process_info(ie_result)`*:\n'    
 'Process info hook called by youtube_dl, seems uncalled :-(\n'    
 '\n'    
 '## Class `YDLCommand(cs.cmdutils.BaseCommand)`\n'    
 '\n'    
 '`ydl` command line implementation.\n'    
 '\n'    
 'Command line usage:\n'    
 '\n'    
 '    Usage: ydl [-f] [-j jobs] {URLs|-}...\n'    
 '        -f      Force download - do not use the cache.\n'    
 '        -j jobs Number of jobs (downloads) to run in parallel.\n'    
 '                Default: 4\n'    
 '\n'    
 '*Method `YDLCommand.apply_defaults(self)`*:\n'    
 'Initial defaults options.\n'    
 '\n'    
 '*Method `YDLCommand.apply_opts(self, opts)`*:\n'    
 'Command line main switches.\n'    
 '\n'    
 '*Method `YDLCommand.main(self, argv)`*:\n'    
 'Command line main programme.\n'    
 '\n'    
 '# Release Log\n'    
 '\n'    
 '\n'    
 '\n'    
 '*Release 20220318*:\n'    
 '* YDLCommand.main: plumb options.parallel through to the OverYDL '    
 'constructor.\n'    
 '* Bump required revision for cs.cmdutils.\n'    
 '\n'    
 '*Release 20210906*:\n'    
 'New -j jobs options to control parallelism, default 4.\n'    
 '\n'    
 '*Release 20210404*:\n'    
 'Update for recent cs.cmdutils change.\n'    
 '\n'    
 '*Release 20210306*:\n'    
 'Assorted internal updates.\n'    
 '\n'    
 '*Release 20200621*:\n'    
 '* YDL.run: just catch the youtube_dl DownloadError.\n'    
 '* Changes to the default output filename template.\n'    
 '* Other minor internal changes.\n'    
 '\n'    
 '*Release 20200615.1*:\n'    
 'Add usage message to docstring.\n'    
 '\n'    
 '*Release 20200615*:\n'    
 '* Initial "daemon" mode, suitable for "tail -f .ydld-queue | ydl -", handy '    
 'for keeping around in a tmux session.\n'    
 '* Assorted small bugfixes.\n'    
 '\n'    
 '*Release 20200521*:\n'    
 'Initial PyPI release.'),
  install_requires = ['cs.cmdutils>=20220318', 'cs.excutils', 'cs.fstags', 'cs.logutils', 'cs.pfx', 'cs.progress', 'cs.result', 'cs.upd>=20200517', 'youtube_dl'],
  classifiers = ['Development Status :: 4 - Beta', 'Environment :: Console', 'Operating System :: POSIX', 'Operating System :: Unix', 'Programming Language :: Python', 'Programming Language :: Python :: 3', 'Topic :: Internet', 'Topic :: System :: Networking', 'Topic :: Utilities', 'Intended Audience :: Developers', 'License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)'],
  entry_points = {'console_scripts': ['ydl = cs.app.ydl:main']},
  keywords = ['python3'],
  license = 'GNU General Public License v3 or later (GPLv3+)',
  long_description_content_type = 'text/markdown',
  package_dir = {'': 'lib/python'},
  py_modules = ['cs.app.ydl'],
)
