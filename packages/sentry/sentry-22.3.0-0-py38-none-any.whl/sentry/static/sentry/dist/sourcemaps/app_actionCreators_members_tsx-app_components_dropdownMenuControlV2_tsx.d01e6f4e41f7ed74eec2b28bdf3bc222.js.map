{"version":3,"file":"chunks/app_actionCreators_members_tsx-app_components_dropdownMenuControlV2_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/actionCreators/members.tsx","webpack:///./app/components/dropdownButtonV2.tsx","webpack:///./app/components/dropdownMenuItemV2.tsx","webpack:///./app/components/dropdownMenuSectionV2.tsx","webpack:///./app/components/dropdownMenuV2.tsx","webpack:///./app/components/dropdownMenuControlV2.tsx"],"sourcesContent":["import * as Sentry from '@sentry/react';\n\nimport MemberActions from 'sentry/actions/memberActions';\nimport {Client} from 'sentry/api';\nimport MemberListStore from 'sentry/stores/memberListStore';\nimport {Member} from 'sentry/types';\n\nfunction getMemberUser(member: Member) {\n  return {\n    ...member.user,\n    role: member.role,\n  };\n}\n\nexport async function fetchOrgMembers(\n  api: Client,\n  orgId: string,\n  projectIds: string[] | null = null\n) {\n  const endpoint = `/organizations/${orgId}/users/`;\n  const query = projectIds ? {project: projectIds} : {};\n\n  try {\n    const members = await api.requestPromise(endpoint, {method: 'GET', query});\n\n    if (!members) {\n      // This shouldn't happen if the request was successful\n      // It should at least be an empty list\n      Sentry.withScope(scope => {\n        scope.setExtras({\n          orgId,\n          projectIds,\n        });\n        Sentry.captureException(new Error('Members is undefined'));\n      });\n    }\n\n    const memberUsers = members?.filter(({user}: Member) => user);\n\n    if (!memberUsers) {\n      return [];\n    }\n\n    // Update the store with just the users, as avatars rely on them.\n    MemberListStore.loadInitialData(memberUsers.map(getMemberUser));\n\n    return members;\n  } catch (err) {\n    Sentry.setExtras({\n      resp: err,\n    });\n    Sentry.captureException(err);\n  }\n\n  return [];\n}\n\ntype IndexedMembersByProject = Record<string, Member['user'][]>;\n\n/**\n * Convert a list of members with user & project data\n * into a object that maps project slugs : users in that project.\n */\nexport function indexMembersByProject(members: Member[]): IndexedMembersByProject {\n  return members.reduce((acc, member) => {\n    for (const project of member.projects) {\n      if (!acc.hasOwnProperty(project)) {\n        acc[project] = [];\n      }\n      acc[project].push(member.user);\n    }\n    return acc;\n  }, {});\n}\n\ntype UpdateMemberOptions = {\n  data: Member | null;\n  memberId: string;\n  orgId: string;\n};\n\nexport async function updateMember(\n  api: Client,\n  {orgId, memberId, data}: UpdateMemberOptions\n) {\n  MemberActions.update(memberId, data);\n\n  const endpoint = `/organizations/${orgId}/members/${memberId}/`;\n  try {\n    const resp = await api.requestPromise(endpoint, {\n      method: 'PUT',\n      data,\n    });\n    MemberActions.updateSuccess(resp);\n    return resp;\n  } catch (err) {\n    MemberActions.updateError(err);\n    throw err;\n  }\n}\n\ntype ResendMemberInviteOptions = {\n  memberId: string;\n  orgId: string;\n  data?: object;\n  regenerate?: boolean;\n};\n\nexport async function resendMemberInvite(\n  api: Client,\n  {orgId, memberId, regenerate, data}: ResendMemberInviteOptions\n) {\n  MemberActions.resendMemberInvite(orgId, data);\n\n  const endpoint = `/organizations/${orgId}/members/${memberId}/`;\n  try {\n    const resp = await api.requestPromise(endpoint, {\n      method: 'PUT',\n      data: {\n        regenerate,\n        reinvite: true,\n      },\n    });\n    MemberActions.resendMemberInviteSuccess(resp);\n    return resp;\n  } catch (err) {\n    MemberActions.resendMemberInviteError(err);\n    throw err;\n  }\n}\n\nexport function getCurrentMember(api: Client, orgId: string) {\n  return api.requestPromise(`/organizations/${orgId}/members/me/`);\n}\n","import {forwardRef} from 'react';\nimport styled from '@emotion/styled';\n\nimport Button, {ButtonProps} from 'sentry/components/button';\nimport {IconChevron} from 'sentry/icons';\nimport space from 'sentry/styles/space';\n\nexport type DropdownButtonProps = {\n  /**\n   * Whether or not the button should render as open\n   */\n  isOpen?: boolean;\n  /**\n   * The fixed prefix text to show in the button eg: 'Sort By'\n   */\n  prefix?: React.ReactNode;\n  /**\n   * Should a chevron icon be shown?\n   */\n  showChevron?: boolean;\n} & Omit<ButtonProps, 'type' | 'prefix'>;\n\nconst DropdownButton = forwardRef<\n  React.RefObject<HTMLElement> | null,\n  DropdownButtonProps\n>(\n  (\n    {\n      children,\n      prefix,\n      isOpen = false,\n      showChevron = true,\n      disabled = false,\n      priority = 'form',\n      ...props\n    }: DropdownButtonProps,\n    ref\n  ) => (\n    <StyledButton\n      {...props}\n      type=\"button\"\n      disabled={disabled}\n      priority={priority}\n      isOpen={isOpen}\n      ref={ref}\n    >\n      {prefix && <LabelText>{prefix}</LabelText>}\n      {children}\n      {showChevron && (\n        <StyledChevron\n          size=\"10px\"\n          direction={isOpen ? 'up' : 'down'}\n          aria-hidden=\"true\"\n        />\n      )}\n    </StyledButton>\n  )\n);\n\nconst StyledChevron = styled(IconChevron)`\n  margin-left: ${space(0.75)};\n`;\n\nconst StyledButton = styled(Button)<\n  Required<Pick<DropdownButtonProps, 'isOpen' | 'disabled' | 'priority'>>\n>`\n  position: relative;\n  z-index: 2;\n\n  ${p => (p.isOpen || p.disabled) && 'box-shadow: none;'}\n`;\n\nconst LabelText = styled('span')`\n  &:after {\n    content: ':';\n  }\n\n  font-weight: 400;\n  padding-right: ${space(0.75)};\n`;\n\nexport default DropdownButton;\n","import {useEffect, useRef, useState} from 'react';\nimport {withRouter, WithRouterProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport {useHover, useKeyboard} from '@react-aria/interactions';\nimport {useMenuItem} from '@react-aria/menu';\nimport {mergeProps} from '@react-aria/utils';\nimport {TreeState} from '@react-stately/tree';\nimport {Node} from '@react-types/shared';\n\nimport {IconChevron} from 'sentry/icons';\nimport overflowEllipsis from 'sentry/styles/overflowEllipsis';\nimport space from 'sentry/styles/space';\nimport {Theme} from 'sentry/utils/theme';\n\ntype Priority = 'primary' | 'danger';\nexport type MenuItemProps = {\n  /**\n   * Item key. Must be unique across the entire menu, including sub-menus.\n   */\n  key: string;\n  /**\n   * Sub-items that are nested inside this item. By default, sub-items are\n   * rendered collectively as menu sections inside the current menu. If\n   * `isSubmenu` is true, then they will be rendered together in a sub-menu.\n   */\n  children?: MenuItemProps[];\n  /**\n   * Optional descriptive text. Like 'label', should preferably be a string or\n   * have appropriate aria-labels.\n   */\n  details?: React.ReactNode;\n  /**\n   * Hide item from the dropdown menu. Note: this will also remove the item\n   * from the selection manager.\n   */\n  hidden?: boolean;\n  /*\n   * Whether this menu item is a trigger for a nested sub-menu. Only works\n   * when `children` is also defined.\n   */\n  isSubmenu?: boolean;\n  /**\n   * Item label. Should prefereably be a string. If not, make sure that\n   * there are appropriate aria-labels.\n   */\n  label?: React.ReactNode;\n  /*\n   * Items to be added to the left of the label\n   */\n  leadingItems?: React.ReactNode;\n  /*\n   * Whether leading items should be centered with respect to the entire\n   * height of the menu item. If false (default), they will be centered with\n   * respect to the first line of the label element.\n   */\n  leadingItemsSpanFullHeight?: boolean;\n  /**\n   * Function to call when user selects/clicks/taps on the menu item. The\n   * item's key is passed as an argument.\n   */\n  onAction?: (key: MenuItemProps['key']) => void;\n  /**\n   * Accented text and background (on hover) colors. Primary = purple, and\n   * danger = red.\n   */\n  priority?: Priority;\n  /**\n   * Whether to show a line divider below this menu item\n   */\n  showDividers?: boolean;\n  /**\n   * Passed as the `menuTitle` prop onto the associated sub-menu (applicable\n   * if `children` is defined and `isSubmenu` is true)\n   */\n  submenuTitle?: string;\n  /**\n   * React-router destination if menu item is a link. Note: currently only\n   * internal links (callable with `router.push()`) are supported.\n   */\n  to?: string;\n  /*\n   * Items to be added to the right of the label.\n   */\n  trailingItems?: React.ReactNode;\n  /*\n   * Whether trailing items should be centered wrt/ the entire height of the\n   * menu item. If false (default), they will be centered wrt/ the first line of the\n   * label element.\n   */\n  trailingItemsSpanFullHeight?: boolean;\n};\n\ntype Props = {\n  /**\n   * Whether to close the menu when an item has been clicked/selected\n   */\n  closeOnSelect: boolean;\n  /**\n   * Whether this is the last node in the collection\n   */\n  isLastNode: boolean;\n  /**\n   * Node representation (from @react-aria) of the item\n   */\n  node: Node<MenuItemProps>;\n  /**\n   * Used to close the menu when needed (e.g. when the item is\n   * clicked/selected)\n   */\n  onClose: () => void;\n  /**\n   * Tree state (from @react-stately) inherited from parent menu\n   */\n  state: TreeState<MenuItemProps>;\n  /**\n   * Whether this is a trigger button (displayed as a normal menu item) for a\n   * submenu\n   */\n  isSubmenuTrigger?: boolean;\n  /**\n   * Tag name for item wrapper\n   */\n  renderAs?: React.ElementType;\n  /**\n   * If isSubmenuTrigger is true, then replace the internal ref object with\n   * this ref\n   */\n  submenuTriggerRef?: React.RefObject<HTMLLIElement>;\n} & WithRouterProps;\n\n/**\n * A menu item with a label, optional details, leading and trailing elements.\n * Can also be used as a trigger button for a submenu. See:\n * https://react-spectrum.adobe.com/react-aria/useMenu.html\n */\nconst MenuItem = withRouter(\n  ({\n    node,\n    isLastNode,\n    state,\n    onClose,\n    closeOnSelect,\n    isSubmenuTrigger = false,\n    submenuTriggerRef,\n    renderAs = 'li' as React.ElementType,\n    router,\n    ...submenuTriggerProps\n  }: Props) => {\n    const [isHovering, setIsHovering] = useState(false);\n    const ref = submenuTriggerRef ?? useRef(null);\n    const isDisabled = state.disabledKeys.has(node.key);\n    const isFocused = state.selectionManager.focusedKey === node.key;\n    const item = node.value;\n\n    const actionHandler = () => {\n      if (isSubmenuTrigger) {\n        state.selectionManager.select(node.key);\n        return;\n      }\n      item.onAction?.(item.key);\n      item.to && router.push(item.to);\n    };\n\n    // Open submenu on hover\n    const {hoverProps} = useHover({onHoverChange: setIsHovering});\n    useEffect(() => {\n      if (isHovering && isFocused) {\n        if (isSubmenuTrigger) {\n          state.selectionManager.select(node.key);\n          return;\n        }\n        state.selectionManager.clearSelection();\n      }\n    }, [isHovering, isFocused]);\n\n    // Open submenu on arrow right key press\n    const {keyboardProps} = useKeyboard({\n      onKeyDown: e => {\n        if (isSubmenuTrigger && e.key === 'ArrowRight') {\n          state.selectionManager.select(node.key);\n          return;\n        }\n        e.continuePropagation();\n      },\n    });\n\n    // Manage interactive events & create aria attributes\n    const {menuItemProps, labelProps, descriptionProps} = useMenuItem(\n      {\n        key: node.key,\n        onAction: actionHandler,\n        onClose,\n        closeOnSelect,\n        isDisabled,\n      },\n      state,\n      ref\n    );\n\n    // Merged menu item props, class names are combined, event handlers chained,\n    // etc. See: https://react-spectrum.adobe.com/react-aria/mergeProps.html\n    const props = mergeProps(\n      submenuTriggerProps,\n      menuItemProps,\n      hoverProps,\n      keyboardProps\n    );\n    const {\n      priority,\n      details,\n      leadingItems,\n      leadingItemsSpanFullHeight,\n      trailingItems,\n      trailingItemsSpanFullHeight,\n    } = item;\n    const label = node.rendered ?? item.label;\n    const showDividers = item.showDividers && !isLastNode;\n\n    return (\n      <MenuItemWrap\n        ref={ref}\n        as={renderAs}\n        isDisabled={isDisabled}\n        priority={priority}\n        data-test-id={item.key}\n        {...(item.to && {'data-test-href': item.to})}\n        {...props}\n        {...(isSubmenuTrigger && {role: 'menuitemradio'})}\n      >\n        <InnerWrap isFocused={isFocused} priority={priority}>\n          {leadingItems && (\n            <LeadingItems\n              isDisabled={isDisabled}\n              spanFullHeight={leadingItemsSpanFullHeight}\n            >\n              {leadingItems}\n            </LeadingItems>\n          )}\n          <ContentWrap isFocused={isFocused} showDividers={showDividers}>\n            <LabelWrap>\n              <Label {...labelProps} aria-hidden=\"true\">\n                {label}\n              </Label>\n              {details && (\n                <Details\n                  isDisabled={isDisabled}\n                  priority={priority}\n                  {...descriptionProps}\n                >\n                  {details}\n                </Details>\n              )}\n            </LabelWrap>\n            {(trailingItems || isSubmenuTrigger) && (\n              <TrailingItems\n                isDisabled={isDisabled}\n                spanFullHeight={trailingItemsSpanFullHeight}\n              >\n                {trailingItems}\n                {isSubmenuTrigger && (\n                  <IconChevron size=\"xs\" direction=\"right\" aria-hidden=\"true\" />\n                )}\n              </TrailingItems>\n            )}\n          </ContentWrap>\n        </InnerWrap>\n      </MenuItemWrap>\n    );\n  }\n);\nexport default MenuItem;\n\nconst MenuItemWrap = styled('li')<{\n  isDisabled?: boolean;\n  isFocused?: boolean;\n  priority?: Priority;\n}>`\n  position: static;\n  list-style-type: none;\n  margin: 0;\n  padding: 0 ${space(0.5)};\n  cursor: pointer;\n\n  color: ${p => p.theme.textColor};\n  ${p => p.priority === 'primary' && `color: ${p.theme.activeText};`}\n  ${p => p.priority === 'danger' && `color: ${p.theme.errorText};`}\n  ${p =>\n    p.isDisabled &&\n    `\n    color: ${p.theme.subText};\n    cursor: initial;\n  `}\n\n  &:focus {\n    outline: none;\n  }\n  &:focus-visible {\n    outline: none;\n  }\n`;\n\nconst getHoverBackground = (theme: Theme, priority?: Priority) => {\n  let hoverBackground: string;\n  switch (priority) {\n    case 'primary':\n      hoverBackground = theme.purple100;\n      break;\n    case 'danger':\n      hoverBackground = theme.red100;\n      break;\n    default:\n      hoverBackground = theme.hover;\n  }\n\n  return `background: ${hoverBackground}; z-index: 1;`;\n};\n\nconst InnerWrap = styled('div')<{isFocused: boolean; priority?: Priority}>`\n  display: flex;\n  position: relative;\n  padding: 0 ${space(1)};\n  border-radius: ${p => p.theme.borderRadius};\n  box-sizing: border-box;\n\n  ${p => p.isFocused && getHoverBackground(p.theme, p.priority)}\n`;\n\nconst LeadingItems = styled('div')<{isDisabled?: boolean; spanFullHeight?: boolean}>`\n  display: flex;\n  align-items: center;\n  height: 1.4em;\n  gap: ${space(1)};\n  padding: ${space(1)} 0;\n  margin-top: ${space(1)};\n  margin-right: ${space(0.5)};\n\n  ${p => p.isDisabled && `opacity: 0.5;`}\n  ${p => p.spanFullHeight && `height: 100%;`}\n`;\n\nconst ContentWrap = styled('div')<{isFocused: boolean; showDividers?: boolean}>`\n  position: relative;\n  width: 100%;\n  display: flex;\n  gap: ${space(2)};\n  justify-content: space-between;\n  padding: ${space(1)} 0;\n  margin-left: ${space(0.5)};\n\n  ${p =>\n    p.showDividers &&\n    !p.isFocused &&\n    `\n      &::after {\n        content: '';\n        position: absolute;\n        left: 0;\n        bottom: 0;\n        width: 100%;\n        height: 1px;\n        box-shadow:  0 1px 0 0 ${p.theme.innerBorder};\n      }\n    `}\n`;\n\nconst LabelWrap = styled('div')`\n  padding-right: ${space(1)};\n  width: 100%;\n`;\n\nconst Label = styled('p')`\n  margin-bottom: 0;\n  line-height: 1.4;\n  white-space: nowrap;\n  ${overflowEllipsis}\n`;\n\nconst Details = styled('p')<{isDisabled: boolean; priority?: Priority}>`\n  font-size: ${p => p.theme.fontSizeSmall};\n  color: ${p => p.theme.subText};\n  line-height: 1.2;\n  margin-bottom: 0;\n  ${overflowEllipsis}\n\n  ${p => p.priority === 'primary' && `color: ${p.theme.activeText};`}\n  ${p => p.priority === 'danger' && `color: ${p.theme.errorText};`}\n  ${p => p.isDisabled && `color: ${p.theme.subText};`}\n`;\n\nconst TrailingItems = styled('div')<{isDisabled?: boolean; spanFullHeight?: boolean}>`\n  display: flex;\n  align-items: center;\n  height: 1.4em;\n  gap: ${space(1)};\n  margin-right: ${space(0.5)};\n\n  ${p => p.isDisabled && `opacity: 0.5;`}\n  ${p => p.spanFullHeight && `height: 100%;`}\n`;\n","import styled from '@emotion/styled';\nimport {useMenuSection} from '@react-aria/menu';\nimport {Node} from '@react-types/shared';\n\nimport {MenuItemProps} from 'sentry/components/dropdownMenuItemV2';\nimport space from 'sentry/styles/space';\n\ntype Props = {\n  children: React.ReactNode;\n  node: Node<MenuItemProps>;\n};\n\n/**\n * A wrapper component for menu sections. See:\n * https://react-spectrum.adobe.com/react-aria/useMenu.html\n */\nfunction MenuSection({node, children}: Props) {\n  const {itemProps, headingProps, groupProps} = useMenuSection({\n    heading: node.rendered,\n    'aria-label': node['aria-label'],\n  });\n\n  return (\n    <MenuSectionWrap {...itemProps}>\n      {node.rendered && <Heading {...headingProps}>{node.rendered}</Heading>}\n      <Group {...groupProps}>{children}</Group>\n    </MenuSectionWrap>\n  );\n}\n\nexport default MenuSection;\n\nconst MenuSectionWrap = styled('li')`\n  list-style-type: none;\n`;\n\nconst Heading = styled('span')`\n  display: inline-block;\n  font-weight: 600;\n  font-size: ${p => p.theme.fontSizeSmall};\n  color: ${p => p.theme.subText};\n  text-transform: uppercase;\n  white-space: nowrap;\n  margin: ${space(1)} ${space(1.5)} ${space(0.5)};\n  padding-right: ${space(1)};\n\n  ${/* sc-selector */ MenuSectionWrap}:first-of-type & {\n    margin-top: ${space(0.5)};\n  }\n`;\n\nconst Group = styled('ul')`\n  list-style-type: none;\n  padding: 0;\n  margin: 0;\n`;\n","import {Fragment, useEffect, useRef, useState} from 'react';\nimport styled from '@emotion/styled';\nimport {FocusScope} from '@react-aria/focus';\nimport {useKeyboard} from '@react-aria/interactions';\nimport {AriaMenuOptions, useMenu} from '@react-aria/menu';\nimport {\n  AriaPositionProps,\n  OverlayProps,\n  PositionAria,\n  useOverlay,\n  useOverlayPosition,\n} from '@react-aria/overlays';\nimport {useSeparator} from '@react-aria/separator';\nimport {mergeProps} from '@react-aria/utils';\nimport {useTreeState} from '@react-stately/tree';\nimport {Node} from '@react-types/shared';\n\nimport MenuControl from 'sentry/components/dropdownMenuControlV2';\nimport MenuItem, {MenuItemProps} from 'sentry/components/dropdownMenuItemV2';\nimport MenuSection from 'sentry/components/dropdownMenuSectionV2';\nimport space from 'sentry/styles/space';\n\ntype Props = {\n  /**\n   * If this is a submenu, it will in some cases need to close the root menu\n   * (e.g. when a submenu item is clicked).\n   */\n  closeRootMenu: () => void;\n  /**\n   * Whether this is a submenu\n   */\n  isSubmenu: boolean;\n  /**\n   * Ref object to the trigger element, needed for useOverlayPosition()\n   */\n  triggerRef: React.RefObject<HTMLButtonElement>;\n  /**\n   * If this is a submenu, it will in some cases need to close itself (e.g.\n   * when the user presses the arrow left key)\n   */\n  closeCurrentSubmenu?: () => void;\n  /**\n   * Whether the menu should close when an item has been clicked/selected\n   */\n  closeOnSelect?: boolean;\n  /*\n   * Title to display on top of the menu\n   */\n  menuTitle?: string;\n  onClose?: () => void;\n  /**\n   * Current width of the trigger element. This is used as the menu's minumum\n   * width.\n   */\n  triggerWidth?: number;\n} & AriaMenuOptions<MenuItemProps> &\n  Partial<OverlayProps> &\n  Partial<AriaPositionProps>;\n\nfunction Menu({\n  offset = 8,\n  crossOffset = 0,\n  containerPadding = 0,\n  placement = 'bottom left',\n  closeOnSelect = true,\n  triggerRef,\n  triggerWidth,\n  isSubmenu,\n  menuTitle,\n  closeRootMenu,\n  closeCurrentSubmenu,\n  isDismissable = true,\n  shouldCloseOnBlur = true,\n  ...props\n}: Props) {\n  const state = useTreeState<MenuItemProps>({...props, selectionMode: 'single'});\n  const stateCollection = [...state.collection];\n\n  // Implement focus states, keyboard navigation, aria-label,...\n  const menuRef = useRef(null);\n  const {menuProps} = useMenu({...props, selectionMode: 'single'}, state, menuRef);\n\n  // If this is a submenu, pressing arrow left should close it (but not the\n  // root menu).\n  const {keyboardProps} = useKeyboard({\n    onKeyDown: e => {\n      if (isSubmenu && e.key === 'ArrowLeft') {\n        closeCurrentSubmenu?.();\n        return;\n      }\n      e.continuePropagation();\n    },\n  });\n\n  // Close the menu on outside interaction, blur, or Esc key press, and\n  // control its position relative to the trigger button. See:\n  // https://react-spectrum.adobe.com/react-aria/useOverlay.html\n  // https://react-spectrum.adobe.com/react-aria/useOverlayPosition.html\n  const overlayRef = useRef(null);\n  const {overlayProps} = useOverlay(\n    {\n      onClose: closeRootMenu,\n      shouldCloseOnBlur,\n      isDismissable,\n      isOpen: true,\n    },\n    overlayRef\n  );\n  const {overlayProps: positionProps, placement: placementProp} = useOverlayPosition({\n    targetRef: triggerRef,\n    overlayRef,\n    offset,\n    crossOffset,\n    placement,\n    containerPadding,\n    isOpen: true,\n    // useOverlayPosition's algorithm doesn't work well for submenus on viewport\n    // scroll. Changing the boundary element (document.body by default) seems to\n    // fix this.\n    boundaryElement: document.querySelector<HTMLElement>('.app') ?? undefined,\n  });\n\n  // Store whether this menu/submenu is the current focused one, which in a\n  // nested, tree-like menu system should be the leaf submenu. This\n  // information is used for controlling keyboard events. See:\n  // modifiedMenuProps below.\n  const [hasFocus, setHasFocus] = useState(true);\n  useEffect(() => {\n    // A submenu is a leaf when it does not contain any expanded submenu. This\n    // logically follows from the tree-like structure and single-selection\n    // nature of menus.\n    const isLeafSubmenu = !stateCollection.some(node => {\n      const isSection = node.hasChildNodes && !node.value.isSubmenu;\n      // A submenu with key [key] is expanded if\n      // state.selectionManager.isSelected([key]) = true\n      return isSection\n        ? [...node.childNodes].some(child =>\n            state.selectionManager.isSelected(`${child.key}`)\n          )\n        : state.selectionManager.isSelected(`${node.key}`);\n    });\n    setHasFocus(isLeafSubmenu);\n  }, [state.selectionManager.selectedKeys]);\n  // Menu props from useMenu, modified to disable keyboard events if the\n  // current menu does not have focus.\n  const modifiedMenuProps = {\n    ...menuProps,\n    ...(!hasFocus && {\n      onKeyUp: () => null,\n      onKeyDown: () => null,\n    }),\n  };\n\n  // Render a single menu item\n  const renderItem = (node: Node<MenuItemProps>, isLastNode: boolean) => {\n    return (\n      <MenuItem\n        node={node}\n        isLastNode={isLastNode}\n        state={state}\n        onClose={closeRootMenu}\n        closeOnSelect={closeOnSelect}\n      />\n    );\n  };\n\n  // Render a submenu whose trigger button is a menu item\n  const renderItemWithSubmenu = (node: Node<MenuItemProps>, isLastNode: boolean) => {\n    const trigger = ({props: submenuTriggerProps, ref: submenuTriggerRef}) => (\n      <MenuItem\n        renderAs=\"div\"\n        node={node}\n        isLastNode={isLastNode}\n        state={state}\n        isSubmenuTrigger\n        submenuTriggerRef={submenuTriggerRef}\n        {...submenuTriggerProps}\n      />\n    );\n\n    return (\n      <MenuControl\n        items={node.value.children as MenuItemProps[]}\n        trigger={trigger}\n        menuTitle={node.value.submenuTitle}\n        placement=\"right top\"\n        offset={-4}\n        crossOffset={-8}\n        closeOnSelect={closeOnSelect}\n        isOpen={state.selectionManager.isSelected(node.key)}\n        isSubmenu\n        closeRootMenu={closeRootMenu}\n        closeCurrentSubmenu={() => state.selectionManager.clearSelection()}\n        renderWrapAs=\"li\"\n      />\n    );\n  };\n\n  // Render a collection of menu items\n  const renderCollection = (collection: Node<MenuItemProps>[]) =>\n    collection.map((node, i) => {\n      const isLastNode = collection.length - 1 === i;\n      const showSeparator =\n        !isLastNode && (node.type === 'section' || collection[i + 1]?.type === 'section');\n      const {separatorProps} = useSeparator({elementType: 'li'});\n\n      let itemToRender: React.ReactNode;\n\n      if (node.type === 'section') {\n        itemToRender = (\n          <MenuSection node={node}>{renderCollection([...node.childNodes])}</MenuSection>\n        );\n      } else {\n        itemToRender = node.value.isSubmenu\n          ? renderItemWithSubmenu(node, isLastNode)\n          : renderItem(node, isLastNode);\n      }\n\n      return (\n        <Fragment key={node.key}>\n          {itemToRender}\n          {showSeparator && <Separator {...separatorProps} />}\n        </Fragment>\n      );\n    });\n\n  return (\n    <FocusScope restoreFocus autoFocus>\n      <Overlay\n        ref={overlayRef}\n        placementProp={placementProp}\n        {...mergeProps(overlayProps, positionProps, keyboardProps)}\n      >\n        <MenuWrap\n          ref={menuRef}\n          {...modifiedMenuProps}\n          style={{\n            maxHeight: positionProps.style?.maxHeight,\n            minWidth: triggerWidth,\n          }}\n        >\n          {menuTitle && <MenuTitle>{menuTitle}</MenuTitle>}\n          {renderCollection(stateCollection)}\n        </MenuWrap>\n      </Overlay>\n    </FocusScope>\n  );\n}\n\nexport default Menu;\n\nconst Overlay = styled('div')<{placementProp: PositionAria['placement']}>`\n  max-width: 24rem;\n  border-radius: ${p => p.theme.borderRadius};\n  background: ${p => p.theme.backgroundElevated};\n  box-shadow: 0 0 0 1px ${p => p.theme.translucentBorder}, ${p => p.theme.dropShadowHeavy};\n  font-size: ${p => p.theme.fontSizeMedium};\n\n  margin: ${space(1)} 0;\n  ${p => p.placementProp === 'top' && `margin-bottom: 0;`}\n  ${p => p.placementProp === 'bottom' && `margin-top: 0;`}\n\n  /* Override z-index from useOverlayPosition */\n  z-index: ${p => p.theme.zIndex.dropdown} !important;\n`;\n\nconst MenuWrap = styled('ul')`\n  margin: 0;\n  padding: ${space(0.5)} 0;\n  font-size: ${p => p.theme.fontSizeMedium};\n  overflow-x: hidden;\n  overflow-y: auto;\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nconst MenuTitle = styled('div')`\n  font-weight: 600;\n  font-size: ${p => p.theme.fontSizeSmall};\n  color: ${p => p.theme.headingColor};\n  white-space: nowrap;\n  padding: ${space(0.25)} ${space(1.5)} ${space(0.75)};\n  margin-bottom: ${space(0.5)};\n  border-bottom: solid 1px ${p => p.theme.innerBorder};\n`;\n\nconst Separator = styled('li')`\n  list-style-type: none;\n  border-top: solid 1px ${p => p.theme.innerBorder};\n  margin: ${space(0.5)} ${space(1.5)};\n`;\n","import {useCallback, useEffect, useRef, useState} from 'react';\nimport styled from '@emotion/styled';\nimport {useButton} from '@react-aria/button';\nimport {AriaMenuOptions, useMenuTrigger} from '@react-aria/menu';\nimport {AriaPositionProps, OverlayProps} from '@react-aria/overlays';\nimport {useResizeObserver} from '@react-aria/utils';\nimport {Item, Section} from '@react-stately/collections';\nimport {useMenuTriggerState} from '@react-stately/menu';\nimport {MenuTriggerProps} from '@react-types/menu';\n\nimport DropdownButton, {DropdownButtonProps} from 'sentry/components/dropdownButtonV2';\nimport {MenuItemProps} from 'sentry/components/dropdownMenuItemV2';\nimport Menu from 'sentry/components/dropdownMenuV2';\n\ntype TriggerProps = {\n  props: Omit<React.HTMLAttributes<Element>, 'children'> & {\n    onClick?: (e: MouseEvent) => void;\n  };\n  ref: React.RefObject<HTMLButtonElement>;\n};\n\ntype Props = {\n  /**\n   * Items to display inside the dropdown menu. If the item has a `children`\n   * prop, it will be rendered as a menu section. If it has a `children` prop\n   * and its `isSubmenu` prop is true, it will be rendered as a submenu.\n   */\n  items: MenuItemProps[];\n  /**\n   * Pass class name to the outer wrap\n   */\n  className?: string;\n  /**\n   * If this is a submenu, it will in some cases need to close itself (e.g.\n   * when the user presses the arrow left key)\n   */\n  closeCurrentSubmenu?: () => void;\n  /**\n   * If this is a submenu, it will in some cases need to close the root menu\n   * (e.g. when a submenu item is clicked).\n   */\n  closeRootMenu?: () => void;\n  /**\n   * Whether the trigger is disabled.\n   */\n  isDisabled?: boolean;\n  /**\n   * Whether this is a submenu.\n   */\n  isSubmenu?: boolean;\n  /**\n   * Title for the current menu.\n   */\n  menuTitle?: string;\n  /**\n   * Tag name for the outer wrap, defaults to `div`\n   */\n  renderWrapAs?: React.ElementType;\n  /**\n   * Optionally replace the trigger button with a different component. Note\n   * that the replacement must have the `props` and `ref` (supplied in\n   * TriggerProps) forwarded its outer wrap, otherwise the accessibility\n   * features won't work correctly.\n   */\n  trigger?: (props: TriggerProps) => React.ReactNode;\n  /**\n   * By default, the menu trigger will be rendered as a button, with\n   * triggerLabel as the button label.\n   */\n  triggerLabel?: React.ReactNode;\n  /**\n   * If using the default button trigger (i.e. the custom `trigger` prop has\n   * not been provided), then `triggerProps` will be passed on to the button\n   * component.\n   */\n  triggerProps?: DropdownButtonProps;\n} & Partial<MenuTriggerProps> &\n  Partial<AriaMenuOptions<MenuItemProps>> &\n  Partial<OverlayProps> &\n  Partial<AriaPositionProps>;\n\n/**\n * A menu component that renders both the trigger button and the dropdown\n * menu. See: https://react-spectrum.adobe.com/react-aria/useMenuTrigger.html\n */\nfunction MenuControl({\n  items,\n  trigger,\n  triggerLabel,\n  triggerProps = {},\n  isDisabled: disabledProp,\n  isSubmenu = false,\n  closeRootMenu,\n  closeCurrentSubmenu,\n  renderWrapAs = 'div',\n  className,\n  ...props\n}: Props) {\n  const ref = useRef<HTMLButtonElement>(null);\n  const isDisabled = disabledProp ?? (!items || items.length === 0);\n\n  // Control the menu open state. See:\n  // https://react-spectrum.adobe.com/react-aria/useMenuTrigger.html\n  const state = useMenuTriggerState(props);\n  const {menuTriggerProps, menuProps} = useMenuTrigger(\n    {type: 'menu', isDisabled},\n    state,\n    ref\n  );\n  const {buttonProps} = useButton(\n    {\n      isDisabled,\n      ...menuTriggerProps,\n      ...(isSubmenu && {\n        onKeyUp: e => e.continuePropagation(),\n        onKeyDown: e => e.continuePropagation(),\n        onPress: () => null,\n        onPressStart: () => null,\n        onPressEnd: () => null,\n      }),\n    },\n    ref\n  );\n\n  // Calculate the current trigger element's width. This will be used as\n  // the min width for the menu.\n  const [triggerWidth, setTriggerWidth] = useState<number>();\n  // Update triggerWidth when its size changes using useResizeObserver\n  const updateTriggerWidth = useCallback(async () => {\n    // Wait until the trigger element finishes rendering, otherwise\n    // ResizeObserver might throw an infinite loop error.\n    await new Promise(resolve => setTimeout(resolve));\n\n    const newTriggerWidth = ref.current?.offsetWidth;\n    !isSubmenu && newTriggerWidth && setTriggerWidth(newTriggerWidth);\n  }, [trigger, triggerLabel, triggerProps]);\n  useResizeObserver({ref, onResize: updateTriggerWidth});\n  // If ResizeObserver is not available, manually update the width\n  // when any of [trigger, triggerLabel, triggerProps] changes.\n  useEffect(() => {\n    if (typeof window.ResizeObserver !== 'undefined') {\n      return;\n    }\n    updateTriggerWidth();\n  }, [updateTriggerWidth]);\n\n  // Recursively remove hidden items, including those nested in submenus\n  function removeHiddenItems(source) {\n    return source\n      .filter(item => !item.hidden)\n      .map(item => ({\n        ...item,\n        ...(item.children ? {children: removeHiddenItems(item.children)} : {}),\n      }));\n  }\n\n  function renderTrigger() {\n    if (trigger) {\n      return trigger({\n        props: {\n          ...triggerProps,\n          ...buttonProps,\n          isOpen: state.isOpen,\n        },\n        ref,\n      });\n    }\n    return (\n      <DropdownButton ref={ref} isOpen={state.isOpen} {...triggerProps} {...buttonProps}>\n        {triggerLabel}\n      </DropdownButton>\n    );\n  }\n\n  function renderMenu() {\n    if (!state.isOpen) {\n      return null;\n    }\n\n    return (\n      <Menu\n        {...props}\n        {...menuProps}\n        triggerRef={ref}\n        triggerWidth={triggerWidth}\n        isSubmenu={isSubmenu}\n        isDismissable={!isSubmenu && props.isDismissable}\n        shouldCloseOnBlur={!isSubmenu && props.shouldCloseOnBlur}\n        closeRootMenu={closeRootMenu ?? state.close}\n        closeCurrentSubmenu={closeCurrentSubmenu}\n        items={removeHiddenItems(items)}\n      >\n        {(item: MenuItemProps) => {\n          if (item.children && item.children.length > 0 && !item.isSubmenu) {\n            return (\n              <Section key={item.key} title={item.label} items={item.children}>\n                {sectionItem => <Item {...sectionItem}>{sectionItem.label}</Item>}\n              </Section>\n            );\n          }\n          return <Item {...item}>{item.label}</Item>;\n        }}\n      </Menu>\n    );\n  }\n\n  return (\n    <MenuControlWrap className={className} as={renderWrapAs} role=\"presentation\">\n      {renderTrigger()}\n      {renderMenu()}\n    </MenuControlWrap>\n  );\n}\n\nexport default MenuControl;\n\nconst MenuControlWrap = styled('div')`\n  list-style-type: none;\n`;\n"],"names":["getMemberUser","member","user","role","async","fetchOrgMembers","api","orgId","projectIds","endpoint","query","project","members","requestPromise","method","Sentry","scope","setExtras","Error","memberUsers","filter","MemberListStore","map","err","resp","indexMembersByProject","reduce","acc","projects","hasOwnProperty","push","updateMember","memberId","data","MemberActions","resendMemberInvite","regenerate","reinvite","DropdownButton","forwardRef","ref","children","prefix","isOpen","showChevron","disabled","priority","props","StyledButton","type","LabelText","StyledChevron","size","direction","IconChevron","space","Button","p","withRouter","node","isLastNode","state","onClose","closeOnSelect","isSubmenuTrigger","submenuTriggerRef","renderAs","router","submenuTriggerProps","isHovering","setIsHovering","useState","useRef","isDisabled","disabledKeys","has","key","isFocused","selectionManager","focusedKey","item","value","hoverProps","useHover","onHoverChange","useEffect","select","clearSelection","keyboardProps","useKeyboard","onKeyDown","e","continuePropagation","menuItemProps","labelProps","descriptionProps","useMenuItem","onAction","to","mergeProps","details","leadingItems","leadingItemsSpanFullHeight","trailingItems","trailingItemsSpanFullHeight","label","rendered","showDividers","MenuItemWrap","as","InnerWrap","LeadingItems","spanFullHeight","ContentWrap","LabelWrap","Label","Details","TrailingItems","theme","textColor","activeText","errorText","subText","borderRadius","hoverBackground","purple100","red100","hover","getHoverBackground","innerBorder","overflowEllipsis","fontSizeSmall","MenuSection","itemProps","headingProps","groupProps","useMenuSection","heading","MenuSectionWrap","Heading","Group","Menu","offset","crossOffset","containerPadding","placement","triggerRef","triggerWidth","isSubmenu","menuTitle","closeRootMenu","closeCurrentSubmenu","isDismissable","shouldCloseOnBlur","useTreeState","selectionMode","stateCollection","collection","menuRef","menuProps","useMenu","overlayRef","overlayProps","useOverlay","positionProps","placementProp","useOverlayPosition","targetRef","boundaryElement","document","querySelector","undefined","hasFocus","setHasFocus","isLeafSubmenu","some","hasChildNodes","childNodes","child","isSelected","selectedKeys","modifiedMenuProps","onKeyUp","renderCollection","i","length","showSeparator","separatorProps","useSeparator","elementType","itemToRender","items","trigger","submenuTitle","renderWrapAs","renderItemWithSubmenu","renderItem","Fragment","Separator","restoreFocus","autoFocus","Overlay","MenuWrap","style","maxHeight","minWidth","MenuTitle","backgroundElevated","translucentBorder","dropShadowHeavy","fontSizeMedium","zIndex","dropdown","headingColor","MenuControl","triggerLabel","triggerProps","disabledProp","className","useMenuTriggerState","menuTriggerProps","useMenuTrigger","buttonProps","useButton","onPress","onPressStart","onPressEnd","setTriggerWidth","updateTriggerWidth","useCallback","Promise","resolve","setTimeout","newTriggerWidth","current","offsetWidth","useResizeObserver","onResize","window","ResizeObserver","MenuControlWrap","close","removeHiddenItems","source","hidden","title","sectionItem"],"sourceRoot":""}