{"version":3,"file":"chunks/app_views_alerts_create_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/alerts/incidentRules/create.tsx","webpack:///./app/views/alerts/create.tsx"],"sourcesContent":["import {RouteComponentProps} from 'react-router';\n\nimport {Organization, Project} from 'sentry/types';\nimport {metric} from 'sentry/utils/analytics';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {\n  createDefaultRule,\n  createRuleFromEventView,\n  createRuleFromWizardTemplate,\n} from 'sentry/views/alerts/incidentRules/constants';\nimport {WizardRuleTemplate} from 'sentry/views/alerts/wizard/options';\n\nimport RuleForm from './ruleForm';\n\ntype RouteParams = {\n  orgId: string;\n  projectId: string;\n  ruleId?: string;\n};\n\ntype Props = {\n  eventView: EventView | undefined;\n  organization: Organization;\n  project: Project;\n  userTeamIds: string[];\n  isCustomMetric?: boolean;\n  sessionId?: string;\n  wizardTemplate?: WizardRuleTemplate;\n} & RouteComponentProps<RouteParams, {}>;\n\n/**\n * Show metric rules form with an empty rule. Redirects to alerts list after creation.\n */\nfunction IncidentRulesCreate(props: Props) {\n  function handleSubmitSuccess(data: any) {\n    const {router, project} = props;\n    const {orgId} = props.params;\n    const alertRuleId: string | undefined = data\n      ? (data.id as string | undefined)\n      : undefined;\n\n    metric.endTransaction({name: 'saveAlertRule'});\n    router.push(\n      alertRuleId\n        ? {pathname: `/organizations/${orgId}/alerts/rules/details/${alertRuleId}/`}\n        : {\n            pathname: `/organizations/${orgId}/alerts/rules/`,\n            query: {project: project.id},\n          }\n    );\n  }\n\n  const {project, eventView, wizardTemplate, sessionId, userTeamIds, ...otherProps} =\n    props;\n  const defaultRule = eventView\n    ? createRuleFromEventView(eventView)\n    : wizardTemplate\n    ? createRuleFromWizardTemplate(wizardTemplate)\n    : createDefaultRule();\n\n  const projectTeamIds = new Set(project.teams.map(({id}) => id));\n  const defaultOwnerId = userTeamIds.find(id => projectTeamIds.has(id)) ?? null;\n  defaultRule.owner = defaultOwnerId && `team:${defaultOwnerId}`;\n\n  return (\n    <RuleForm\n      onSubmitSuccess={handleSubmitSuccess}\n      rule={{...defaultRule, projects: [project.slug]}}\n      sessionId={sessionId}\n      project={project}\n      userTeamIds={userTeamIds}\n      {...otherProps}\n    />\n  );\n}\n\nexport default IncidentRulesCreate;\n","import {Component, Fragment} from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {uniqueId} from 'sentry/utils/guid';\nimport Teams from 'sentry/utils/teams';\nimport BuilderBreadCrumbs from 'sentry/views/alerts/builder/builderBreadCrumbs';\nimport IncidentRulesCreate from 'sentry/views/alerts/incidentRules/create';\nimport IssueRuleEditor from 'sentry/views/alerts/issueRuleEditor';\nimport {\n  AlertType as WizardAlertType,\n  AlertWizardAlertNames,\n  WizardRuleTemplate,\n} from 'sentry/views/alerts/wizard/options';\nimport {getAlertTypeFromAggregateDataset} from 'sentry/views/alerts/wizard/utils';\n\ntype RouteParams = {\n  orgId: string;\n  projectId: string;\n};\n\ntype Props = RouteComponentProps<RouteParams, {}> & {\n  hasMetricAlerts: boolean;\n  organization: Organization;\n  project: Project;\n};\n\ntype AlertType = 'metric' | 'issue';\n\ntype State = {\n  alertType: AlertType;\n};\n\nclass Create extends Component<Props, State> {\n  state = this.getInitialState();\n\n  getInitialState(): State {\n    const {organization, location, project} = this.props;\n    const {createFromDiscover, createFromWizard, aggregate, dataset, eventTypes} =\n      location?.query ?? {};\n    let alertType: AlertType = 'issue';\n\n    // Alerts can only be created via create from discover or alert wizard\n    if (createFromDiscover) {\n      alertType = 'metric';\n    } else if (createFromWizard) {\n      if (aggregate && dataset && eventTypes) {\n        alertType = 'metric';\n      } else {\n        // Just to be explicit\n        alertType = 'issue';\n      }\n    } else {\n      browserHistory.replace(\n        `/organizations/${organization.slug}/alerts/${project.slug}/wizard`\n      );\n    }\n\n    return {alertType};\n  }\n\n  componentDidMount() {\n    const {organization, project} = this.props;\n    trackAdvancedAnalyticsEvent('new_alert_rule.viewed', {\n      organization,\n      project_id: project.id,\n      session_id: this.sessionId,\n      alert_type: this.state.alertType,\n    });\n  }\n\n  /** Used to track analytics within one visit to the creation page */\n  sessionId = uniqueId();\n\n  render() {\n    const {\n      hasMetricAlerts,\n      organization,\n      project,\n      params: {projectId},\n      location,\n      routes,\n    } = this.props;\n    const {alertType} = this.state;\n    const {aggregate, dataset, eventTypes, createFromWizard, createFromDiscover} =\n      location?.query ?? {};\n    const wizardTemplate: WizardRuleTemplate = {aggregate, dataset, eventTypes};\n    const eventView = createFromDiscover ? EventView.fromLocation(location) : undefined;\n\n    let wizardAlertType: undefined | WizardAlertType;\n    if (createFromWizard && alertType === 'metric') {\n      wizardAlertType = wizardTemplate\n        ? getAlertTypeFromAggregateDataset(wizardTemplate)\n        : 'issues';\n    }\n\n    const title = t('New Alert Rule');\n\n    return (\n      <Fragment>\n        <SentryDocumentTitle title={title} projectSlug={projectId} />\n\n        <Layout.Header>\n          <StyledHeaderContent>\n            <BuilderBreadCrumbs\n              orgSlug={organization.slug}\n              alertName={t('Set Conditions')}\n              title={wizardAlertType ? t('Select Alert') : title}\n              projectSlug={projectId}\n              routes={routes}\n              location={location}\n              canChangeProject\n            />\n            <Layout.Title>\n              {wizardAlertType\n                ? `${t('Set Conditions for')} ${AlertWizardAlertNames[wizardAlertType]}`\n                : title}\n            </Layout.Title>\n          </StyledHeaderContent>\n        </Layout.Header>\n        <AlertConditionsBody>\n          <StyledLayoutMain fullWidth>\n            <Teams provideUserTeams>\n              {({teams, initiallyLoaded}) =>\n                initiallyLoaded ? (\n                  <Fragment>\n                    {(!hasMetricAlerts || alertType === 'issue') && (\n                      <IssueRuleEditor\n                        {...this.props}\n                        project={project}\n                        userTeamIds={teams.map(({id}) => id)}\n                      />\n                    )}\n\n                    {hasMetricAlerts && alertType === 'metric' && (\n                      <IncidentRulesCreate\n                        {...this.props}\n                        eventView={eventView}\n                        wizardTemplate={wizardTemplate}\n                        sessionId={this.sessionId}\n                        project={project}\n                        isCustomMetric={wizardAlertType === 'custom'}\n                        userTeamIds={teams.map(({id}) => id)}\n                      />\n                    )}\n                  </Fragment>\n                ) : (\n                  <LoadingIndicator />\n                )\n              }\n            </Teams>\n          </StyledLayoutMain>\n        </AlertConditionsBody>\n      </Fragment>\n    );\n  }\n}\n\nconst AlertConditionsBody = styled(Layout.Body)`\n  margin-bottom: -${space(3)};\n`;\n\nconst StyledLayoutMain = styled(Layout.Main)`\n  max-width: 1000px;\n`;\n\nconst StyledHeaderContent = styled(Layout.HeaderContent)`\n  overflow: visible;\n`;\n\nexport default Create;\n"],"names":["IncidentRulesCreate","props","project","eventView","wizardTemplate","sessionId","userTeamIds","otherProps","defaultRule","createRuleFromEventView","createRuleFromWizardTemplate","createDefaultRule","projectTeamIds","Set","teams","map","id","defaultOwnerId","find","has","owner","onSubmitSuccess","data","router","orgId","params","alertRuleId","undefined","metric","name","push","pathname","query","rule","projects","slug","Create","Component","this","getInitialState","uniqueId","organization","location","createFromDiscover","createFromWizard","aggregate","dataset","eventTypes","alertType","browserHistory","componentDidMount","trackAdvancedAnalyticsEvent","project_id","session_id","alert_type","state","render","hasMetricAlerts","projectId","routes","EventView","wizardAlertType","getAlertTypeFromAggregateDataset","title","t","Fragment","projectSlug","StyledHeaderContent","orgSlug","alertName","canChangeProject","AlertWizardAlertNames","AlertConditionsBody","StyledLayoutMain","fullWidth","provideUserTeams","initiallyLoaded","isCustomMetric","Layout","space"],"sourceRoot":""}