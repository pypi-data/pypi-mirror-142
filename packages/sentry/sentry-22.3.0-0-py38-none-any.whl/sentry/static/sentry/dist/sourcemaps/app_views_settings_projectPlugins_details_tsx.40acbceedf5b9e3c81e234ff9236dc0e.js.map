{"version":3,"file":"chunks/app_views_settings_projectPlugins_details_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/stores/pluginsStore.tsx","webpack:///./app/utils/withPlugins.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/projectPlugins/details.tsx"],"sourcesContent":["import Reflux from 'reflux';\n\nimport PluginActions from 'sentry/actions/pluginActions';\nimport {Plugin} from 'sentry/types';\n\ntype PluginStoreInterface = {\n  plugins: Map<string, Plugin> | null;\n  state: {\n    error: Error | null;\n    loading: boolean;\n    pageLinks: string | null;\n    plugins: Plugin[];\n  };\n  updating: Map<string, Plugin>;\n};\n\nconst defaultState = {\n  loading: true,\n  plugins: [],\n  error: null,\n  pageLinks: null,\n};\n\nconst storeConfig: Reflux.StoreDefinition & PluginStoreInterface = {\n  plugins: null,\n  state: {...defaultState},\n  updating: new Map(),\n\n  reset() {\n    // reset our state\n    this.plugins = null;\n    this.state = {...defaultState};\n    this.updating = new Map();\n    return this.state;\n  },\n\n  getInitialState() {\n    return this.getState();\n  },\n\n  getState() {\n    const {plugins: _plugins, ...state} = this.state;\n\n    return {\n      ...state,\n      plugins: this.plugins ? Array.from(this.plugins.values()) : [],\n    };\n  },\n\n  init() {\n    this.reset();\n    this.listenTo(PluginActions.fetchAll, this.onFetchAll);\n    this.listenTo(PluginActions.fetchAllSuccess, this.onFetchAllSuccess);\n    this.listenTo(PluginActions.fetchAllError, this.onFetchAllError);\n    this.listenTo(PluginActions.update, this.onUpdate);\n    this.listenTo(PluginActions.updateSuccess, this.onUpdateSuccess);\n    this.listenTo(PluginActions.updateError, this.onUpdateError);\n  },\n\n  triggerState() {\n    this.trigger(this.getState());\n  },\n\n  onFetchAll({resetLoading}: {resetLoading?: boolean} = {}) {\n    if (resetLoading) {\n      this.state.loading = true;\n      this.state.error = null;\n      this.plugins = null;\n    }\n\n    this.triggerState();\n  },\n\n  onFetchAllSuccess(data: Plugin[], {pageLinks}: {pageLinks?: string}) {\n    this.plugins = new Map(data.map(plugin => [plugin.id, plugin]));\n    this.state.pageLinks = pageLinks || null;\n    this.state.loading = false;\n    this.triggerState();\n  },\n\n  onFetchAllError(err) {\n    this.plugins = null;\n    this.state.loading = false;\n    this.state.error = err;\n    this.triggerState();\n  },\n\n  onUpdate(id: string, updateObj: Partial<Plugin>) {\n    if (!this.plugins) {\n      return;\n    }\n\n    const plugin = this.plugins.get(id);\n    if (!plugin) {\n      return;\n    }\n    const newPlugin = {\n      ...plugin,\n      ...updateObj,\n    };\n\n    this.plugins.set(id, newPlugin);\n    this.updating.set(id, plugin);\n    this.triggerState();\n  },\n\n  onUpdateSuccess(id: string, _updateObj: Partial<Plugin>) {\n    this.updating.delete(id);\n  },\n\n  onUpdateError(id: string, _updateObj: Partial<Plugin>, err) {\n    const origPlugin = this.updating.get(id);\n    if (!origPlugin || !this.plugins) {\n      return;\n    }\n\n    this.plugins.set(id, origPlugin);\n    this.updating.delete(id);\n    this.state.error = err;\n    this.triggerState();\n  },\n};\n\nconst PluginStore = Reflux.createStore(storeConfig) as Reflux.Store &\n  PluginStoreInterface;\n\nexport default PluginStore;\n","import * as React from 'react';\n\nimport {fetchPlugins} from 'sentry/actionCreators/plugins';\nimport PluginsStore from 'sentry/stores/pluginsStore';\nimport {Organization, Plugin, Project} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport getDisplayName from 'sentry/utils/getDisplayName';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport withProject from 'sentry/utils/withProject';\n\ntype WithPluginProps = {\n  organization: Organization;\n  project?: Project;\n};\n\ntype State = {\n  loading: boolean;\n  plugins: Plugin[];\n};\n\n/**\n * Higher order component that fetches list of plugins and\n * passes PluginsStore to component as `plugins`\n */\nfunction withPlugins<P extends WithPluginProps>(\n  WrappedComponent: React.ComponentType<P>\n) {\n  class WithPlugins extends React.Component<\n    Omit<P, keyof 'plugins'> & WithPluginProps,\n    State\n  > {\n    static displayName = `withPlugins(${getDisplayName(WrappedComponent)})`;\n    state = {plugins: [], loading: true};\n\n    componentDidMount() {\n      this.fetchPlugins();\n    }\n\n    componentDidUpdate(prevProps, _prevState, prevContext) {\n      const {organization, project} = this.props;\n\n      // Only fetch plugins when a org slug or project slug has changed\n      const prevOrg = prevProps.organization || prevContext?.organization;\n      const prevProject = prevProps.project || prevContext?.project;\n\n      // If previous org/project is undefined then it means:\n      // the HoC has mounted, `fetchPlugins` has been called (via cDM), and\n      // store was updated. We don't need to fetchPlugins again (or it will cause an infinite loop)\n      //\n      // This is for the unusual case where component is mounted and receives a new org/project prop\n      // e.g. when switching projects via breadcrumbs in settings.\n      if (!defined(prevProject) || !defined(prevOrg)) {\n        return;\n      }\n\n      const isOrgSame = prevOrg.slug === organization.slug;\n      const isProjectSame = prevProject.slug === project?.slug;\n\n      // Don't do anything if org and project are the same\n      if (isOrgSame && isProjectSame) {\n        return;\n      }\n\n      this.fetchPlugins();\n    }\n\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n\n    unsubscribe = PluginsStore.listen(({plugins, loading}: State) => {\n      // State is destructured as store updates contain additional keys\n      // that are not exposed by this HoC\n      this.setState({plugins, loading});\n    }, undefined);\n\n    fetchPlugins() {\n      const {organization, project} = this.props;\n\n      if (!project || !organization) {\n        return;\n      }\n\n      fetchPlugins({projectId: project.slug, orgId: organization.slug});\n    }\n\n    render() {\n      return (\n        <WrappedComponent {...(this.props as P & WithPluginProps)} plugins={this.state} />\n      );\n    }\n  }\n  return withOrganization(withProject(WithPlugins));\n}\n\nexport default withPlugins;\n","import * as React from 'react';\n\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'sentry/actionCreators/indicator';\nimport {disablePlugin, enablePlugin} from 'sentry/actionCreators/plugins';\nimport Button from 'sentry/components/button';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport PluginConfig from 'sentry/components/pluginConfig';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, Plugin, Project} from 'sentry/types';\nimport {trackIntegrationAnalytics} from 'sentry/utils/integrationUtil';\nimport withPlugins from 'sentry/utils/withPlugins';\nimport AsyncView from 'sentry/views/asyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\n\ntype Props = {\n  organization: Organization;\n  plugins: {\n    plugins: Plugin[];\n  };\n  project: Project;\n} & RouteComponentProps<{orgId: string; pluginId: string; projectId: string}, {}>;\n\ntype State = {\n  pluginDetails?: Plugin;\n} & AsyncView['state'];\n\n/**\n * There are currently two sources of truths for plugin details:\n *\n * 1) PluginsStore has a list of plugins, and this is where ENABLED state lives\n * 2) We fetch \"plugin details\" via API and save it to local state as `pluginDetails`.\n *    This is because \"details\" call contains form `config` and the \"list\" endpoint does not.\n *    The more correct way would be to pass `config` to PluginConfig and use plugin from\n *    PluginsStore\n */\nclass ProjectPluginDetails extends AsyncView<Props, State> {\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    super.componentDidUpdate(prevProps, prevState);\n    if (prevProps.params.pluginId !== this.props.params.pluginId) {\n      this.recordDetailsViewed();\n    }\n  }\n  componentDidMount() {\n    this.recordDetailsViewed();\n  }\n\n  recordDetailsViewed() {\n    const {pluginId} = this.props.params;\n\n    trackIntegrationAnalytics('integrations.details_viewed', {\n      integration: pluginId,\n      integration_type: 'plugin',\n      view: 'plugin_details',\n      organization: this.props.organization,\n    });\n  }\n\n  getTitle() {\n    const {plugin} = this.state;\n    if (plugin && plugin.name) {\n      return plugin.name;\n    }\n    return 'Sentry';\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {projectId, orgId, pluginId} = this.props.params;\n    return [['pluginDetails', `/projects/${orgId}/${projectId}/plugins/${pluginId}/`]];\n  }\n\n  trimSchema(value) {\n    return value.split('//')[1];\n  }\n\n  handleReset = () => {\n    const {projectId, orgId, pluginId} = this.props.params;\n\n    addLoadingMessage(t('Saving changes\\u2026'));\n    trackIntegrationAnalytics('integrations.uninstall_clicked', {\n      integration: pluginId,\n      integration_type: 'plugin',\n      view: 'plugin_details',\n      organization: this.props.organization,\n    });\n\n    this.api.request(`/projects/${orgId}/${projectId}/plugins/${pluginId}/`, {\n      method: 'POST',\n      data: {reset: true},\n      success: pluginDetails => {\n        this.setState({pluginDetails});\n        addSuccessMessage(t('Plugin was reset'));\n        trackIntegrationAnalytics('integrations.uninstall_completed', {\n          integration: pluginId,\n          integration_type: 'plugin',\n          view: 'plugin_details',\n          organization: this.props.organization,\n        });\n      },\n      error: () => {\n        addErrorMessage(t('An error occurred'));\n      },\n    });\n  };\n\n  handleEnable = () => {\n    enablePlugin(this.props.params);\n    this.analyticsChangeEnableStatus(true);\n  };\n\n  handleDisable = () => {\n    disablePlugin(this.props.params);\n    this.analyticsChangeEnableStatus(false);\n  };\n\n  analyticsChangeEnableStatus = (enabled: boolean) => {\n    const {pluginId} = this.props.params;\n    const eventKey = enabled ? 'integrations.enabled' : 'integrations.disabled';\n    trackIntegrationAnalytics(eventKey, {\n      integration: pluginId,\n      integration_type: 'plugin',\n      view: 'plugin_details',\n      organization: this.props.organization,\n    });\n  };\n\n  // Enabled state is handled via PluginsStore and not via plugins detail\n  getEnabled() {\n    const {pluginDetails} = this.state;\n    const {plugins} = this.props;\n\n    const plugin =\n      plugins &&\n      plugins.plugins &&\n      plugins.plugins.find(({slug}) => slug === this.props.params.pluginId);\n\n    return plugin ? plugin.enabled : pluginDetails && pluginDetails.enabled;\n  }\n\n  renderActions() {\n    const {pluginDetails} = this.state;\n    if (!pluginDetails) {\n      return null;\n    }\n    const enabled = this.getEnabled();\n\n    const enable = (\n      <StyledButton size=\"small\" onClick={this.handleEnable}>\n        {t('Enable Plugin')}\n      </StyledButton>\n    );\n\n    const disable = (\n      <StyledButton size=\"small\" priority=\"danger\" onClick={this.handleDisable}>\n        {t('Disable Plugin')}\n      </StyledButton>\n    );\n\n    const toggleEnable = enabled ? disable : enable;\n\n    return (\n      <div className=\"pull-right\">\n        {pluginDetails.canDisable && toggleEnable}\n        <Button size=\"small\" onClick={this.handleReset}>\n          {t('Reset Configuration')}\n        </Button>\n      </div>\n    );\n  }\n\n  renderBody() {\n    const {organization, project} = this.props;\n    const {pluginDetails} = this.state;\n    if (!pluginDetails) {\n      return null;\n    }\n\n    return (\n      <div>\n        <SettingsPageHeader title={pluginDetails.name} action={this.renderActions()} />\n        <div className=\"row\">\n          <div className=\"col-md-7\">\n            <PluginConfig\n              organization={organization}\n              project={project}\n              data={pluginDetails}\n              enabled={this.getEnabled()}\n              onDisablePlugin={this.handleDisable}\n            />\n          </div>\n          <div className=\"col-md-4 col-md-offset-1\">\n            <div className=\"pluginDetails-meta\">\n              <h4>{t('Plugin Information')}</h4>\n\n              <dl className=\"flat\">\n                <dt>{t('Name')}</dt>\n                <dd>{pluginDetails.name}</dd>\n                <dt>{t('Author')}</dt>\n                <dd>{pluginDetails.author?.name}</dd>\n                {pluginDetails.author?.url && (\n                  <div>\n                    <dt>{t('URL')}</dt>\n                    <dd>\n                      <ExternalLink href={pluginDetails.author.url}>\n                        {this.trimSchema(pluginDetails.author.url)}\n                      </ExternalLink>\n                    </dd>\n                  </div>\n                )}\n                <dt>{t('Version')}</dt>\n                <dd>{pluginDetails.version}</dd>\n              </dl>\n\n              {pluginDetails.description && (\n                <div>\n                  <h4>{t('Description')}</h4>\n                  <p className=\"description\">{pluginDetails.description}</p>\n                </div>\n              )}\n\n              {pluginDetails.resourceLinks && (\n                <div>\n                  <h4>{t('Resources')}</h4>\n                  <dl className=\"flat\">\n                    {pluginDetails.resourceLinks.map(({title, url}) => (\n                      <dd key={url}>\n                        <ExternalLink href={url}>{title}</ExternalLink>\n                      </dd>\n                    ))}\n                  </dl>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport {ProjectPluginDetails};\n\nexport default withPlugins(ProjectPluginDetails);\n\nconst StyledButton = styled(Button)`\n  margin-right: ${space(0.75)};\n`;\n"],"names":["defaultState","loading","plugins","error","pageLinks","storeConfig","state","updating","Map","reset","this","getInitialState","getState","_plugins","Array","from","values","init","listenTo","PluginActions","onFetchAll","onFetchAllSuccess","onFetchAllError","onUpdate","onUpdateSuccess","onUpdateError","triggerState","trigger","resetLoading","data","map","plugin","id","err","updateObj","get","newPlugin","set","_updateObj","delete","origPlugin","Reflux","WrappedComponent","WithPlugins","React","PluginsStore","setState","undefined","componentDidMount","fetchPlugins","componentDidUpdate","prevProps","_prevState","prevContext","organization","project","props","prevOrg","prevProject","defined","isOrgSame","slug","isProjectSame","componentWillUnmount","unsubscribe","projectId","orgId","render","getDisplayName","withOrganization","withProject","AsyncView","AsyncComponent","getTitle","title","renderComponent","ProjectPluginDetails","pluginId","params","addLoadingMessage","t","trackIntegrationAnalytics","integration","integration_type","view","api","request","method","success","pluginDetails","addSuccessMessage","addErrorMessage","enablePlugin","analyticsChangeEnableStatus","disablePlugin","enabled","eventKey","prevState","super","recordDetailsViewed","name","getEndpoints","trimSchema","value","split","getEnabled","find","renderActions","enable","StyledButton","size","onClick","handleEnable","disable","priority","handleDisable","toggleEnable","className","canDisable","handleReset","renderBody","action","onDisablePlugin","author","url","href","version","description","resourceLinks","withPlugins","Button","space"],"sourceRoot":""}