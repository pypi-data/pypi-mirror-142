{"version":3,"file":"chunks/app_utils_discover_charts_tsx-app_utils_performance_vitals_constants_tsx-app_views_alerts_fil-9e266c.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/discover/charts.tsx","webpack:///./app/utils/performance/vitals/constants.tsx","webpack:///./app/components/deprecatedforms/input.tsx","webpack:///./app/views/alerts/rules/filter.tsx","webpack:///./app/views/alerts/rules/teamFilter.tsx","webpack:///./app/views/alerts/filterBar.tsx","webpack:///./app/views/alerts/list/header.tsx"],"sourcesContent":["import {t} from 'sentry/locale';\nimport {defined} from 'sentry/utils';\nimport {aggregateOutputType} from 'sentry/utils/discover/fields';\nimport {\n  DAY,\n  formatAbbreviatedNumber,\n  formatPercentage,\n  getDuration,\n  HOUR,\n  MINUTE,\n  SECOND,\n  WEEK,\n} from 'sentry/utils/formatters';\n\n/**\n * Formatter for chart tooltips that handle a variety of discover and metrics result values.\n * If the result is metric values, the value can be of type number or null\n */\nexport function tooltipFormatter(value: number | null, seriesName: string = ''): string {\n  if (!defined(value)) {\n    return '\\u2014';\n  }\n  switch (aggregateOutputType(seriesName)) {\n    case 'integer':\n    case 'number':\n      return value.toLocaleString();\n    case 'percentage':\n      return formatPercentage(value, 2);\n    case 'duration':\n      return getDuration(value / 1000, 2, true);\n    default:\n      return value.toString();\n  }\n}\n\n/**\n * Formatter for chart axis labels that handle a variety of discover result values\n * This function is *very similar* to tooltipFormatter but outputs data with less precision.\n */\nexport function axisLabelFormatter(\n  value: number,\n  seriesName: string,\n  abbreviation: boolean = false\n): string {\n  switch (aggregateOutputType(seriesName)) {\n    case 'integer':\n    case 'number':\n      return abbreviation ? formatAbbreviatedNumber(value) : value.toLocaleString();\n    case 'percentage':\n      return formatPercentage(value, 0);\n    case 'duration':\n      return axisDuration(value);\n    default:\n      return value.toString();\n  }\n}\n\n/**\n * Specialized duration formatting for axis labels.\n * In that context we are ok sacrificing accuracy for more\n * consistent sizing.\n *\n * @param value Number of milliseconds to format.\n */\nexport function axisDuration(value: number): string {\n  if (value === 0) {\n    return '0';\n  }\n  if (value >= WEEK) {\n    const label = (value / WEEK).toFixed(0);\n    return t('%swk', label);\n  }\n  if (value >= DAY) {\n    const label = (value / DAY).toFixed(0);\n    return t('%sd', label);\n  }\n  if (value >= HOUR) {\n    const label = (value / HOUR).toFixed(0);\n    return t('%shr', label);\n  }\n  if (value >= MINUTE) {\n    const label = (value / MINUTE).toFixed(0);\n    return t('%smin', label);\n  }\n  if (value >= SECOND) {\n    const label = (value / SECOND).toFixed(0);\n    return t('%ss', label);\n  }\n  const label = value.toFixed(0);\n  return t('%sms', label);\n}\n","import {t} from 'sentry/locale';\nimport {measurementType, MobileVital, WebVital} from 'sentry/utils/discover/fields';\nimport {Vital} from 'sentry/utils/performance/vitals/types';\n\nexport const WEB_VITAL_DETAILS: Record<WebVital, Vital> = {\n  [WebVital.FP]: {\n    slug: 'fp',\n    name: t('First Paint'),\n    acronym: 'FP',\n    description: t(\n      'Render time of the first pixel loaded in the viewport (may overlap with FCP).'\n    ),\n    poorThreshold: 3000,\n    type: measurementType(WebVital.FP),\n  },\n  [WebVital.FCP]: {\n    slug: 'fcp',\n    name: t('First Contentful Paint'),\n    acronym: 'FCP',\n    description: t(\n      'Render time of the first image, text or other DOM node in the viewport.'\n    ),\n    poorThreshold: 3000,\n    type: measurementType(WebVital.FCP),\n  },\n  [WebVital.LCP]: {\n    slug: 'lcp',\n    name: t('Largest Contentful Paint'),\n    acronym: 'LCP',\n    description: t(\n      'Render time of the largest image, text or other DOM node in the viewport.'\n    ),\n    poorThreshold: 4000,\n    type: measurementType(WebVital.LCP),\n  },\n  [WebVital.FID]: {\n    slug: 'fid',\n    name: t('First Input Delay'),\n    acronym: 'FID',\n    description: t(\n      'Response time of the browser to a user interaction (clicking, tapping, etc).'\n    ),\n    poorThreshold: 300,\n    type: measurementType(WebVital.FID),\n  },\n  [WebVital.CLS]: {\n    slug: 'cls',\n    name: t('Cumulative Layout Shift'),\n    acronym: 'CLS',\n    description: t(\n      'Sum of layout shift scores that measure the visual stability of the page.'\n    ),\n    poorThreshold: 0.25,\n    type: measurementType(WebVital.CLS),\n  },\n  [WebVital.TTFB]: {\n    slug: 'ttfb',\n    name: t('Time to First Byte'),\n    acronym: 'TTFB',\n    description: t(\n      \"The time that it takes for a user's browser to receive the first byte of page content.\"\n    ),\n    poorThreshold: 600,\n    type: measurementType(WebVital.TTFB),\n  },\n  [WebVital.RequestTime]: {\n    slug: 'ttfb.requesttime',\n    name: t('Request Time'),\n    acronym: 'RT',\n    description: t(\n      'Captures the time spent making the request and receiving the first byte of the response.'\n    ),\n    poorThreshold: 600,\n    type: measurementType(WebVital.RequestTime),\n  },\n};\n\nexport const MOBILE_VITAL_DETAILS: Record<MobileVital, Vital> = {\n  [MobileVital.AppStartCold]: {\n    slug: 'app_start_cold',\n    name: t('App Start Cold'),\n    description: t(\n      'Cold start is a measure of the application start up time from scratch.'\n    ),\n    type: measurementType(MobileVital.AppStartCold),\n  },\n  [MobileVital.AppStartWarm]: {\n    slug: 'app_start_warm',\n    name: t('App Start Warm'),\n    description: t(\n      'Warm start is a measure of the application start up time while still in memory.'\n    ),\n    type: measurementType(MobileVital.AppStartWarm),\n  },\n  [MobileVital.FramesTotal]: {\n    slug: 'frames_total',\n    name: t('Total Frames'),\n    description: t(\n      'Total frames is a count of the number of frames recorded within a transaction.'\n    ),\n    type: measurementType(MobileVital.FramesTotal),\n  },\n  [MobileVital.FramesSlow]: {\n    slug: 'frames_slow',\n    name: t('Slow Frames'),\n    description: t(\n      'Slow frames is a count of the number of slow frames recorded within a transaction.'\n    ),\n    type: measurementType(MobileVital.FramesSlow),\n  },\n  [MobileVital.FramesFrozen]: {\n    slug: 'frames_frozen',\n    name: t('Frozen Frames'),\n    description: t(\n      'Frozen frames is a count of the number of frozen frames recorded within a transaction.'\n    ),\n    type: measurementType(MobileVital.FramesFrozen),\n  },\n  [MobileVital.FramesSlowRate]: {\n    slug: 'frames_slow_rate',\n    name: t('Slow Frames Rate'),\n    description: t(\n      'Slow Frames Rate is the percentage of frames recorded within a transaction that is considered slow.'\n    ),\n    type: measurementType(MobileVital.FramesSlowRate),\n  },\n  [MobileVital.FramesFrozenRate]: {\n    slug: 'frames_frozen_rate',\n    name: t('Frozen Frames Rate'),\n    description: t(\n      'Frozen Frames Rate is the percentage of frames recorded within a transaction that is considered frozen.'\n    ),\n    type: measurementType(MobileVital.FramesFrozenRate),\n  },\n  [MobileVital.StallCount]: {\n    slug: 'stall_count',\n    name: t('Stalls'),\n    description: t(\n      'Stalls is the number of times the application stalled within a transaction.'\n    ),\n    type: measurementType(MobileVital.StallCount),\n  },\n  [MobileVital.StallTotalTime]: {\n    slug: 'stall_total_time',\n    name: t('Total Stall Time'),\n    description: t(\n      'Stall Total Time is the total amount of time the application is stalled within a transaction.'\n    ),\n    type: measurementType(MobileVital.StallTotalTime),\n  },\n  [MobileVital.StallLongestTime]: {\n    slug: 'stall_longest_time',\n    name: t('Longest Stall Time'),\n    description: t(\n      'Stall Longest Time is the longest amount of time the application is stalled within a transaction.'\n    ),\n    type: measurementType(MobileVital.StallLongestTime),\n  },\n  [MobileVital.StallPercentage]: {\n    slug: 'stall_percentage',\n    name: t('Stall Percentage'),\n    description: t(\n      'Stall Percentage is the percentage of the transaction duration the application was stalled.'\n    ),\n    type: measurementType(MobileVital.StallPercentage),\n  },\n};\n\nexport enum Browser {\n  CHROME = 'Chrome',\n  EDGE = 'Edge',\n  OPERA = 'Opera',\n  FIREFOX = 'Firefox',\n  SAFARI = 'Safari',\n  IE = 'IE',\n}\n","import * as React from 'react';\nimport classNames from 'classnames';\nimport omit from 'lodash/omit';\n\ntype Props = {\n  className?: string;\n} & React.HTMLProps<HTMLInputElement>;\n\nexport default function Input({className, ...otherProps}: Props) {\n  return (\n    <input\n      className={classNames('form-control', className)}\n      {...omit(otherProps, 'children')}\n    />\n  );\n}\n","import {Component, Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport CheckboxFancy from 'sentry/components/checkboxFancy/checkboxFancy';\nimport DropdownButton from 'sentry/components/dropdownButton';\nimport DropdownControl, {Content} from 'sentry/components/dropdownControl';\nimport {IconFilter} from 'sentry/icons';\nimport {t, tn} from 'sentry/locale';\nimport overflowEllipsis from 'sentry/styles/overflowEllipsis';\nimport space from 'sentry/styles/space';\n\ntype DropdownButtonProps = React.ComponentProps<typeof DropdownButton>;\n\ntype DropdownSection = {\n  id: string;\n  items: Array<{checked: boolean; filtered: boolean; label: string; value: string}>;\n  label: string;\n};\n\ntype SectionProps = DropdownSection & {\n  toggleFilter: (section: string, value: string) => void;\n  toggleSection: (id: string) => void;\n};\n\nfunction FilterSection({id, label, items, toggleSection, toggleFilter}: SectionProps) {\n  const checkedItemsCount = items.filter(item => item.checked).length;\n  return (\n    <Fragment>\n      <Header>\n        <span>{label}</span>\n        <CheckboxFancy\n          isChecked={checkedItemsCount === items.length}\n          isIndeterminate={checkedItemsCount > 0 && checkedItemsCount !== items.length}\n          onClick={event => {\n            event.stopPropagation();\n            toggleSection(id);\n          }}\n        />\n      </Header>\n      {items\n        .filter(item => !item.filtered)\n        .map(item => (\n          <ListItem\n            key={item.value}\n            isChecked={item.checked}\n            onClick={event => {\n              event.stopPropagation();\n              toggleFilter(id, item.value);\n            }}\n          >\n            <TeamName>{item.label}</TeamName>\n            <CheckboxFancy isChecked={item.checked} />\n          </ListItem>\n        ))}\n    </Fragment>\n  );\n}\n\ntype Props = {\n  dropdownSections: DropdownSection[];\n  header: React.ReactElement;\n  onFilterChange: (section: string, filterSelection: Set<string>) => void;\n};\n\nclass Filter extends Component<Props> {\n  toggleFilter = (sectionId: string, value: string) => {\n    const {onFilterChange, dropdownSections} = this.props;\n    const section = dropdownSections.find(\n      dropdownSection => dropdownSection.id === sectionId\n    )!;\n    const newSelection = new Set(\n      section.items.filter(item => item.checked).map(item => item.value)\n    );\n    if (newSelection.has(value)) {\n      newSelection.delete(value);\n    } else {\n      newSelection.add(value);\n    }\n    onFilterChange(sectionId, newSelection);\n  };\n\n  toggleSection = (sectionId: string) => {\n    const {onFilterChange} = this.props;\n    const section = this.props.dropdownSections.find(\n      dropdownSection => dropdownSection.id === sectionId\n    )!;\n    const activeItems = section.items.filter(item => item.checked);\n\n    const newSelection =\n      section.items.length === activeItems.length\n        ? new Set<string>()\n        : new Set(section.items.map(item => item.value));\n\n    onFilterChange(sectionId, newSelection);\n  };\n\n  getNumberOfActiveFilters = (): number => {\n    return this.props.dropdownSections\n      .map(section => section.items)\n      .flat()\n      .filter(item => item.checked).length;\n  };\n\n  render() {\n    const {dropdownSections: dropdownItems, header} = this.props;\n    const checkedQuantity = this.getNumberOfActiveFilters();\n\n    const dropDownButtonProps: Pick<DropdownButtonProps, 'children' | 'priority'> & {\n      hasDarkBorderBottomColor: boolean;\n    } = {\n      children: t('Filter'),\n      priority: 'default',\n      hasDarkBorderBottomColor: false,\n    };\n\n    if (checkedQuantity > 0) {\n      dropDownButtonProps.children = tn(\n        '%s Active Filter',\n        '%s Active Filters',\n        checkedQuantity\n      );\n      dropDownButtonProps.hasDarkBorderBottomColor = true;\n    }\n\n    return (\n      <DropdownControl\n        menuWidth=\"240px\"\n        blendWithActor\n        alwaysRenderMenu={false}\n        button={({isOpen, getActorProps}) => (\n          <StyledDropdownButton\n            {...getActorProps()}\n            showChevron={false}\n            isOpen={isOpen}\n            icon={<IconFilter />}\n            hasDarkBorderBottomColor={dropDownButtonProps.hasDarkBorderBottomColor}\n            priority={dropDownButtonProps.priority as DropdownButtonProps['priority']}\n            data-test-id=\"filter-button\"\n          >\n            {dropDownButtonProps.children}\n          </StyledDropdownButton>\n        )}\n      >\n        {({isOpen, getMenuProps}) => (\n          <MenuContent\n            {...getMenuProps()}\n            isOpen={isOpen}\n            blendCorner\n            alignMenu=\"left\"\n            width=\"240px\"\n          >\n            <List>\n              {header}\n              {dropdownItems.map(section => (\n                <FilterSection\n                  key={section.id}\n                  {...section}\n                  toggleSection={this.toggleSection}\n                  toggleFilter={this.toggleFilter}\n                />\n              ))}\n            </List>\n          </MenuContent>\n        )}\n      </DropdownControl>\n    );\n  }\n}\n\nconst MenuContent = styled(Content)`\n  max-height: 290px;\n  overflow-y: auto;\n`;\n\nconst Header = styled('div')`\n  display: grid;\n  grid-template-columns: auto min-content;\n  grid-column-gap: ${space(1)};\n  align-items: center;\n\n  margin: 0;\n  background-color: ${p => p.theme.backgroundSecondary};\n  color: ${p => p.theme.gray300};\n  font-weight: normal;\n  font-size: ${p => p.theme.fontSizeMedium};\n  padding: ${space(1)} ${space(2)};\n  border-bottom: 1px solid ${p => p.theme.border};\n`;\n\nconst StyledDropdownButton = styled(DropdownButton)<{hasDarkBorderBottomColor?: boolean}>`\n  white-space: nowrap;\n  max-width: 200px;\n\n  z-index: ${p => p.theme.zIndex.dropdown};\n`;\n\nconst List = styled('ul')`\n  list-style: none;\n  margin: 0;\n  padding: 0;\n`;\n\nconst ListItem = styled('li')<{isChecked?: boolean}>`\n  display: grid;\n  grid-template-columns: 1fr max-content;\n  grid-column-gap: ${space(1)};\n  align-items: center;\n  padding: ${space(1)} ${space(2)};\n  border-bottom: 1px solid ${p => p.theme.border};\n  :hover {\n    background-color: ${p => p.theme.backgroundSecondary};\n  }\n  ${CheckboxFancy} {\n    opacity: ${p => (p.isChecked ? 1 : 0.3)};\n  }\n\n  &:hover ${CheckboxFancy} {\n    opacity: 1;\n  }\n\n  &:hover span {\n    color: ${p => p.theme.blue300};\n    text-decoration: underline;\n  }\n`;\n\nconst TeamName = styled('div')`\n  font-size: ${p => p.theme.fontSizeMedium};\n  ${overflowEllipsis};\n`;\n\nexport default Filter;\n","import {useState} from 'react';\nimport styled from '@emotion/styled';\nimport debounce from 'lodash/debounce';\n\nimport Input from 'sentry/components/deprecatedforms/input';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {DEFAULT_DEBOUNCE_DURATION} from 'sentry/constants';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport useTeams from 'sentry/utils/useTeams';\n\nimport Filter from './filter';\n\ntype Props = {\n  handleChangeFilter: (sectionId: string, activeFilters: Set<string>) => void;\n  selectedTeams: Set<string>;\n  selectedStatus?: Set<string>;\n  showStatus?: boolean;\n};\n\nfunction TeamFilter({\n  selectedTeams,\n  showStatus = false,\n  selectedStatus = new Set(),\n  handleChangeFilter,\n}: Props) {\n  const {teams, onSearch, fetching} = useTeams();\n  const debouncedSearch = debounce(onSearch, DEFAULT_DEBOUNCE_DURATION);\n  const [teamFilterSearch, setTeamFilterSearch] = useState<string | undefined>();\n\n  const statusOptions = [\n    {\n      label: t('Unresolved'),\n      value: 'open',\n      checked: selectedStatus.has('open'),\n      filtered: false,\n    },\n    {\n      label: t('Resolved'),\n      value: 'closed',\n      checked: selectedStatus.has('closed'),\n      filtered: false,\n    },\n  ];\n\n  const additionalOptions = [\n    {\n      label: t('My Teams'),\n      value: 'myteams',\n      checked: selectedTeams.has('myteams'),\n      filtered: false,\n    },\n    {\n      label: t('Unassigned'),\n      value: 'unassigned',\n      checked: selectedTeams.has('unassigned'),\n      filtered: false,\n    },\n  ];\n  const teamItems = teams.map(({id, slug}) => ({\n    label: slug,\n    value: id,\n    filtered: teamFilterSearch\n      ? !slug.toLowerCase().includes(teamFilterSearch.toLowerCase())\n      : false,\n    checked: selectedTeams.has(id),\n  }));\n\n  return (\n    <Filter\n      header={\n        <InputWrapper>\n          <StyledInput\n            autoFocus\n            placeholder={t('Filter by team slug')}\n            onClick={event => {\n              event.stopPropagation();\n            }}\n            onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n              const search = event.target.value;\n              setTeamFilterSearch(search);\n              debouncedSearch(search);\n            }}\n            value={teamFilterSearch || ''}\n          />\n          {fetching && <StyledLoadingIndicator size={16} mini />}\n        </InputWrapper>\n      }\n      onFilterChange={handleChangeFilter}\n      dropdownSections={[\n        ...(showStatus\n          ? [\n              {\n                id: 'status',\n                label: t('Status'),\n                items: statusOptions,\n              },\n            ]\n          : []),\n        {\n          id: 'teams',\n          label: t('Teams'),\n          items: [...additionalOptions, ...teamItems],\n        },\n      ]}\n    />\n  );\n}\n\nexport default TeamFilter;\n\nconst InputWrapper = styled('div')`\n  position: relative;\n`;\n\nconst StyledInput = styled(Input)`\n  border: none;\n  border-bottom: 1px solid transparent;\n  border-radius: 0;\n`;\n\nconst StyledLoadingIndicator = styled(LoadingIndicator)`\n  position: absolute;\n  right: 0;\n  top: ${space(0.75)};\n`;\n","import styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport ButtonBar from 'sentry/components/buttonBar';\nimport EnvironmentPageFilter from 'sentry/components/environmentPageFilter';\nimport ProjectPageFilter from 'sentry/components/projectPageFilter';\nimport SearchBar from 'sentry/components/searchBar';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\n\nimport TeamFilter from './rules/teamFilter';\nimport {getQueryStatus, getTeamParams} from './utils';\n\ntype Props = {\n  location: Location<any>;\n  onChangeFilter: (sectionId: string, activeFilters: Set<string>) => void;\n  onChangeSearch: (query: string) => void;\n  organization: Organization;\n  hasEnvironmentFilter?: boolean;\n  hasStatusFilters?: boolean;\n};\n\nfunction FilterBar({\n  location,\n  onChangeSearch,\n  onChangeFilter,\n  organization,\n  hasEnvironmentFilter,\n  hasStatusFilters,\n}: Props) {\n  const selectedTeams = new Set(getTeamParams(location.query.team));\n\n  const hasPageFilters = organization.features.includes('selection-filters-v2');\n\n  const selectedStatus = hasStatusFilters\n    ? new Set(getQueryStatus(location.query.status))\n    : undefined;\n\n  return (\n    <Wrapper>\n      <FilterButtons gap={1.5}>\n        <TeamFilter\n          showStatus={hasStatusFilters}\n          selectedTeams={selectedTeams}\n          selectedStatus={selectedStatus}\n          handleChangeFilter={onChangeFilter}\n        />\n        {hasPageFilters && <ProjectPageFilter />}\n        {hasPageFilters && hasEnvironmentFilter && <EnvironmentPageFilter />}\n      </FilterButtons>\n      <SearchBar\n        placeholder={t('Search by name')}\n        query={location.query?.name}\n        onSearch={onChangeSearch}\n      />\n    </Wrapper>\n  );\n}\n\nexport default FilterBar;\n\nconst Wrapper = styled('div')`\n  display: grid;\n  grid-template-columns: min-content 1fr;\n  gap: ${space(1.5)};\n  margin-bottom: ${space(1.5)};\n`;\n\nconst FilterButtons = styled(ButtonBar)`\n  grid-auto-columns: minmax(auto, 300px);\n`;\n","import * as React from 'react';\nimport {InjectedRouter} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {navigateTo} from 'sentry/actionCreators/navigation';\nimport Button from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport CreateAlertButton from 'sentry/components/createAlertButton';\nimport GlobalSelectionLink from 'sentry/components/globalSelectionLink';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport {IconSettings} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\n\ntype Props = {\n  activeTab: 'stream' | 'rules';\n  organization: Organization;\n  router: InjectedRouter;\n};\n\nconst AlertHeader = ({router, organization, activeTab}: Props) => {\n  /**\n   * Incidents list is currently at the organization level, but the link needs to\n   * go down to a specific project scope.\n   */\n  const handleNavigateToSettings = (e: React.MouseEvent) => {\n    e.preventDefault();\n    navigateTo(`/settings/${organization.slug}/projects/:projectId/alerts/`, router);\n  };\n\n  const alertRulesLink = (\n    <li className={activeTab === 'rules' ? 'active' : ''}>\n      <GlobalSelectionLink to={`/organizations/${organization.slug}/alerts/rules/`}>\n        {t('Alert Rules')}\n      </GlobalSelectionLink>\n    </li>\n  );\n\n  return (\n    <Layout.Header>\n      <Layout.HeaderContent>\n        <StyledLayoutTitle>{t('Alerts')}</StyledLayoutTitle>\n      </Layout.HeaderContent>\n      <Layout.HeaderActions>\n        <Actions gap={1}>\n          <CreateAlertButton\n            organization={organization}\n            iconProps={{size: 'sm'}}\n            priority=\"primary\"\n            referrer=\"alert_stream\"\n            showPermissionGuide\n          >\n            {t('Create Alert')}\n          </CreateAlertButton>\n          <Button\n            onClick={handleNavigateToSettings}\n            href=\"#\"\n            icon={<IconSettings size=\"sm\" />}\n            aria-label={t('Settings')}\n          />\n        </Actions>\n      </Layout.HeaderActions>\n      <Layout.HeaderNavTabs underlined>\n        {alertRulesLink}\n        <li className={activeTab === 'stream' ? 'active' : ''}>\n          <GlobalSelectionLink to={`/organizations/${organization.slug}/alerts/`}>\n            {t('History')}\n          </GlobalSelectionLink>\n        </li>\n      </Layout.HeaderNavTabs>\n    </Layout.Header>\n  );\n};\n\nexport default AlertHeader;\n\nconst StyledLayoutTitle = styled(Layout.Title)`\n  margin-top: ${space(0.5)};\n`;\n\nconst Actions = styled(ButtonBar)`\n  height: 32px;\n`;\n"],"names":["tooltipFormatter","value","seriesName","defined","aggregateOutputType","toLocaleString","formatPercentage","getDuration","toString","axisLabelFormatter","abbreviation","formatAbbreviatedNumber","axisDuration","WEEK","label","toFixed","t","DAY","HOUR","MINUTE","SECOND","WEB_VITAL_DETAILS","WebVital","slug","name","acronym","description","poorThreshold","type","measurementType","MOBILE_VITAL_DETAILS","MobileVital","Browser","Input","className","otherProps","classNames","omit","FilterSection","id","items","toggleSection","toggleFilter","checkedItemsCount","filter","item","checked","length","Fragment","Header","isChecked","isIndeterminate","onClick","event","stopPropagation","filtered","map","ListItem","TeamName","Filter","Component","sectionId","onFilterChange","dropdownSections","this","props","section","find","dropdownSection","newSelection","Set","has","delete","add","activeItems","flat","render","dropdownItems","header","checkedQuantity","getNumberOfActiveFilters","dropDownButtonProps","children","priority","hasDarkBorderBottomColor","tn","menuWidth","blendWithActor","alwaysRenderMenu","button","isOpen","getActorProps","StyledDropdownButton","showChevron","icon","getMenuProps","MenuContent","blendCorner","alignMenu","width","List","Content","space","p","theme","backgroundSecondary","gray300","fontSizeMedium","border","DropdownButton","zIndex","dropdown","CheckboxFancy","blue300","overflowEllipsis","TeamFilter","selectedTeams","showStatus","selectedStatus","handleChangeFilter","teams","onSearch","fetching","useTeams","debouncedSearch","debounce","DEFAULT_DEBOUNCE_DURATION","teamFilterSearch","setTeamFilterSearch","useState","statusOptions","additionalOptions","teamItems","toLowerCase","includes","InputWrapper","StyledInput","autoFocus","placeholder","onChange","search","target","StyledLoadingIndicator","size","mini","LoadingIndicator","FilterBar","location","onChangeSearch","onChangeFilter","organization","hasEnvironmentFilter","hasStatusFilters","getTeamParams","query","team","hasPageFilters","features","getQueryStatus","status","undefined","Wrapper","FilterButtons","gap","ButtonBar","AlertHeader","router","activeTab","alertRulesLink","to","StyledLayoutTitle","Actions","iconProps","referrer","showPermissionGuide","e","preventDefault","navigateTo","href","underlined","Layout"],"sourceRoot":""}