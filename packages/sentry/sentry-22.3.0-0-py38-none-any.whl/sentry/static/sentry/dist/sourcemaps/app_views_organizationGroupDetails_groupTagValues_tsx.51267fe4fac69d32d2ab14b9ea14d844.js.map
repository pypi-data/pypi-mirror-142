{"version":3,"file":"chunks/app_views_organizationGroupDetails_groupTagValues_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"iqBAaO,IAAKA,EAmBZ,SAASC,EAAT,GAOwC,IAPpB,IAClBC,EADkB,SAElBC,EAFkB,SAGlBC,EAHkB,aAIlBC,EAJkB,QAKlBC,EALkB,KAMlBC,GACsC,EACtC,MAAOC,EAAYC,GAAiBC,EAAAA,UAAe,GAEnDA,EAAAA,WAAgB,KACVF,GACFC,GAAc,KAEf,CAACH,EAAQK,UAAWL,EAAQM,YAE/B,MAAMC,EAAmBH,EAAAA,aAAkB,KACzCD,GAAc,GAEdP,EACGY,eAAgB,kBAAiBT,EAAaU,oBAAqB,CAClEC,gBAAgB,EAChBC,OAAQ,OACRC,KAAM,CACJC,WAAYb,EAAQK,UACpBS,WAAYd,EAAQM,aAGvBS,MAAK,IAA0B,IAAxBC,EAAOC,EAAGC,GAAc,GAC9BC,EAAAA,EAAAA,IACuB,OAArBD,MAAAA,OAAA,EAAAA,EAAUE,SACNC,EAAAA,EAAAA,GACE,8EAEFA,EAAAA,EAAAA,GAAE,8EAGTC,OAAMC,IAAO,QACZ,MAAMC,EAAO,UACXD,MAAAA,GADW,UACXA,EAAKE,oBADM,aACX,EAAmBC,cADR,QAEX,+EAEFC,EAAAA,EAAAA,KAAgBN,EAAAA,EAAAA,GAAEG,IAClBrB,GAAc,QAEjB,CAACH,EAAQM,UAAWN,EAAQK,UAAWN,EAAaU,KAAMb,IAE7D,OACE,QAAC,IAAD,CAASgC,SAAU,CAAC,gCAApB,SACG1B,GACC,QAAC,KAAD,CACE2B,KAAK,QACLC,SAAS,UACTC,MAAM,yEACNjC,UAAQ,EACRG,KAAMA,EALR,UAOGoB,EAAAA,EAAAA,GAAE,6BAGL,QAAC,KAAD,CACEW,QAASC,GAAAA,CAAS1B,EAAkB,KACpCT,SAAUA,IAAY,EACtB+B,KAAK,QACLC,SAAS,UACTC,MAAM,mFACN9B,KAAMA,EANR,SAQGJ,IAAsBwB,EAAAA,EAAAA,GAAE,0B,SAvFvB3B,GAAAA,EAAAA,YAAAA,gBAAAA,EAAAA,SAAAA,W,CAAAA,IAAAA,EAAAA,KAmBHC,EAAAA,YAAAA,aA4ET,SAAeuC,EAAAA,EAAAA,IAAQC,EAAAA,EAAAA,GAAiBxC,K,yXCrGjC,SAASyC,EACdC,EACAC,GAGA,GAAqB,iBAAVD,EACT,OAAO,KAIT,GAAe,OAAXC,EACF,OAAOD,EAGT,MAAOE,KAAeC,GAAQH,EAAMI,MAAM,KAEpCC,EAAYJ,EAAOK,uBAAuBJ,GAChD,YAAqBK,IAAdF,EAA0BL,EAAS,GAAEK,KAAaF,EAAKK,KAAK,OAG9DC,eAAeC,EAAqBC,GAIzC,MAHiB,QAAbA,GACFC,EAAAA,GAAwB,iDAEnB,2JAYT,SAASC,EAAT,GAAmF,IAA/D,MAACC,EAAD,SAAQtD,GAAuD,EACjF,MAAOuD,EAAYC,GAAiBjD,EAAAA,SAAqC,MAEzEA,EAAAA,WAAgB,KACd,IAAIkD,GAAa,EAgBjB,OAdAC,EAAAA,EACwB,OACrBxC,MAAKuB,IAEAgB,GAIJD,EAAcf,MAEfhB,OAAM,KACL2B,EAAAA,GAAwB,4CAGrB,KACLK,GAAa,KAEd,IAEH,MAAME,EAAapD,EAAAA,SACjB,IAAMgC,EAAiBe,EAAOC,IAC9B,CAACD,EAAOC,IAGV,OAAOI,GACL,gBAAM,eAAa,qBAAnB,SACG3D,EAAWA,EAAS2D,GAAcA,IAEnC,O,ioCC9BN,MAAMC,UAAuBC,EAAAA,EAI3BC,eACE,MAAOC,aAAcC,GAAeC,KAAKC,OACnC,QAACC,EAAD,OAAUC,GAAUH,KAAKC,MAAMG,OACrC,MAAO,CACL,CAAC,MAAQ,WAAUF,UAAgBC,MACnC,CACE,eACC,WAAUD,UAAgBC,YAC3B,CAACE,MAAO,CAACN,YAAAA,EAAaO,KAAMN,KAAKO,cAKvCA,UACE,OAAOP,KAAKC,MAAMO,SAASH,MAAMC,MApBhB,QAuBnBG,gBACE,OAAOT,KAAKU,aAGdC,gBACE,MAAM,QACJC,EADI,QAEJC,EACAf,aAAcC,EACdK,QAAQ,MAACU,EAAD,QAAQZ,EAAR,OAAiBC,IACvBH,KAAKC,OACH,aAACc,EAAD,IAAeC,GAAOhB,KAAKiB,MAC3BC,EAAiB,CACrB,QACA,UACA,cACA,eACA,aAGF,OAAOH,MAAAA,OAAP,EAAOA,EAAcI,KAAI,CAACC,EAAUC,KAAgB,QAClD,MAAMC,EAAMN,MAAAA,GAAAA,EAAKO,YACZ,IAAEC,EAAAA,EAAAA,IAAQJ,EAASK,MAAOT,MAAAA,OAAjB,EAAiBA,EAAKO,aAAaG,QAAQ,MACrD,KACEC,EAAG,UAAGP,EAASO,WAAZ,QAAmBxB,EACtByB,EAAcR,EAASf,OAAU,GAAEsB,MAAQP,EAAS/B,SACpDwC,EAAeC,EAAAA,GAAAA,eAAyB,CAC5CC,QAAIjD,EACJkD,KAAML,EACNM,OAAQ,CAACN,KAAQT,EAAegB,QAAOC,GAASA,IAAUR,KAC1DS,QAAS,aACT/B,MAAQ,YAAWH,KAAW0B,IAC9BS,SAAU,CAACC,OAAOzB,MAAAA,OAAD,EAACA,EAASkB,KAC3BhC,YAAAA,EACAwC,QAAS,EACTC,MAAO,QAEHC,EAAc,kBAAiB3B,YAErC,OACE,QAAC,EAAA4B,SAAD,YACE,QAACC,EAAD,YACE,QAACC,EAAD,CAAa,eAAa,kBAA1B,UACE,QAAC,IAAD,CACEC,GAAI,CACFC,SAAW,GAAElC,WACbP,MAAO,CAACA,MAAOuB,IAHnB,SAMW,SAARD,GACC,QAAC,IAAD,CACEoB,KAAM,IAAI3B,EAAUW,GAAE,UAAEX,EAAS3C,kBAAX,QAAyB,IAC/CuE,WAAY,GACZC,WAAS,KAGX,QAAC,KAAD,CAAY5D,MAAO+B,EAASY,WAKjCZ,EAAS8B,QACR,QAACC,EAAD,CACEC,KAAO,UAAShC,EAAS8B,QACzB,eAAa,iBAFf,UAIE,QAAC,IAAD,CAAUnF,KAAK,KAAKsF,MAAM,eAG7BC,EAAAA,EAAAA,IAAMlC,EAAS/B,SACd,QAAC8D,EAAD,CAAoBC,KAAMhC,EAAS/B,MAAO,eAAa,gBAAvD,UACE,QAAC,KAAD,CAAUtB,KAAK,KAAKsF,MAAM,kBAIhC,QAACE,EAAD,UAAmBjC,KACnB,QAACiC,EAAD,UAAmBnC,EAASK,MAAM+B,oBAClC,QAACD,EAAD,WACE,QAAC,IAAD,CAAWE,KAAMrC,EAASsC,cAE5B,QAACH,EAAD,WACE,QAAC,IAAD,CACEI,aAAW,EACXC,kBAAkB,EAClBC,OAAO,EACP5F,OACE,QAAC,KAAD,CACE6F,aAAc,CACZC,qBAAsB,QAExBhG,KAAK,QACLiG,KAAK,SACL,cAAYzG,EAAAA,EAAAA,GAAE,aACdpB,MAAM,QAAC,KAAD,CAAc4B,KAAK,SAZ/B,WAgBE,QAAC,IAAD,CAASD,SAAU,CAAC,gCAApB,UACE,wBACE,QAAC,IAAD,CAAM+E,GAAIhB,EAAaoC,wBAAwBnD,GAA/C,UACGvD,EAAAA,EAAAA,GAAE,2BAIT,wBACE,QAAC,IAAD,CACEsF,GAAI,CAACC,SAAUL,EAAYpC,MAAO,CAACA,MAAOuB,IAD5C,UAGGrE,EAAAA,EAAAA,GAAE,+CApEE8D,MA8ErBX,aACE,MAAM,MACJwD,EACA9D,QAAQ,MAACU,EAAD,OAAQX,GAChBK,UAAU,MAACH,GAHP,aAIJP,GACEE,KAAKC,OACH,aAACc,EAAD,IAAeC,EAAf,sBAAoBmD,EAApB,QAA2CC,GAAWpE,KAAKiB,OAC1DoD,OAAQC,EAASC,KAAMC,KAAUC,GAAgBpE,EAElDpC,EAAmB,SAAXkC,GAAoB5C,EAAAA,EAAAA,GAAE,kBAAoB4C,EAElDG,EAAON,KAAKO,UACZmE,GAAY,QAAC,KAAD,CAAWrB,MAAM,UAAUtF,KAAK,KAAK4G,UAAU,SAC3DC,GACJ,QAACC,EAAD,CACEhC,GAAI,CACFC,SAAUtC,SAASsC,SACnBzC,MAAO,IACFoE,EACHnE,KAAM,SALZ,WASG/C,EAAAA,EAAAA,GAAE,aATL,IAS6B,SAAT+C,GAAmBoE,KAGnCI,GACJ,QAACD,EAAD,CACEhC,GAAI,CACFC,SAAUtC,SAASsC,SACnBzC,MAAO,IACFoE,EACHnE,KAAM,UALZ,WASG/C,EAAAA,EAAAA,GAAE,SATL,IASyB,UAAT+C,GAAoBoE,KAItC,OACE,QAAC,EAAAhC,SAAD,YACE,QAACqC,EAAD,YACE,QAACC,EAAD,WAAQzH,EAAAA,EAAAA,GAAE,kBACV,QAAC,KAAD,CAAW0H,IAAK,EAAhB,WACE,QAAC,KAAD,CACElH,KAAK,QACLC,SAAS,UACToF,KAAO,IAAGtC,KAASoD,EAAMrD,QAAQlE,eAAeuH,EAAMnC,WAAW5B,YAHnE,UAKG5C,EAAAA,EAAAA,GAAE,yBAEL,QAAC,KAAD,CACErB,QAAS,CACPK,UAAWX,EAAAA,GAAAA,YACXY,UAAW,CACTqE,QAASqD,EAAMrD,QAAQkB,GACvBmC,MAAOA,EAAMnC,GACbJ,IAAKxB,aAMf,QAAC+E,EAAD,CACEC,UAAWf,EACXgB,QAAkC,KAAzBrE,MAAAA,OAAA,EAAAA,EAAcsE,QACvBC,QAAS,CACPrH,GACA,QAACsH,EAAD,WAAoChI,EAAAA,EAAAA,GAAE,YAAb,WACzBuH,EACAF,EACA,IAEFY,cAAcjI,EAAAA,EAAAA,GAAE,sDAChBkI,YACI3F,MAAAA,GAAAA,EAAcuF,QACZ9H,EAAAA,EAAAA,GAAE,8DACF,KAdR,SAiBGwD,GAAgBC,GAAOhB,KAAKW,mBAE/B,QAAC+E,EAAD,CAAkBC,UAAWxB,QAMrC,UAEMY,GAAe,OAAO,MAAP,sBAAH,kHAMCa,EAAAA,EAAAA,GAAM,GANP,KASZZ,GAAQ,OAAO,KAAP,qBAAH,mCAILE,GAAmB,OAAOW,EAAAA,GAAP,qBAAH,iCAEPC,GAAKA,EAAEC,MAAMC,gBAFN,sCAKCF,GAAKA,EAAEC,MAAME,YAAY,IAL1B,oCAUPL,EAAAA,EAAAA,GAAM,GAVC,KAUKA,EAAAA,EAAAA,GAAM,GAVX,MAchBL,GAAsB,OAAO,MAAP,qBAAH,2CAInBV,GAAiB,OAAOqB,EAAAA,EAAP,qBAAH,gFASd/C,GAAqB,OAAOgD,EAAAA,EAAP,qBAAH,gBACPP,EAAAA,EAAAA,GAAM,IADC,KAIlBQ,GAAS,OAAO,MAAP,qBAAH,0DAKNzD,GAAa,OAAOyD,EAAP,qBACfC,EAAAA,EADY,kCAMVzD,GAAc,OAAO,OAAP,qBAChByD,EAAAA,EADa,gBAKX9C,GAAmB,OAAO6C,EAAP,qBAAH,oDAIhBV,GAAmB,OAAOY,EAAAA,EAAP,qBAAH","sources":["webpack:///./app/components/dataExport.tsx","webpack:///./app/components/deviceName.tsx","webpack:///./app/views/organizationGroupDetails/groupTagValues.tsx"],"sourcesContent":["import * as React from 'react';\nimport debounce from 'lodash/debounce';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport Feature from 'sentry/components/acl/feature';\nimport Button from 'sentry/components/button';\nimport {t} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport withApi from 'sentry/utils/withApi';\nimport withOrganization from 'sentry/utils/withOrganization';\n\n// NOTE: Coordinate with other ExportQueryType (src/sentry/data_export/base.py)\nexport enum ExportQueryType {\n  IssuesByTag = 'Issues-by-Tag',\n  Discover = 'Discover',\n}\n\ninterface DataExportPayload {\n  queryInfo: any;\n  queryType: ExportQueryType; // TODO(ts): Formalize different possible payloads\n}\n\ninterface DataExportProps {\n  api: Client;\n  organization: Organization;\n  payload: DataExportPayload;\n  children?: React.ReactNode;\n  disabled?: boolean;\n  icon?: React.ReactNode;\n}\n\nfunction DataExport({\n  api,\n  children,\n  disabled,\n  organization,\n  payload,\n  icon,\n}: DataExportProps): React.ReactElement {\n  const [inProgress, setInProgress] = React.useState(false);\n\n  React.useEffect(() => {\n    if (inProgress) {\n      setInProgress(false);\n    }\n  }, [payload.queryType, payload.queryInfo]);\n\n  const handleDataExport = React.useCallback(() => {\n    setInProgress(true);\n\n    api\n      .requestPromise(`/organizations/${organization.slug}/data-export/`, {\n        includeAllArgs: true,\n        method: 'POST',\n        data: {\n          query_type: payload.queryType,\n          query_info: payload.queryInfo,\n        },\n      })\n      .then(([_data, _, response]) => {\n        addSuccessMessage(\n          response?.status === 201\n            ? t(\n                \"Sit tight. We'll shoot you an email when your data is ready for download.\"\n              )\n            : t(\"It looks like we're already working on it. Sit tight, we'll email you.\")\n        );\n      })\n      .catch(err => {\n        const message =\n          err?.responseJSON?.detail ??\n          \"We tried our hardest, but we couldn't export your data. Give it another go.\";\n\n        addErrorMessage(t(message));\n        setInProgress(false);\n      });\n  }, [payload.queryInfo, payload.queryType, organization.slug, api]);\n\n  return (\n    <Feature features={['organizations:discover-query']}>\n      {inProgress ? (\n        <Button\n          size=\"small\"\n          priority=\"default\"\n          title=\"You can get on with your life. We'll email you when your data's ready.\"\n          disabled\n          icon={icon}\n        >\n          {t(\"We're working on it...\")}\n        </Button>\n      ) : (\n        <Button\n          onClick={debounce(handleDataExport, 500)}\n          disabled={disabled || false}\n          size=\"small\"\n          priority=\"default\"\n          title=\"Put your data to work. Start your export and we'll email you when it's finished.\"\n          icon={icon}\n        >\n          {children ? children : t('Export All to CSV')}\n        </Button>\n      )}\n    </Feature>\n  );\n}\n\nexport {DataExport};\nexport default withApi(withOrganization(DataExport));\n","import * as React from 'react';\nimport * as Sentry from '@sentry/react';\n\n// Self reference to the module, so that we can mock a failed import in a test.\nimport * as selfModule from 'sentry/components/deviceName';\nimport {IOSDeviceList} from 'sentry/types/iOSDeviceList';\n\nexport function deviceNameMapper(\n  model: string | undefined,\n  module: IOSDeviceList | null\n): string | null {\n  // If we have no model, render nothing\n  if (typeof model !== 'string') {\n    return null;\n  }\n\n  // If module has not loaded yet, render the unparsed model\n  if (module === null) {\n    return model;\n  }\n\n  const [identifier, ...rest] = model.split(' ');\n\n  const modelName = module.generationByIdentifier(identifier);\n  return modelName === undefined ? model : `${modelName} ${rest.join(' ')}`;\n}\n\nexport async function loadDeviceListModule(platform: 'iOS') {\n  if (platform !== 'iOS') {\n    Sentry.captureException('DeviceName component only supports iOS module');\n  }\n  return import('ios-device-list');\n}\n\ninterface DeviceNameProps {\n  value: string;\n  children?: (name: string) => React.ReactNode;\n}\n\n/**\n * This is used to map iOS Device Names to model name.\n * This asynchronously loads the ios-device-list library because of its size\n */\nfunction DeviceName({value, children}: DeviceNameProps): React.ReactElement | null {\n  const [deviceList, setDeviceList] = React.useState<IOSDeviceList | null>(null);\n\n  React.useEffect(() => {\n    let didUnmount = false;\n\n    selfModule\n      .loadDeviceListModule('iOS')\n      .then(module => {\n        // We need to track component unmount so we dont try and setState on an unmounted component\n        if (didUnmount) {\n          return;\n        }\n\n        setDeviceList(module);\n      })\n      .catch(() => {\n        Sentry.captureException('Failed to load ios-device-list module');\n      });\n\n    return () => {\n      didUnmount = true;\n    };\n  }, []);\n\n  const deviceName = React.useMemo(\n    () => deviceNameMapper(value, deviceList),\n    [value, deviceList]\n  );\n\n  return deviceName ? (\n    <span data-test-id=\"loaded-device-name\">\n      {children ? children(deviceName) : deviceName}\n    </span>\n  ) : null;\n}\n\nexport {DeviceName};\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport Feature from 'sentry/components/acl/feature';\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport Button from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport DataExport, {ExportQueryType} from 'sentry/components/dataExport';\nimport {DeviceName} from 'sentry/components/deviceName';\nimport DropdownLink from 'sentry/components/dropdownLink';\nimport GlobalSelectionLink from 'sentry/components/globalSelectionLink';\nimport UserBadge from 'sentry/components/idBadge/userBadge';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport Link from 'sentry/components/links/link';\nimport Pagination from 'sentry/components/pagination';\nimport {PanelTable} from 'sentry/components/panels';\nimport TimeSince from 'sentry/components/timeSince';\nimport {IconArrow, IconEllipsis, IconMail, IconOpen} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport overflowEllipsis from 'sentry/styles/overflowEllipsis';\nimport space from 'sentry/styles/space';\nimport {Group, Project, SavedQueryVersions, Tag, TagValue} from 'sentry/types';\nimport {isUrl, percent} from 'sentry/utils';\nimport EventView from 'sentry/utils/discover/eventView';\n\ntype RouteParams = {\n  groupId: string;\n  orgId: string;\n  tagKey: string;\n};\n\ntype Props = {\n  baseUrl: string;\n  group: Group;\n  environments?: string[];\n  project?: Project;\n} & RouteComponentProps<RouteParams, {}>;\n\ntype State = {\n  tag: Tag | null;\n  tagValueList: TagValue[] | null;\n  tagValueListPageLinks: string;\n};\n\nconst DEFAULT_SORT = 'count';\n\nclass GroupTagValues extends AsyncComponent<\n  Props & AsyncComponent['props'],\n  State & AsyncComponent['state']\n> {\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {environments: environment} = this.props;\n    const {groupId, tagKey} = this.props.params;\n    return [\n      ['tag', `/issues/${groupId}/tags/${tagKey}/`],\n      [\n        'tagValueList',\n        `/issues/${groupId}/tags/${tagKey}/values/`,\n        {query: {environment, sort: this.getSort()}},\n      ],\n    ];\n  }\n\n  getSort(): string {\n    return this.props.location.query.sort || DEFAULT_SORT;\n  }\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderResults() {\n    const {\n      baseUrl,\n      project,\n      environments: environment,\n      params: {orgId, groupId, tagKey},\n    } = this.props;\n    const {tagValueList, tag} = this.state;\n    const discoverFields = [\n      'title',\n      'release',\n      'environment',\n      'user.display',\n      'timestamp',\n    ];\n\n    return tagValueList?.map((tagValue, tagValueIdx) => {\n      const pct = tag?.totalValues\n        ? `${percent(tagValue.count, tag?.totalValues).toFixed(2)}%`\n        : '--';\n      const key = tagValue.key ?? tagKey;\n      const issuesQuery = tagValue.query || `${key}:\"${tagValue.value}\"`;\n      const discoverView = EventView.fromSavedQuery({\n        id: undefined,\n        name: key,\n        fields: [key, ...discoverFields.filter(field => field !== key)],\n        orderby: '-timestamp',\n        query: `issue.id:${groupId} ${issuesQuery}`,\n        projects: [Number(project?.id)],\n        environment,\n        version: 2 as SavedQueryVersions,\n        range: '90d',\n      });\n      const issuesPath = `/organizations/${orgId}/issues/`;\n\n      return (\n        <Fragment key={tagValueIdx}>\n          <NameColumn>\n            <NameWrapper data-test-id=\"group-tag-value\">\n              <GlobalSelectionLink\n                to={{\n                  pathname: `${baseUrl}events/`,\n                  query: {query: issuesQuery},\n                }}\n              >\n                {key === 'user' ? (\n                  <UserBadge\n                    user={{...tagValue, id: tagValue.identifier ?? ''}}\n                    avatarSize={20}\n                    hideEmail\n                  />\n                ) : (\n                  <DeviceName value={tagValue.name} />\n                )}\n              </GlobalSelectionLink>\n            </NameWrapper>\n\n            {tagValue.email && (\n              <StyledExternalLink\n                href={`mailto:${tagValue.email}`}\n                data-test-id=\"group-tag-mail\"\n              >\n                <IconMail size=\"xs\" color=\"gray300\" />\n              </StyledExternalLink>\n            )}\n            {isUrl(tagValue.value) && (\n              <StyledExternalLink href={tagValue.value} data-test-id=\"group-tag-url\">\n                <IconOpen size=\"xs\" color=\"gray300\" />\n              </StyledExternalLink>\n            )}\n          </NameColumn>\n          <RightAlignColumn>{pct}</RightAlignColumn>\n          <RightAlignColumn>{tagValue.count.toLocaleString()}</RightAlignColumn>\n          <RightAlignColumn>\n            <TimeSince date={tagValue.lastSeen} />\n          </RightAlignColumn>\n          <RightAlignColumn>\n            <DropdownLink\n              anchorRight\n              alwaysRenderMenu={false}\n              caret={false}\n              title={\n                <Button\n                  tooltipProps={{\n                    containerDisplayMode: 'flex',\n                  }}\n                  size=\"small\"\n                  type=\"button\"\n                  aria-label={t('Show more')}\n                  icon={<IconEllipsis size=\"xs\" />}\n                />\n              }\n            >\n              <Feature features={['organizations:discover-basic']}>\n                <li>\n                  <Link to={discoverView.getResultsViewUrlTarget(orgId)}>\n                    {t('Open in Discover')}\n                  </Link>\n                </li>\n              </Feature>\n              <li>\n                <GlobalSelectionLink\n                  to={{pathname: issuesPath, query: {query: issuesQuery}}}\n                >\n                  {t('Search All Issues with Tag Value')}\n                </GlobalSelectionLink>\n              </li>\n            </DropdownLink>\n          </RightAlignColumn>\n        </Fragment>\n      );\n    });\n  }\n\n  renderBody() {\n    const {\n      group,\n      params: {orgId, tagKey},\n      location: {query},\n      environments,\n    } = this.props;\n    const {tagValueList, tag, tagValueListPageLinks, loading} = this.state;\n    const {cursor: _cursor, page: _page, ...currentQuery} = query;\n\n    const title = tagKey === 'user' ? t('Affected Users') : tagKey;\n\n    const sort = this.getSort();\n    const sortArrow = <IconArrow color=\"gray300\" size=\"xs\" direction=\"down\" />;\n    const lastSeenColumnHeader = (\n      <StyledSortLink\n        to={{\n          pathname: location.pathname,\n          query: {\n            ...currentQuery,\n            sort: 'date',\n          },\n        }}\n      >\n        {t('Last Seen')} {sort === 'date' && sortArrow}\n      </StyledSortLink>\n    );\n    const countColumnHeader = (\n      <StyledSortLink\n        to={{\n          pathname: location.pathname,\n          query: {\n            ...currentQuery,\n            sort: 'count',\n          },\n        }}\n      >\n        {t('Count')} {sort === 'count' && sortArrow}\n      </StyledSortLink>\n    );\n\n    return (\n      <Fragment>\n        <TitleWrapper>\n          <Title>{t('Tag Details')}</Title>\n          <ButtonBar gap={1}>\n            <Button\n              size=\"small\"\n              priority=\"default\"\n              href={`/${orgId}/${group.project.slug}/issues/${group.id}/tags/${tagKey}/export/`}\n            >\n              {t('Export Page to CSV')}\n            </Button>\n            <DataExport\n              payload={{\n                queryType: ExportQueryType.IssuesByTag,\n                queryInfo: {\n                  project: group.project.id,\n                  group: group.id,\n                  key: tagKey,\n                },\n              }}\n            />\n          </ButtonBar>\n        </TitleWrapper>\n        <StyledPanelTable\n          isLoading={loading}\n          isEmpty={tagValueList?.length === 0}\n          headers={[\n            title,\n            <PercentColumnHeader key=\"percent\">{t('Percent')}</PercentColumnHeader>,\n            countColumnHeader,\n            lastSeenColumnHeader,\n            '',\n          ]}\n          emptyMessage={t('Sorry, the tags for this issue could not be found.')}\n          emptyAction={\n            !!environments?.length\n              ? t('No tags were found for the currently selected environments')\n              : null\n          }\n        >\n          {tagValueList && tag && this.renderResults()}\n        </StyledPanelTable>\n        <StyledPagination pageLinks={tagValueListPageLinks} />\n      </Fragment>\n    );\n  }\n}\n\nexport default GroupTagValues;\n\nconst TitleWrapper = styled('div')`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: ${space(2)};\n`;\n\nconst Title = styled('h3')`\n  margin: 0;\n`;\n\nconst StyledPanelTable = styled(PanelTable)`\n  white-space: nowrap;\n  font-size: ${p => p.theme.fontSizeMedium};\n\n  overflow: auto;\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    overflow: initial;\n  }\n\n  & > * {\n    padding: ${space(1)} ${space(2)};\n  }\n`;\n\nconst PercentColumnHeader = styled('div')`\n  text-align: right;\n`;\n\nconst StyledSortLink = styled(Link)`\n  text-align: right;\n  color: inherit;\n\n  :hover {\n    color: inherit;\n  }\n`;\n\nconst StyledExternalLink = styled(ExternalLink)`\n  margin-left: ${space(0.5)};\n`;\n\nconst Column = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst NameColumn = styled(Column)`\n  ${overflowEllipsis};\n  display: flex;\n  min-width: 320px;\n`;\n\nconst NameWrapper = styled('span')`\n  ${overflowEllipsis};\n  width: auto;\n`;\n\nconst RightAlignColumn = styled(Column)`\n  justify-content: flex-end;\n`;\n\nconst StyledPagination = styled(Pagination)`\n  margin: 0;\n`;\n"],"names":["ExportQueryType","DataExport","api","children","disabled","organization","payload","icon","inProgress","setInProgress","React","queryType","queryInfo","handleDataExport","requestPromise","slug","includeAllArgs","method","data","query_type","query_info","then","_data","_","response","addSuccessMessage","status","t","catch","err","message","responseJSON","detail","addErrorMessage","features","size","priority","title","onClick","debounce","withApi","withOrganization","deviceNameMapper","model","module","identifier","rest","split","modelName","generationByIdentifier","undefined","join","async","loadDeviceListModule","platform","Sentry","DeviceName","value","deviceList","setDeviceList","didUnmount","selfModule","deviceName","GroupTagValues","AsyncComponent","getEndpoints","environments","environment","this","props","groupId","tagKey","params","query","sort","getSort","location","renderLoading","renderBody","renderResults","baseUrl","project","orgId","tagValueList","tag","state","discoverFields","map","tagValue","tagValueIdx","pct","totalValues","percent","count","toFixed","key","issuesQuery","discoverView","EventView","id","name","fields","filter","field","orderby","projects","Number","version","range","issuesPath","Fragment","NameColumn","NameWrapper","to","pathname","user","avatarSize","hideEmail","email","StyledExternalLink","href","color","isUrl","RightAlignColumn","toLocaleString","date","lastSeen","anchorRight","alwaysRenderMenu","caret","tooltipProps","containerDisplayMode","type","getResultsViewUrlTarget","group","tagValueListPageLinks","loading","cursor","_cursor","page","_page","currentQuery","sortArrow","direction","lastSeenColumnHeader","StyledSortLink","countColumnHeader","TitleWrapper","Title","gap","StyledPanelTable","isLoading","isEmpty","length","headers","PercentColumnHeader","emptyMessage","emptyAction","StyledPagination","pageLinks","space","PanelTable","p","theme","fontSizeMedium","breakpoints","Link","ExternalLink","Column","overflowEllipsis","Pagination"],"sourceRoot":""}