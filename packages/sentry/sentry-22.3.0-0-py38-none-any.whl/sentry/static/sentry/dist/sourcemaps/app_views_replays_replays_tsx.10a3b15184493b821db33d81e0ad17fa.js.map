{"version":3,"file":"chunks/app_views_replays_replays_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"sYAQe,MAAMA,UAGXC,EAAAA,EACRC,WACE,MAAO,GAGTC,SACE,OACE,QAAC,IAAD,CAAqBC,MAAOC,KAAKH,WAAjC,SACGG,KAAKC,qBAXON,EAAAA,YAAAA,a,6yBCuBrB,MAAMO,UAAgBP,EAAAA,EACpBQ,eACE,MAAM,aAACC,EAAD,YAAeC,EAAf,SAA4BC,GAAYN,KAAKO,MAY7CC,EAVYC,EAAAA,GAAAA,eAAyB,CACzCC,GAAI,GACJC,KAAM,GACNC,QAAS,EACTC,OAAQ,CAAC,UAAW,aACpBC,QAAS,GACTC,SAAU,CAAC,GACXC,MAAOX,EACPY,MAAO,qBAEoBC,oBAAoBZ,GACjD,MAAO,CACL,CAAC,YAAc,kBAAiBF,EAAae,iBAAkB,CAACF,MAAOT,KAG3EX,WACE,MAAQ,aAAYG,KAAKO,MAAMa,OAAOC,QAGxCC,aACE,MAAM,UAACC,EAAD,oBAAYC,GAAuBxB,KAAKyB,OACxC,aAACrB,GAAgBJ,KAAKO,MAEtBmB,EAAaH,EAAUI,KAC7B,OACE,QAAC,IAAD,CACEC,yBAAyB,EACzBC,oBAAqB,CAAC,UAFxB,UAIE,QAAC,KAAD,YACE,QAAC,KAAD,WACE,QAACC,EAAD,WACE,0BACGC,EAAAA,EAAAA,GAAE,WADL,KACiB,QAAC,IAAD,CAAcC,KAAK,iBAIxC,QAAC,KAAD,WACE,QAAC,IAAD,UACGN,MAAAA,OADH,EACGA,EAAYO,KAAIC,IACf,QAACC,EAAD,WACE,QAACC,EAAD,CACEC,GAAK,kBAAiBjC,EAAae,iBAAgBmB,EAAAA,EAAAA,IAAkB,CACnEC,QAASL,EAAO,gBAChBxB,GAAIwB,EAAOxB,QAHf,SAMGwB,EAAOM,aAPYN,EAAOxB,UAapCc,IACC,QAAC,IAAD,CAAYiB,UAAWjB,KAAyBxB,KAAKO,cAQjE,MAAMuB,GAAc,OAAOY,EAAAA,EAAP,qBAAH,gGAOXP,GAAoB,OAAOQ,EAAAA,GAAP,qBAAH,8CAGLC,EAAAA,EAAAA,GAAM,GAHD,mBAIJA,EAAAA,EAAAA,GAAM,GAJF,KAOjBR,GAAa,OAAOS,EAAAA,EAAP,qBAAH,mBAEHD,EAAAA,EAAAA,GAAM,GAFH,KAKhB,GAAeE,EAAAA,EAAAA,aAAWC,EAAAA,EAAAA,GAAiB7C","sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/replays/replays.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {withRouter, WithRouterProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport FeatureBadge from 'sentry/components/featureBadge';\nimport Link from 'sentry/components/links/link';\nimport PageFiltersContainer from 'sentry/components/organizations/pageFilters/container';\nimport PageHeading from 'sentry/components/pageHeading';\nimport Pagination from 'sentry/components/pagination';\nimport {Panel, PanelBody, PanelItem} from 'sentry/components/panels';\nimport {t} from 'sentry/locale';\nimport {PageContent, PageHeader} from 'sentry/styles/organization';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {generateEventSlug} from 'sentry/utils/discover/urls';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport AsyncView from 'sentry/views/asyncView';\n\nimport {Replay} from './types';\n\ntype Props = AsyncView['props'] &\n  WithRouterProps<{orgId: string}> & {\n    organization: Organization;\n    statsPeriod?: string | undefined; // revisit i'm sure i'm doing statsperiod wrong\n  };\n\ntype State = AsyncView['state'] & {\n  replayList: Replay[] | null;\n};\n\nclass Replays extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {organization, statsPeriod, location} = this.props;\n\n    const eventView = EventView.fromSavedQuery({\n      id: '',\n      name: '',\n      version: 2,\n      fields: ['eventID', 'timestamp'],\n      orderby: '',\n      projects: [2],\n      range: statsPeriod,\n      query: 'event.type:error', // future: change to replay event\n    });\n    const apiPayload = eventView.getEventsAPIPayload(location);\n    return [\n      ['eventData', `/organizations/${organization.slug}/eventsv2/`, {query: apiPayload}],\n    ];\n  }\n  getTitle() {\n    return `Replays - ${this.props.params.orgId}`;\n  }\n\n  renderBody() {\n    const {eventData, replayListPageLinks} = this.state;\n    const {organization} = this.props;\n\n    const replayList = eventData.data;\n    return (\n      <PageFiltersContainer\n        showEnvironmentSelector={false}\n        resetParamsOnChange={['cursor']}\n      >\n        <PageContent>\n          <PageHeader>\n            <HeaderTitle>\n              <div>\n                {t('Replays')} <FeatureBadge type=\"beta\" />\n              </div>\n            </HeaderTitle>\n          </PageHeader>\n          <Panel>\n            <PanelBody>\n              {replayList?.map(replay => (\n                <PanelItemCentered key={replay.id}>\n                  <StyledLink\n                    to={`/organizations/${organization.slug}/replays/${generateEventSlug({\n                      project: replay['project.name'],\n                      id: replay.id,\n                    })}/`}\n                  >\n                    {replay.timestamp}\n                  </StyledLink>\n                </PanelItemCentered>\n              ))}\n            </PanelBody>\n          </Panel>\n          {replayListPageLinks && (\n            <Pagination pageLinks={replayListPageLinks} {...this.props} />\n          )}\n        </PageContent>\n      </PageFiltersContainer>\n    );\n  }\n}\n\nconst HeaderTitle = styled(PageHeading)`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex: 1;\n`;\n\nconst PanelItemCentered = styled(PanelItem)`\n  align-items: center;\n  padding: 0;\n  padding-left: ${space(2)};\n  padding-right: ${space(2)};\n`;\n\nconst StyledLink = styled(Link)`\n  flex: 1;\n  padding: ${space(2)};\n`;\n\nexport default withRouter(withOrganization(Replays));\n"],"names":["AsyncView","AsyncComponent","getTitle","render","title","this","renderComponent","Replays","getEndpoints","organization","statsPeriod","location","props","apiPayload","EventView","id","name","version","fields","orderby","projects","range","query","getEventsAPIPayload","slug","params","orgId","renderBody","eventData","replayListPageLinks","state","replayList","data","showEnvironmentSelector","resetParamsOnChange","HeaderTitle","t","type","map","replay","PanelItemCentered","StyledLink","to","generateEventSlug","project","timestamp","pageLinks","PageHeading","PanelItem","space","Link","withRouter","withOrganization"],"sourceRoot":""}