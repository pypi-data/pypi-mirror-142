{"version":3,"file":"chunks/app_views_settings_account_notifications_notificationSettings_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/alertLink.tsx","webpack:///./app/views/settings/account/notifications/notificationSettings.tsx"],"sourcesContent":["import * as React from 'react';\nimport styled from '@emotion/styled';\nimport omit from 'lodash/omit';\n\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport Link from 'sentry/components/links/link';\nimport {IconChevron} from 'sentry/icons';\nimport space from 'sentry/styles/space';\n\ntype Size = 'small' | 'normal';\ntype Priority = 'info' | 'warning' | 'success' | 'error' | 'muted';\n\ntype LinkProps = React.ComponentPropsWithoutRef<typeof Link>;\n\ntype OtherProps = {\n  children?: React.ReactNode;\n  ['data-test-id']?: string;\n  icon?: string | React.ReactNode;\n  onClick?: (e: React.MouseEvent) => void;\n};\n\ntype DefaultProps = {\n  openInNewTab: boolean;\n  priority: Priority;\n  size: Size;\n  withoutMarginBottom: boolean;\n  href?: string;\n};\n\ntype Props = OtherProps & Partial<DefaultProps> & Partial<Pick<LinkProps, 'to'>>;\n\ntype StyledLinkProps = DefaultProps &\n  Partial<Pick<LinkProps, 'to'>> &\n  Omit<LinkProps, 'to' | 'size'>;\n\nfunction AlertLink({\n  size = 'normal',\n  priority = 'warning',\n  icon,\n  children,\n  onClick,\n  withoutMarginBottom = false,\n  openInNewTab = false,\n  to,\n  href,\n  ['data-test-id']: dataTestId,\n}: Props) {\n  return (\n    <StyledLink\n      data-test-id={dataTestId}\n      to={to}\n      href={href}\n      onClick={onClick}\n      size={size}\n      priority={priority}\n      withoutMarginBottom={withoutMarginBottom}\n      openInNewTab={openInNewTab}\n    >\n      {icon && <IconWrapper>{icon}</IconWrapper>}\n      <AlertLinkText>{children}</AlertLinkText>\n      <IconLink>\n        <IconChevron direction=\"right\" />\n      </IconLink>\n    </StyledLink>\n  );\n}\n\nexport default AlertLink;\n\nconst StyledLink = styled(({openInNewTab, to, href, ...props}: StyledLinkProps) => {\n  const linkProps = omit(props, ['withoutMarginBottom', 'priority', 'size']);\n  if (href) {\n    return <ExternalLink {...linkProps} href={href} openInNewTab={openInNewTab} />;\n  }\n\n  return <Link {...linkProps} to={to || ''} />;\n})`\n  display: flex;\n  background-color: ${p => p.theme.alert[p.priority].backgroundLight};\n  color: ${p => p.theme.textColor};\n  border: 1px dashed ${p => p.theme.alert[p.priority].border};\n  padding: ${p => (p.size === 'small' ? `${space(1)} ${space(1.5)}` : space(2))};\n  margin-bottom: ${p => (p.withoutMarginBottom ? 0 : space(3))};\n  border-radius: 0.25em;\n  transition: 0.2s border-color;\n\n  &.focus-visible {\n    outline: none;\n    box-shadow: ${p => p.theme.alert[p.priority].border}7f 0 0 0 2px;\n  }\n`;\n\nconst IconWrapper = styled('span')`\n  display: flex;\n  margin: ${space(0.5)} ${space(1.5)} ${space(0.5)} 0;\n`;\n\nconst IconLink = styled(IconWrapper)`\n  margin: ${space(0.5)} 0;\n`;\n\nconst AlertLinkText = styled('div')`\n  line-height: 1.5;\n  flex-grow: 1;\n`;\n","import {Fragment} from 'react';\n\nimport AlertLink from 'sentry/components/alertLink';\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport Form from 'sentry/components/forms/form';\nimport JsonForm from 'sentry/components/forms/jsonForm';\nimport FormModel from 'sentry/components/forms/model';\nimport {FieldObject} from 'sentry/components/forms/type';\nimport Link from 'sentry/components/links/link';\nimport {IconMail} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport withOrganizations from 'sentry/utils/withOrganizations';\nimport {\n  CONFIRMATION_MESSAGE,\n  NOTIFICATION_SETTINGS_TYPES,\n  NotificationSettingsObject,\n  SELF_NOTIFICATION_SETTINGS_TYPES,\n} from 'sentry/views/settings/account/notifications/constants';\nimport {NOTIFICATION_SETTING_FIELDS} from 'sentry/views/settings/account/notifications/fields2';\nimport {\n  decideDefault,\n  getParentIds,\n  getStateToPutForDefault,\n  isSufficientlyComplex,\n  mergeNotificationSettings,\n} from 'sentry/views/settings/account/notifications/utils';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\n\ntype Props = AsyncComponent['props'] & {\n  organizations: Organization[];\n};\n\ntype State = {\n  legacyData: {[key: string]: string};\n  notificationSettings: NotificationSettingsObject;\n} & AsyncComponent['state'];\n\nclass NotificationSettings extends AsyncComponent<Props, State> {\n  model = new FormModel();\n\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      notificationSettings: {},\n      legacyData: {},\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    return [\n      ['notificationSettings', `/users/me/notification-settings/`],\n      ['legacyData', '/users/me/notifications/'],\n    ];\n  }\n\n  componentDidMount() {\n    // only tied to a user\n    trackAdvancedAnalyticsEvent('notification_settings.index_page_viewed', {\n      organization: null,\n    });\n  }\n\n  getStateToPutForDefault = (\n    changedData: {[key: string]: string},\n    notificationType: string\n  ) => {\n    /**\n     * Update the current providers' parent-independent notification settings\n     * with the new value. If the new value is \"never\", then also update all\n     * parent-specific notification settings to \"default\". If the previous value\n     * was \"never\", then assume providerList should be \"email\" only.\n     */\n\n    const {notificationSettings} = this.state;\n\n    const updatedNotificationSettings = getStateToPutForDefault(\n      notificationType,\n      notificationSettings,\n      changedData,\n      getParentIds(notificationType, notificationSettings)\n    );\n\n    this.setState({\n      notificationSettings: mergeNotificationSettings(\n        notificationSettings,\n        updatedNotificationSettings\n      ),\n    });\n\n    return updatedNotificationSettings;\n  };\n\n  get notificationSettingsType() {\n    const hasFeatureFlag =\n      this.props.organizations.filter(org =>\n        org.features?.includes('slack-overage-notifications')\n      ).length > 0;\n    // filter out quotas if the feature flag isn't set\n    return NOTIFICATION_SETTINGS_TYPES.filter(type => type !== 'quota' || hasFeatureFlag);\n  }\n\n  getInitialData(): {[key: string]: string} {\n    const {notificationSettings, legacyData} = this.state;\n\n    const notificationsInitialData = Object.fromEntries(\n      this.notificationSettingsType.map(notificationType => [\n        notificationType,\n        decideDefault(notificationType, notificationSettings),\n      ])\n    );\n\n    const allInitialData = {\n      ...notificationsInitialData,\n      ...legacyData,\n    };\n\n    return allInitialData;\n  }\n\n  getFields(): FieldObject[] {\n    const {notificationSettings} = this.state;\n\n    const fields: FieldObject[] = [];\n    const endOfFields: FieldObject[] = [];\n    for (const notificationType of this.notificationSettingsType) {\n      const field = Object.assign({}, NOTIFICATION_SETTING_FIELDS[notificationType], {\n        getData: data => this.getStateToPutForDefault(data, notificationType),\n        help: (\n          <Fragment>\n            <p>\n              {NOTIFICATION_SETTING_FIELDS[notificationType].help}\n              &nbsp;\n              <Link\n                data-test-id=\"fine-tuning\"\n                to={`/settings/account/notifications/${notificationType}`}\n              >\n                Fine tune\n              </Link>\n            </p>\n          </Fragment>\n        ),\n      }) as any;\n\n      if (\n        isSufficientlyComplex(notificationType, notificationSettings) &&\n        typeof field !== 'function'\n      ) {\n        field.confirm = {never: CONFIRMATION_MESSAGE};\n      }\n      if (field.type === 'blank') {\n        endOfFields.push(field);\n      } else {\n        fields.push(field);\n      }\n    }\n    const legacyField = SELF_NOTIFICATION_SETTINGS_TYPES.map(\n      type => NOTIFICATION_SETTING_FIELDS[type] as FieldObject\n    );\n    fields.push(...legacyField);\n\n    const allFields = [...fields, ...endOfFields];\n\n    return allFields;\n  }\n\n  onFieldChange = (fieldName: string) => {\n    if (SELF_NOTIFICATION_SETTINGS_TYPES.includes(fieldName)) {\n      const endpointDetails = {\n        apiEndpoint: '/users/me/notifications/',\n      };\n      this.model.setFormOptions({...this.model.options, ...endpointDetails});\n    } else {\n      const endpointDetails = {\n        apiEndpoint: '/users/me/notification-settings/',\n      };\n      this.model.setFormOptions({...this.model.options, ...endpointDetails});\n    }\n  };\n\n  renderBody() {\n    return (\n      <Fragment>\n        <SettingsPageHeader title=\"Notifications\" />\n        <TextBlock>Personal notifications sent by email or an integration.</TextBlock>\n        <Form\n          model={this.model}\n          saveOnBlur\n          apiMethod=\"PUT\"\n          onFieldChange={this.onFieldChange}\n          initialData={this.getInitialData()}\n        >\n          <JsonForm title={t('Notifications')} fields={this.getFields()} />\n        </Form>\n        <AlertLink to=\"/settings/account/emails\" icon={<IconMail />}>\n          {t('Looking to add or remove an email address? Use the emails panel.')}\n        </AlertLink>\n      </Fragment>\n    );\n  }\n}\n\nexport default withOrganizations(NotificationSettings);\n"],"names":["AlertLink","size","priority","icon","children","onClick","withoutMarginBottom","openInNewTab","to","href","dataTestId","StyledLink","IconWrapper","AlertLinkText","IconLink","direction","props","linkProps","omit","p","theme","alert","backgroundLight","textColor","border","space","NotificationSettings","AsyncComponent","FormModel","changedData","notificationType","notificationSettings","this","state","updatedNotificationSettings","getStateToPutForDefault","getParentIds","setState","mergeNotificationSettings","fieldName","SELF_NOTIFICATION_SETTINGS_TYPES","endpointDetails","apiEndpoint","model","setFormOptions","options","getDefaultState","super","legacyData","getEndpoints","componentDidMount","trackAdvancedAnalyticsEvent","organization","hasFeatureFlag","organizations","filter","org","features","includes","length","NOTIFICATION_SETTINGS_TYPES","type","getInitialData","Object","fromEntries","notificationSettingsType","map","decideDefault","getFields","fields","endOfFields","field","assign","NOTIFICATION_SETTING_FIELDS","getData","data","help","Fragment","isSufficientlyComplex","confirm","never","CONFIRMATION_MESSAGE","push","legacyField","renderBody","title","saveOnBlur","apiMethod","onFieldChange","initialData","t","withOrganizations"],"sourceRoot":""}