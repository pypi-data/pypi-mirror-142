{"version":3,"file":"chunks/app_views_settings_account_accountClose_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/account/accountClose.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage, addLoadingMessage} from 'sentry/actionCreators/indicator';\nimport {ModalRenderProps, openModal} from 'sentry/actionCreators/modal';\nimport Alert from 'sentry/components/alert';\nimport Button from 'sentry/components/button';\nimport Confirm from 'sentry/components/confirm';\nimport {\n  Panel,\n  PanelAlert,\n  PanelBody,\n  PanelHeader,\n  PanelItem,\n} from 'sentry/components/panels';\nimport {IconFlag} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport AsyncView from 'sentry/views/asyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\n\nconst BYE_URL = '/';\nconst leaveRedirect = () => (window.location.href = BYE_URL);\n\nconst Important = styled('div')`\n  font-weight: bold;\n  font-size: 1.2em;\n`;\n\nconst GoodbyeModalContent = ({Header, Body, Footer}: ModalRenderProps) => (\n  <div>\n    <Header>{t('Closing Account')}</Header>\n    <Body>\n      <TextBlock>\n        {t('Your account has been deactivated and scheduled for removal.')}\n      </TextBlock>\n      <TextBlock>\n        {t('Thanks for using Sentry! We hope to see you again soon!')}\n      </TextBlock>\n    </Body>\n    <Footer>\n      <Button href={BYE_URL}>{t('Goodbye')}</Button>\n    </Footer>\n  </div>\n);\n\ntype OwnedOrg = {\n  organization: Organization;\n  singleOwner: boolean;\n};\n\ntype Props = AsyncView['props'];\n\ntype State = AsyncView['state'] & {\n  organizations: OwnedOrg[] | null;\n  /**\n   * Org slugs that will be removed\n   */\n  orgsToRemove: Set<string> | null;\n};\n\nclass AccountClose extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    return [['organizations', '/organizations/?owner=1']];\n  }\n\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      orgsToRemove: null,\n    };\n  }\n\n  get singleOwnerOrgs() {\n    return this.state.organizations\n      ?.filter(({singleOwner}) => singleOwner)\n      ?.map(({organization}) => organization.slug);\n  }\n\n  handleChange = (\n    {slug}: Organization,\n    isSingle: boolean,\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    const checked = event.target.checked;\n\n    // Can't unselect an org where you are the single owner\n    if (isSingle) {\n      return;\n    }\n\n    this.setState(state => {\n      const set = state.orgsToRemove || new Set(this.singleOwnerOrgs);\n      if (checked) {\n        set.add(slug);\n      } else {\n        set.delete(slug);\n      }\n\n      return {orgsToRemove: set};\n    });\n  };\n\n  handleRemoveAccount = async () => {\n    const {orgsToRemove} = this.state;\n    const orgs = orgsToRemove === null ? this.singleOwnerOrgs : Array.from(orgsToRemove);\n\n    addLoadingMessage('Closing account\\u2026');\n\n    try {\n      await this.api.requestPromise('/users/me/', {\n        method: 'DELETE',\n        data: {organizations: orgs},\n      });\n\n      openModal(GoodbyeModalContent, {\n        onClose: leaveRedirect,\n      });\n\n      // Redirect after 10 seconds\n      setTimeout(leaveRedirect, 10000);\n    } catch {\n      addErrorMessage('Error closing account');\n    }\n  };\n\n  renderBody() {\n    const {organizations, orgsToRemove} = this.state;\n\n    return (\n      <div>\n        <SettingsPageHeader title=\"Close Account\" />\n\n        <TextBlock>\n          {t('This will permanently remove all associated data for your user')}.\n        </TextBlock>\n\n        <Alert type=\"error\" icon={<IconFlag size=\"md\" />}>\n          <Important>\n            {t('Closing your account is permanent and cannot be undone')}!\n          </Important>\n        </Alert>\n\n        <Panel>\n          <PanelHeader>{t('Remove the following organizations')}</PanelHeader>\n          <PanelBody>\n            <PanelAlert type=\"info\">\n              {t(\n                'Ownership will remain with other organization owners if an organization is not deleted.'\n              )}\n              <br />\n              {tct(\n                \"Boxes which can't be unchecked mean that you are the only organization owner and the organization [strong:will be deleted].\",\n                {strong: <strong />}\n              )}\n            </PanelAlert>\n\n            {organizations?.map(({organization, singleOwner}) => (\n              <PanelItem key={organization.slug}>\n                <label>\n                  <input\n                    style={{marginRight: 6}}\n                    type=\"checkbox\"\n                    value={organization.slug}\n                    onChange={this.handleChange.bind(this, organization, singleOwner)}\n                    name=\"organizations\"\n                    checked={\n                      orgsToRemove === null\n                        ? singleOwner\n                        : orgsToRemove.has(organization.slug)\n                    }\n                    disabled={singleOwner}\n                  />\n                  {organization.slug}\n                </label>\n              </PanelItem>\n            ))}\n          </PanelBody>\n        </Panel>\n\n        <Confirm\n          priority=\"danger\"\n          message={t(\n            'This is permanent and cannot be undone, are you really sure you want to do this?'\n          )}\n          onConfirm={this.handleRemoveAccount}\n        >\n          <Button priority=\"danger\">{t('Close Account')}</Button>\n        </Confirm>\n      </div>\n    );\n  }\n}\n\nexport default AccountClose;\n"],"names":["AsyncView","AsyncComponent","getTitle","render","title","this","renderComponent","leaveRedirect","window","location","href","Important","GoodbyeModalContent","Header","Body","Footer","t","AccountClose","isSingle","event","slug","checked","target","setState","state","set","orgsToRemove","Set","singleOwnerOrgs","add","delete","async","orgs","Array","from","addLoadingMessage","api","requestPromise","method","data","organizations","openModal","onClose","setTimeout","addErrorMessage","getEndpoints","getDefaultState","super","filter","singleOwner","map","organization","renderBody","type","icon","size","tct","strong","style","marginRight","value","onChange","handleChange","bind","name","has","disabled","priority","message","onConfirm","handleRemoveAccount"],"sourceRoot":""}