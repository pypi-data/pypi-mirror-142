{"version":3,"file":"chunks/app_views_organizationGroupDetails_groupEvents_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"uVAuEA,MAAMA,GAAuBC,E,sCAAAA,IAd7B,YAAoF,IAAtE,KAACC,EAAD,aAAOC,EAAP,SAAqBC,GAAiD,EAClF,MAAMC,EAAUC,EAAAA,SACd,IA7CJ,SAAuBC,EAAYJ,EAA4BD,GAAyB,QACtF,IAAKK,EACH,OAAO,EAGT,IAAIC,EAAAA,EAAAA,KACF,OAAO,EAGT,IAAKC,MAAMC,QAAQP,EAAaQ,gBAC9B,OAAO,EAGT,MAAMC,EAAUT,EAAaQ,eAAeE,KAAIC,GAAKA,EAAEC,KAEvD,IAAKH,EAAQI,SAASd,KAAUU,EAAQI,SAAR,UAAiBb,EAAaD,YAA9B,QAAsC,IACpE,OAAO,EAGT,MAAMe,EAAgBL,EAAQM,QAAQhB,GAEtC,OADqBU,EAAQM,QAAR,UAAgBf,EAAaD,YAA7B,QAAqC,KACnCe,EAwBfE,CAAcC,EAAAA,EAAAA,IAAgB,QAASjB,EAAcD,IAE3D,CAACC,EAAcD,EAAMkB,EAAAA,EAAAA,IAAgB,UAGvC,OAAIC,EAAAA,EAAAA,GAA+BjB,GAC1BA,EAAS,CAACC,QAAAA,IAGZA,EAAUD,EAAW,S,yXC7DvB,SAASkB,EACdC,EACAC,GAGA,GAAqB,iBAAVD,EACT,OAAO,KAIT,GAAe,OAAXC,EACF,OAAOD,EAGT,MAAOE,KAAeC,GAAQH,EAAMI,MAAM,KAEpCC,EAAYJ,EAAOK,uBAAuBJ,GAChD,YAAqBK,IAAdF,EAA0BL,EAAS,GAAEK,KAAaF,EAAKK,KAAK,OAG9DC,eAAeC,EAAqBC,GAIzC,MAHiB,QAAbA,GACFC,EAAAA,GAAwB,iDAEnB,2JAYT,SAASC,EAAT,GAAmF,IAA/D,MAACC,EAAD,SAAQjC,GAAuD,EACjF,MAAOkC,EAAYC,GAAiBjC,EAAAA,SAAqC,MAEzEA,EAAAA,WAAgB,KACd,IAAIkC,GAAa,EAgBjB,OAdAC,EAAAA,EACwB,OACrBC,MAAKlB,IAEAgB,GAIJD,EAAcf,MAEfmB,OAAM,KACLR,EAAAA,GAAwB,4CAGrB,KACLK,GAAa,KAEd,IAEH,MAAMI,EAAatC,EAAAA,SACjB,IAAMgB,EAAiBe,EAAOC,IAC9B,CAACD,EAAOC,IAGV,OAAOM,GACL,gBAAM,eAAa,qBAAnB,SACGxC,EAAWA,EAASwC,GAAcA,IAEnC,O,gTCnEN,SAASC,EAASC,GAChB,MAAM,UAACC,EAAD,MAAYC,GAASF,EAE3B,OACE,QAACG,EAAD,CAAMF,UAAWA,EAAjB,UACGG,EAAAA,EAAAA,GAAe,CAACb,OAAOc,EAAAA,EAAAA,GAAiBH,GAAQI,MAAO,YALrDP,EAAAA,YAAAA,WAUT,MAAMI,GAAO,OAAO,OAAP,sBAAH,4DAIV,K,kRCVA,SAASI,EAAT,GAAwF,IAAjE,WAACC,EAAD,aAAanD,EAAb,QAA2BoD,EAA3B,UAAoCC,EAApC,SAA+CpD,GAAkB,EAKtF,OACE,QAAC,IAAD,CAAMF,KAAMC,EAAasD,gBAAzB,SACG,QAAC,QAACpD,GAAF,SAAeD,EAASC,EALnB,mBAAkBF,EAAauD,QAAQF,YAAoBD,iBAAuBD,EAAWvC,MAK7C,SAPnDsC,EAAAA,YAAAA,gBAYT,SAAepD,EAAAA,EAAAA,IAAiB0D,EAAAA,EAAAA,MAAKN,K,wuBCJrC,MAAMO,UAAuBtD,EAAAA,UAC3BuD,sBACE,MAAM,MAACC,EAAD,UAAQN,GAAaO,KAAKjB,MAChC,IAAKgB,EAAME,UACT,OAAO,KAGT,MAAMC,EACqB,mBAAzBH,EAAME,UAAUE,KAA4B,WAAa,aAE3D,OACE,QAAC,IAAD,CACEV,UAAWA,EACXD,QAASO,EAAM/C,GACfuC,WAAYQ,EAAME,UAHpB,SAKGG,IAAG,eACFA,GACE,2BACGF,EADH,MACmB,aAAGG,KAAO,GAAED,eAAZ,mBAA+BL,EAAME,iBAArC,aAA+B,EAAiBK,OADnE,MAEE,QAAC,IAAD,CAAUrB,OAAO,UAAAc,EAAME,iBAAN,eAAiBM,OAAQ,IAF5C,OAIE,QAMZC,SACE,MAAM,UAACxB,EAAD,MAAYe,EAAZ,MAAmBU,EAAnB,QAA0BC,EAA1B,QAAmCC,EAAnC,QAA4CC,GAAWZ,KAAKjB,MAC5D8B,EAAS,GACfd,EAAMe,KAAKC,SAAQC,IACjBH,EAAOG,EAAIC,KAAOD,EAAI1C,SAExB,MAAM4C,EAAQ,kBAAiBT,YAAgBC,YAAkBX,EAAM/C,MAEvE,OACE,cAAmBgC,UAAWA,EAA9B,WACE,wBACE,yBACE,QAAC,IAAD,CAAqBmC,GAAID,EAAzB,UACE,QAAC,IAAD,CAAUE,KAAMrB,EAAMsB,iBAExB,0BAAQtB,EAAMuB,MAAMC,OAAO,EAAG,OAC7BvB,KAAKF,2BAITc,IACC,cAAI5B,UAAU,6BAAd,SACGe,EAAMvD,MACL,0BACE,QAAC,IAAD,CACEA,KAAMuD,EAAMvD,KACZ+D,KAAM,GACNvB,UAAU,SACVwC,UAAU,IAEXzB,EAAMvD,KAAKiF,UAGd,iCAKLd,EAAQ7D,KAAIkE,IACX,wBACE,wBACe,WAAZA,EAAIC,KACH,QAAC,KAAD,CAAY3C,MAAOuC,EAAOG,EAAIC,OAE9BJ,EAAOG,EAAIC,QALRD,EAAIC,SA9BRlB,EAAM/C,KArCf6C,EAAAA,YAAAA,iBAmFN,SAAe3D,EAAAA,EAAAA,GAAiB2D,G,4BC3FhC,MAAM6B,UAAoBC,EAAAA,UACxBnB,SACE,MAAM,OAACoB,EAAD,QAASjB,EAAT,MAAkBF,EAAlB,UAAyBhB,EAAzB,QAAoCiB,GAAWV,KAAKjB,MAEpD6B,IAAYgB,EAAOC,MAAK9B,GAASA,EAAMvD,OAE7C,OACE,iBAAOwC,UAAU,qBAAjB,WACE,2BACE,yBACE,wBAAK8C,EAAAA,EAAAA,GAAE,QACNlB,IAAW,wBAAKkB,EAAAA,EAAAA,GAAE,UAElBnB,EAAQ7D,KAAIkE,IACX,uBAAmBA,EAAIV,MAAdU,EAAIC,aAInB,0BACGW,EAAO9E,KAAIiD,IACV,QAAC,EAAD,CAEEA,MAAOA,EACPU,MAAOA,EACPhB,UAAWA,EACXiB,QAASA,EACTC,QAASA,EACTC,QAASA,GANJb,EAAM/C,YArBnB0E,EAAAA,YAAAA,cAoCN,U,oRCnBA,MAAMK,UAAoBxF,EAAAA,UACxByF,YAAYjD,GACVkD,MAAMlD,IADkB,4BA8BVmD,IACd,MAAMC,EAAoB,IAAInC,KAAKjB,MAAMqD,SAASF,OAClDC,EAAkBD,MAAQA,EAC1B,MAAM,QAACxB,EAAD,MAAUD,GAAST,KAAKjB,MAAMsD,OAEpCC,EAAAA,eAAAA,KAAoB,CAClBC,SAAW,kBAAiB9B,YAAgBC,YAC5CwB,MAAOC,QArCe,yBAyCd,KACVnC,KAAKwC,SAAS,CACZC,SAAS,EACTC,OAAO,IAGT,MAAMR,EAAQ,IACTS,GAAAA,CAAK3C,KAAKjB,MAAMqD,SAASF,MAAO,CAAC,SAAU,gBAC9CU,MAAO,GACPV,MAAOlC,KAAK6C,MAAMX,OAGpBlC,KAAKjB,MAAM+D,IAAIC,QAAS,WAAU/C,KAAKjB,MAAMsD,OAAO3B,kBAAmB,CACrEwB,MAAAA,EACAc,OAAQ,MACRC,QAAS,CAACC,EAAMC,EAAGC,KAAS,MAC1BpD,KAAKwC,SAAS,CACZa,UAAWH,EACXR,OAAO,EACPD,SAAS,EACTa,UAAS,UAAEF,MAAAA,OAAF,EAAEA,EAAMG,kBAAkB,eAA1B,QAAqC,MAGlDb,MAAOc,IACLxD,KAAKwC,SAAS,CACZE,OAAOe,EAAAA,EAAAA,GAAcD,GACrBf,SAAS,UAhEf,MAAMiB,EAAc1D,KAAKjB,MAAMqD,SAASF,MACxClC,KAAK6C,MAAQ,CACXQ,UAAW,GACXZ,SAAS,EACTC,OAAO,EACPY,UAAW,GACXpB,MAAOwB,EAAYxB,OAAS,IAIhCyB,4BACE3D,KAAK4D,YAGPC,iCAAiCC,GAC/B,GAAI9D,KAAKjB,MAAMqD,SAAS2B,SAAWD,EAAU1B,SAAS2B,OAAQ,CAC5D,MAAML,EAAcI,EAAU1B,SAASF,MAEvClC,KAAKwC,SACH,CACEN,MAAOwB,EAAYxB,OAErBlC,KAAK4D,YAgDXI,uBACE,OACE,QAAC,IAAD,WACE,uBAAIlC,EAAAA,EAAAA,GAAE,iDAKZmC,cACE,OACE,QAAC,IAAD,WACE,uBAAInC,EAAAA,EAAAA,GAAE,8CAKZoC,gBACE,MAAM,MAACC,EAAD,OAAQ9B,GAAUrC,KAAKjB,MACvB4B,EAAUwD,EAAMrD,KAAKsD,QAAOpD,GAAmB,SAAZA,EAAIC,OAAmB,GAEhE,OACE,QAAC,EAAD,CACEN,QAASA,EACTiB,OAAQ5B,KAAK6C,MAAMQ,UACnB5C,MAAO4B,EAAO5B,MACdhB,UAAW0E,EAAME,QAAQ1E,KACzBe,QAAS2B,EAAO3B,UAKtB4D,aACE,IAAIC,EAcJ,OAXEA,EADEvE,KAAK6C,MAAMJ,SACN,QAAC,IAAD,IACEzC,KAAK6C,MAAMH,OACb,QAAC,IAAD,CAAc8B,QAASxE,KAAK6C,MAAMH,MAAO+B,QAASzE,KAAK4D,YACrD5D,KAAK6C,MAAMQ,UAAUqB,OAAS,EAChC1E,KAAKkE,gBACHlE,KAAK6C,MAAMX,OAA8B,KAArBlC,KAAK6C,MAAMX,MACjClC,KAAKgE,uBAELhE,KAAKiE,cAGPM,EAGT/D,SACE,OACE,0BACE,eAAKmE,MAAO,CAACC,aAAc,IAA3B,UACE,QAAC,IAAD,CACEC,aAAa,GACbC,aAAahD,EAAAA,EAAAA,GAAE,qCACfI,MAAOlC,KAAK6C,MAAMX,MAClB6C,SAAU/E,KAAKgF,kBAGnB,QAAC,KAAD,CAAOhG,UAAU,aAAjB,UACE,QAAC,IAAD,UAAYgB,KAAKsE,kBAEnB,QAAC,IAAD,CAAYhB,UAAWtD,KAAK6C,MAAMS,gBAzIpCvB,EAAAA,YAAAA,cAiJN,SAAekD,EAAAA,EAAAA,GAAQlD","sources":["webpack:///./app/components/acl/role.tsx","webpack:///./app/components/deviceName.tsx","webpack:///./app/components/fileSize.tsx","webpack:///./app/utils/attachmentUrl.tsx","webpack:///./app/components/eventsTable/eventsTableRow.tsx","webpack:///./app/components/eventsTable/eventsTable.tsx","webpack:///./app/views/organizationGroupDetails/groupEvents.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport ConfigStore from 'sentry/stores/configStore';\nimport {Organization, User} from 'sentry/types';\nimport {isActiveSuperuser} from 'sentry/utils/isActiveSuperuser';\nimport {isRenderFunc} from 'sentry/utils/isRenderFunc';\nimport withOrganization from 'sentry/utils/withOrganization';\n\ntype RoleRenderProps = {\n  hasRole: boolean;\n};\n\ntype ChildrenRenderFn = (props: RoleRenderProps) => React.ReactElement | null;\n\nfunction checkUserRole(user: User, organization: Organization, role: RoleProps['role']) {\n  if (!user) {\n    return false;\n  }\n\n  if (isActiveSuperuser()) {\n    return true;\n  }\n\n  if (!Array.isArray(organization.availableRoles)) {\n    return false;\n  }\n\n  const roleIds = organization.availableRoles.map(r => r.id);\n\n  if (!roleIds.includes(role) || !roleIds.includes(organization.role ?? '')) {\n    return false;\n  }\n\n  const requiredIndex = roleIds.indexOf(role);\n  const currentIndex = roleIds.indexOf(organization.role ?? '');\n  return currentIndex >= requiredIndex;\n}\n\ninterface RoleProps {\n  /**\n   * If children is a function then will be treated as a render prop and\n   * passed RoleRenderProps.\n   *\n   * The other interface is more simple, only show `children` if user has\n   * the minimum required role.\n   */\n  children: React.ReactElement | ChildrenRenderFn;\n  /**\n   * Current Organization\n   */\n  organization: Organization;\n  /**\n   * Minimum required role\n   */\n  role: string;\n}\n\nfunction Role({role, organization, children}: RoleProps): React.ReactElement | null {\n  const hasRole = React.useMemo(\n    () => checkUserRole(ConfigStore.get('user'), organization, role),\n    // It seems that this returns a stable reference, but\n    [organization, role, ConfigStore.get('user')]\n  );\n\n  if (isRenderFunc<ChildrenRenderFn>(children)) {\n    return children({hasRole});\n  }\n\n  return hasRole ? children : null;\n}\n\nconst withOrganizationRole = withOrganization(Role);\n\nexport {withOrganizationRole as Role};\n","import * as React from 'react';\nimport * as Sentry from '@sentry/react';\n\n// Self reference to the module, so that we can mock a failed import in a test.\nimport * as selfModule from 'sentry/components/deviceName';\nimport {IOSDeviceList} from 'sentry/types/iOSDeviceList';\n\nexport function deviceNameMapper(\n  model: string | undefined,\n  module: IOSDeviceList | null\n): string | null {\n  // If we have no model, render nothing\n  if (typeof model !== 'string') {\n    return null;\n  }\n\n  // If module has not loaded yet, render the unparsed model\n  if (module === null) {\n    return model;\n  }\n\n  const [identifier, ...rest] = model.split(' ');\n\n  const modelName = module.generationByIdentifier(identifier);\n  return modelName === undefined ? model : `${modelName} ${rest.join(' ')}`;\n}\n\nexport async function loadDeviceListModule(platform: 'iOS') {\n  if (platform !== 'iOS') {\n    Sentry.captureException('DeviceName component only supports iOS module');\n  }\n  return import('ios-device-list');\n}\n\ninterface DeviceNameProps {\n  value: string;\n  children?: (name: string) => React.ReactNode;\n}\n\n/**\n * This is used to map iOS Device Names to model name.\n * This asynchronously loads the ios-device-list library because of its size\n */\nfunction DeviceName({value, children}: DeviceNameProps): React.ReactElement | null {\n  const [deviceList, setDeviceList] = React.useState<IOSDeviceList | null>(null);\n\n  React.useEffect(() => {\n    let didUnmount = false;\n\n    selfModule\n      .loadDeviceListModule('iOS')\n      .then(module => {\n        // We need to track component unmount so we dont try and setState on an unmounted component\n        if (didUnmount) {\n          return;\n        }\n\n        setDeviceList(module);\n      })\n      .catch(() => {\n        Sentry.captureException('Failed to load ios-device-list module');\n      });\n\n    return () => {\n      didUnmount = true;\n    };\n  }, []);\n\n  const deviceName = React.useMemo(\n    () => deviceNameMapper(value, deviceList),\n    [value, deviceList]\n  );\n\n  return deviceName ? (\n    <span data-test-id=\"loaded-device-name\">\n      {children ? children(deviceName) : deviceName}\n    </span>\n  ) : null;\n}\n\nexport {DeviceName};\n","import styled from '@emotion/styled';\n\nimport {formatBytesBase2} from 'sentry/utils';\nimport getDynamicText from 'sentry/utils/getDynamicText';\n\ntype Props = {\n  bytes: number;\n  className?: string;\n};\n\nfunction FileSize(props: Props) {\n  const {className, bytes} = props;\n\n  return (\n    <Span className={className}>\n      {getDynamicText({value: formatBytesBase2(bytes), fixed: 'xx KB'})}\n    </Span>\n  );\n}\n\nconst Span = styled('span')`\n  font-variant-numeric: tabular-nums;\n`;\n\nexport default FileSize;\n","import {memo} from 'react';\n\nimport {Role} from 'sentry/components/acl/role';\nimport {IssueAttachment, Organization} from 'sentry/types';\nimport withOrganization from 'sentry/utils/withOrganization';\n\ntype Props = {\n  attachment: IssueAttachment;\n  children: (downloadUrl: string | null) => React.ReactElement | null;\n  eventId: string;\n  organization: Organization;\n  projectId: string;\n};\n\nfunction AttachmentUrl({attachment, organization, eventId, projectId, children}: Props) {\n  function getDownloadUrl() {\n    return `/api/0/projects/${organization.slug}/${projectId}/events/${eventId}/attachments/${attachment.id}/`;\n  }\n\n  return (\n    <Role role={organization.attachmentsRole}>\n      {({hasRole}) => children(hasRole ? getDownloadUrl() : null)}\n    </Role>\n  );\n}\n\nexport default withOrganization(memo(AttachmentUrl));\n","import * as React from 'react';\n\nimport UserAvatar from 'sentry/components/avatar/userAvatar';\nimport DateTime from 'sentry/components/dateTime';\nimport {DeviceName} from 'sentry/components/deviceName';\nimport FileSize from 'sentry/components/fileSize';\nimport GlobalSelectionLink from 'sentry/components/globalSelectionLink';\nimport {AvatarUser, Organization, Tag} from 'sentry/types';\nimport {Event} from 'sentry/types/event';\nimport AttachmentUrl from 'sentry/utils/attachmentUrl';\nimport withOrganization from 'sentry/utils/withOrganization';\n\ntype Props = {\n  event: Event;\n  groupId: string;\n  orgId: string;\n  organization: Organization;\n  projectId: string;\n  tagList: Tag[];\n  hasUser?: boolean;\n} & React.HTMLAttributes<HTMLDivElement>;\n\nclass EventsTableRow extends React.Component<Props> {\n  renderCrashFileLink() {\n    const {event, projectId} = this.props;\n    if (!event.crashFile) {\n      return null;\n    }\n\n    const crashFileType =\n      event.crashFile.type === 'event.minidump' ? 'Minidump' : 'Crash file';\n\n    return (\n      <AttachmentUrl\n        projectId={projectId}\n        eventId={event.id}\n        attachment={event.crashFile}\n      >\n        {url =>\n          url ? (\n            <small>\n              {crashFileType}: <a href={`${url}?download=1`}>{event.crashFile?.name}</a> (\n              <FileSize bytes={event.crashFile?.size || 0} />)\n            </small>\n          ) : null\n        }\n      </AttachmentUrl>\n    );\n  }\n\n  render() {\n    const {className, event, orgId, groupId, tagList, hasUser} = this.props;\n    const tagMap = {};\n    event.tags.forEach(tag => {\n      tagMap[tag.key] = tag.value;\n    });\n    const link = `/organizations/${orgId}/issues/${groupId}/events/${event.id}/`;\n\n    return (\n      <tr key={event.id} className={className}>\n        <td>\n          <h5>\n            <GlobalSelectionLink to={link}>\n              <DateTime date={event.dateCreated} />\n            </GlobalSelectionLink>\n            <small>{event.title.substr(0, 100)}</small>\n            {this.renderCrashFileLink()}\n          </h5>\n        </td>\n\n        {hasUser && (\n          <td className=\"event-user table-user-info\">\n            {event.user ? (\n              <div>\n                <UserAvatar\n                  user={event.user as AvatarUser} // TODO(ts): Some of the user fields are optional from event, this cast can probably be removed in the future\n                  size={24}\n                  className=\"avatar\"\n                  gravatar={false}\n                />\n                {event.user.email}\n              </div>\n            ) : (\n              <span>—</span>\n            )}\n          </td>\n        )}\n\n        {tagList.map(tag => (\n          <td key={tag.key}>\n            <div>\n              {tag.key === 'device' ? (\n                <DeviceName value={tagMap[tag.key]} />\n              ) : (\n                tagMap[tag.key]\n              )}\n            </div>\n          </td>\n        ))}\n      </tr>\n    );\n  }\n}\n\nexport {EventsTableRow};\nexport default withOrganization(EventsTableRow);\n","import {Component} from 'react';\n\nimport EventsTableRow from 'sentry/components/eventsTable/eventsTableRow';\nimport {t} from 'sentry/locale';\nimport {Tag} from 'sentry/types';\nimport {Event} from 'sentry/types/event';\n\ntype Props = {\n  events: Event[];\n  groupId: string;\n  orgId: string;\n  projectId: string;\n  tagList: Tag[];\n};\nclass EventsTable extends Component<Props> {\n  render() {\n    const {events, tagList, orgId, projectId, groupId} = this.props;\n\n    const hasUser = !!events.find(event => event.user);\n\n    return (\n      <table className=\"table events-table\">\n        <thead>\n          <tr>\n            <th>{t('ID')}</th>\n            {hasUser && <th>{t('User')}</th>}\n\n            {tagList.map(tag => (\n              <th key={tag.key}>{tag.name}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {events.map(event => (\n            <EventsTableRow\n              key={event.id}\n              event={event}\n              orgId={orgId}\n              projectId={projectId}\n              groupId={groupId}\n              tagList={tagList}\n              hasUser={hasUser}\n            />\n          ))}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nexport default EventsTable;\n","import * as React from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\nimport pick from 'lodash/pick';\n\nimport {Client} from 'sentry/api';\nimport EmptyStateWarning from 'sentry/components/emptyStateWarning';\nimport EventsTable from 'sentry/components/eventsTable/eventsTable';\nimport LoadingError from 'sentry/components/loadingError';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport Pagination from 'sentry/components/pagination';\nimport {Panel, PanelBody} from 'sentry/components/panels';\nimport SearchBar from 'sentry/components/searchBar';\nimport {t} from 'sentry/locale';\nimport {Group} from 'sentry/types';\nimport {Event} from 'sentry/types/event';\nimport parseApiError from 'sentry/utils/parseApiError';\nimport withApi from 'sentry/utils/withApi';\n\ntype Props = {\n  api: Client;\n  group: Group;\n} & RouteComponentProps<{groupId: string; orgId: string}, {}>;\n\ntype State = {\n  error: string | false;\n  eventList: Event[];\n  loading: boolean;\n  pageLinks: string;\n  query: string;\n};\n\nclass GroupEvents extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    const queryParams = this.props.location.query;\n    this.state = {\n      eventList: [],\n      loading: true,\n      error: false,\n      pageLinks: '',\n      query: queryParams.query || '',\n    };\n  }\n\n  UNSAFE_componentWillMount() {\n    this.fetchData();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    if (this.props.location.search !== nextProps.location.search) {\n      const queryParams = nextProps.location.query;\n\n      this.setState(\n        {\n          query: queryParams.query,\n        },\n        this.fetchData\n      );\n    }\n  }\n\n  handleSearch = (query: string) => {\n    const targetQueryParams = {...this.props.location.query};\n    targetQueryParams.query = query;\n    const {groupId, orgId} = this.props.params;\n\n    browserHistory.push({\n      pathname: `/organizations/${orgId}/issues/${groupId}/events/`,\n      query: targetQueryParams,\n    });\n  };\n\n  fetchData = () => {\n    this.setState({\n      loading: true,\n      error: false,\n    });\n\n    const query = {\n      ...pick(this.props.location.query, ['cursor', 'environment']),\n      limit: 50,\n      query: this.state.query,\n    };\n\n    this.props.api.request(`/issues/${this.props.params.groupId}/events/`, {\n      query,\n      method: 'GET',\n      success: (data, _, resp) => {\n        this.setState({\n          eventList: data,\n          error: false,\n          loading: false,\n          pageLinks: resp?.getResponseHeader('Link') ?? '',\n        });\n      },\n      error: err => {\n        this.setState({\n          error: parseApiError(err),\n          loading: false,\n        });\n      },\n    });\n  };\n\n  renderNoQueryResults() {\n    return (\n      <EmptyStateWarning>\n        <p>{t('Sorry, no events match your search query.')}</p>\n      </EmptyStateWarning>\n    );\n  }\n\n  renderEmpty() {\n    return (\n      <EmptyStateWarning>\n        <p>{t(\"There don't seem to be any events yet.\")}</p>\n      </EmptyStateWarning>\n    );\n  }\n\n  renderResults() {\n    const {group, params} = this.props;\n    const tagList = group.tags.filter(tag => tag.key !== 'user') || [];\n\n    return (\n      <EventsTable\n        tagList={tagList}\n        events={this.state.eventList}\n        orgId={params.orgId}\n        projectId={group.project.slug}\n        groupId={params.groupId}\n      />\n    );\n  }\n\n  renderBody() {\n    let body: React.ReactNode;\n\n    if (this.state.loading) {\n      body = <LoadingIndicator />;\n    } else if (this.state.error) {\n      body = <LoadingError message={this.state.error} onRetry={this.fetchData} />;\n    } else if (this.state.eventList.length > 0) {\n      body = this.renderResults();\n    } else if (this.state.query && this.state.query !== '') {\n      body = this.renderNoQueryResults();\n    } else {\n      body = this.renderEmpty();\n    }\n\n    return body;\n  }\n\n  render() {\n    return (\n      <div>\n        <div style={{marginBottom: 20}}>\n          <SearchBar\n            defaultQuery=\"\"\n            placeholder={t('search event id, message, or tags')}\n            query={this.state.query}\n            onSearch={this.handleSearch}\n          />\n        </div>\n        <Panel className=\"event-list\">\n          <PanelBody>{this.renderBody()}</PanelBody>\n        </Panel>\n        <Pagination pageLinks={this.state.pageLinks} />\n      </div>\n    );\n  }\n}\n\nexport {GroupEvents};\n\nexport default withApi(GroupEvents);\n"],"names":["withOrganizationRole","withOrganization","role","organization","children","hasRole","React","user","isActiveSuperuser","Array","isArray","availableRoles","roleIds","map","r","id","includes","requiredIndex","indexOf","checkUserRole","ConfigStore","isRenderFunc","deviceNameMapper","model","module","identifier","rest","split","modelName","generationByIdentifier","undefined","join","async","loadDeviceListModule","platform","Sentry","DeviceName","value","deviceList","setDeviceList","didUnmount","selfModule","then","catch","deviceName","FileSize","props","className","bytes","Span","getDynamicText","formatBytesBase2","fixed","AttachmentUrl","attachment","eventId","projectId","attachmentsRole","slug","memo","EventsTableRow","renderCrashFileLink","event","this","crashFile","crashFileType","type","url","href","name","size","render","orgId","groupId","tagList","hasUser","tagMap","tags","forEach","tag","key","link","to","date","dateCreated","title","substr","gravatar","email","EventsTable","Component","events","find","t","GroupEvents","constructor","super","query","targetQueryParams","location","params","browserHistory","pathname","setState","loading","error","pick","limit","state","api","request","method","success","data","_","resp","eventList","pageLinks","getResponseHeader","err","parseApiError","queryParams","UNSAFE_componentWillMount","fetchData","UNSAFE_componentWillReceiveProps","nextProps","search","renderNoQueryResults","renderEmpty","renderResults","group","filter","project","renderBody","body","message","onRetry","length","style","marginBottom","defaultQuery","placeholder","onSearch","handleSearch","withApi"],"sourceRoot":""}