{"version":3,"file":"chunks/app_views_settings_organizationRepositories_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"8lBAmCA,SAASA,EAAT,GAWU,IAXS,KACjBC,EAAO,SADU,SAEjBC,EAAW,UAFM,KAGjBC,EAHiB,SAIjBC,EAJiB,QAKjBC,EALiB,oBAMjBC,GAAsB,EANL,aAOjBC,GAAe,EAPE,GAQjBC,EARiB,KASjBC,EACA,eAAkBC,GACV,EACR,OACE,QAACC,EAAD,CACE,eAAcD,EACdF,GAAIA,EACJC,KAAMA,EACNJ,QAASA,EACTJ,KAAMA,EACNC,SAAUA,EACVI,oBAAqBA,EACrBC,aAAcA,EARhB,UAUGJ,IAAQ,QAACS,EAAD,UAAcT,KACvB,QAACU,EAAD,UAAgBT,KAChB,QAACU,EAAD,WACE,QAAC,KAAD,CAAaC,UAAU,eA1BtBf,EAAAA,YAAAA,YAgCT,UAEMW,GAAa,QAAO,IAAyD,IAAxD,aAACJ,EAAD,GAAeC,EAAf,KAAmBC,KAASO,GAA4B,EACjF,MAAMC,EAAYC,GAAAA,CAAKF,EAAO,CAAC,sBAAuB,WAAY,SAClE,OAAIP,GACK,QAAC,IAAD,IAAkBQ,EAAWR,KAAMA,EAAMF,aAAcA,KAGzD,QAAC,IAAD,IAAUU,EAAWT,GAAIA,GAAM,OANrB,qBAAH,kCASMW,GAAKA,EAAEC,MAAMC,MAAMF,EAAEjB,UAAUoB,iBATrC,WAULH,GAAKA,EAAEC,MAAMG,WAVR,uBAWOJ,GAAKA,EAAEC,MAAMC,MAAMF,EAAEjB,UAAUsB,QAXtC,aAYHL,GAAiB,UAAXA,EAAElB,KAAoB,IAAEwB,EAAAA,EAAAA,GAAM,OAAMA,EAAAA,EAAAA,GAAM,QAASA,EAAAA,EAAAA,GAAM,IAZ5D,mBAaGN,GAAMA,EAAEb,oBAAsB,GAAImB,EAAAA,EAAAA,GAAM,IAb3C,+FAmBEN,GAAKA,EAAEC,MAAMC,MAAMF,EAAEjB,UAAUsB,QAnBjC,kBAuBVZ,GAAc,OAAO,OAAP,qBAAH,wBAELa,EAAAA,EAAAA,GAAM,IAFD,KAESA,EAAAA,EAAAA,GAAM,KAFf,KAEuBA,EAAAA,EAAAA,GAAM,IAF7B,OAKXX,GAAW,OAAOF,EAAP,qBAAH,WACFa,EAAAA,EAAAA,GAAM,IADJ,OAIRZ,GAAgB,OAAO,MAAP,qBAAH,wD,wDCzFnB,QAZA,SACEa,EACAC,GAGQ,IAFRC,IAEQ,yDADRC,EACQ,uCACR,MAAMC,EAAY,GAAEJ,OAAeC,IAC7BI,EAAOF,EAAe,GAAEC,OAAcD,IAAgBC,EAE5D,OAAOF,EAAc,GAAEG,aAAkBA,I,i5BCY3C,MAAMC,EAA2B,IAAwD,IAAvD,SAACC,EAAD,mBAAWC,EAAX,IAA+BC,EAA/B,OAAoCC,GAAmB,EACvF,MAAM,MAACC,GAASD,EACVE,EAAcL,GAAYA,EAASM,OAAS,EAElD,OACE,0BACE,QAAC,IAAD,CAAoBC,OAAOC,EAAAA,EAAAA,GAAE,mBAC7B,QAAC,IAAD,CAAWjC,GAAK,aAAY6B,kBAA5B,UACGI,EAAAA,EAAAA,GACC,sHAGFH,IACA,eAAKI,UAAU,QAAf,UACE,QAAC,IAAD,YACGD,EAAAA,EAAAA,GACC,+PAFJ,KAOGE,EAAAA,EAAAA,IAAI,iDAAkD,CACrDC,MAAM,QAAC,IAAD,CAAcnC,KAAK,kDAMhC6B,GACC,QAAC,KAAD,YACE,QAAC,KAAD,WAAcG,EAAAA,EAAAA,GAAE,yBAChB,QAAC,IAAD,WACE,wBACGR,EAASY,KAAIC,IACZ,QAAC,IAAD,CAEEC,WAAYD,EACZX,IAAKA,EACLa,cAAY,EACZX,MAAOA,EACPH,mBAAoBA,GALfY,EAAKG,cAYpB,QAAC,KAAD,WACE,QAAC,IAAD,CACE9C,MAAM,QAAC,KAAD,CAAYF,KAAK,OACvBuC,OAAOC,EAAAA,EAAAA,GAAE,qCACTS,aAAaT,EAAAA,EAAAA,GACX,2HAEFU,QACE,QAAC,KAAD,CAAQ1C,KAAK,yCAAb,UACGgC,EAAAA,EAAAA,GAAE,wBAxDbT,EAAAA,YAAAA,2BAkEN,UCtEe,MAAMoB,UAA0CC,EAAAA,EAAwB,qEAO/DC,IACpB,MAAMrB,EAAWsB,KAAKC,MAAMvB,SAC5BA,MAAAA,GAAAA,EAAUwB,SAAQC,IACZA,EAAKT,KAAOK,EAAKL,KACnBS,EAAKC,OAASL,EAAKK,WAGvBJ,KAAKK,SAAS,CAAC3B,SAAAA,OAbjB4B,eACE,MAAM,MAACxB,GAASkB,KAAKvC,MAAMoB,OAC3B,MAAO,CAAC,CAAC,WAAa,kBAAiBC,WAAgB,CAACyB,MAAO,CAACH,OAAQ,OAc1EI,WACE,MAAM,MAAC1B,GAASkB,KAAKvC,MAAMoB,OAC3B,OAAO4B,EAAAA,EAAAA,IAAcvB,EAAAA,EAAAA,GAAE,gBAAiBJ,GAAO,GAGjD4B,aACE,MAAM,SAAChC,EAAD,kBAAWiC,GAAqBX,KAAKC,MAE3C,OACE,QAAC,EAAAW,SAAD,YACE,QAAC,EAAD,IACMZ,KAAKvC,MACTiB,SAAUA,EACVE,IAAKoB,KAAKpB,IACVD,mBAAoBqB,KAAKrB,qBAE1BgC,IACC,QAAC,IAAD,CAAYE,UAAWF,KAAuBX,KAAKvC","sources":["webpack:///./app/components/alertLink.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/settings/organizationRepositories/organizationRepositories.tsx","webpack:///./app/views/settings/organizationRepositories/index.tsx"],"sourcesContent":["import * as React from 'react';\nimport styled from '@emotion/styled';\nimport omit from 'lodash/omit';\n\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport Link from 'sentry/components/links/link';\nimport {IconChevron} from 'sentry/icons';\nimport space from 'sentry/styles/space';\n\ntype Size = 'small' | 'normal';\ntype Priority = 'info' | 'warning' | 'success' | 'error' | 'muted';\n\ntype LinkProps = React.ComponentPropsWithoutRef<typeof Link>;\n\ntype OtherProps = {\n  children?: React.ReactNode;\n  ['data-test-id']?: string;\n  icon?: string | React.ReactNode;\n  onClick?: (e: React.MouseEvent) => void;\n};\n\ntype DefaultProps = {\n  openInNewTab: boolean;\n  priority: Priority;\n  size: Size;\n  withoutMarginBottom: boolean;\n  href?: string;\n};\n\ntype Props = OtherProps & Partial<DefaultProps> & Partial<Pick<LinkProps, 'to'>>;\n\ntype StyledLinkProps = DefaultProps &\n  Partial<Pick<LinkProps, 'to'>> &\n  Omit<LinkProps, 'to' | 'size'>;\n\nfunction AlertLink({\n  size = 'normal',\n  priority = 'warning',\n  icon,\n  children,\n  onClick,\n  withoutMarginBottom = false,\n  openInNewTab = false,\n  to,\n  href,\n  ['data-test-id']: dataTestId,\n}: Props) {\n  return (\n    <StyledLink\n      data-test-id={dataTestId}\n      to={to}\n      href={href}\n      onClick={onClick}\n      size={size}\n      priority={priority}\n      withoutMarginBottom={withoutMarginBottom}\n      openInNewTab={openInNewTab}\n    >\n      {icon && <IconWrapper>{icon}</IconWrapper>}\n      <AlertLinkText>{children}</AlertLinkText>\n      <IconLink>\n        <IconChevron direction=\"right\" />\n      </IconLink>\n    </StyledLink>\n  );\n}\n\nexport default AlertLink;\n\nconst StyledLink = styled(({openInNewTab, to, href, ...props}: StyledLinkProps) => {\n  const linkProps = omit(props, ['withoutMarginBottom', 'priority', 'size']);\n  if (href) {\n    return <ExternalLink {...linkProps} href={href} openInNewTab={openInNewTab} />;\n  }\n\n  return <Link {...linkProps} to={to || ''} />;\n})`\n  display: flex;\n  background-color: ${p => p.theme.alert[p.priority].backgroundLight};\n  color: ${p => p.theme.textColor};\n  border: 1px dashed ${p => p.theme.alert[p.priority].border};\n  padding: ${p => (p.size === 'small' ? `${space(1)} ${space(1.5)}` : space(2))};\n  margin-bottom: ${p => (p.withoutMarginBottom ? 0 : space(3))};\n  border-radius: 0.25em;\n  transition: 0.2s border-color;\n\n  &.focus-visible {\n    outline: none;\n    box-shadow: ${p => p.theme.alert[p.priority].border}7f 0 0 0 2px;\n  }\n`;\n\nconst IconWrapper = styled('span')`\n  display: flex;\n  margin: ${space(0.5)} ${space(1.5)} ${space(0.5)} 0;\n`;\n\nconst IconLink = styled(IconWrapper)`\n  margin: ${space(0.5)} 0;\n`;\n\nconst AlertLinkText = styled('div')`\n  line-height: 1.5;\n  flex-grow: 1;\n`;\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import {RouteComponentProps} from 'react-router';\n\nimport {Client} from 'sentry/api';\nimport AlertLink from 'sentry/components/alertLink';\nimport Button from 'sentry/components/button';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport RepositoryRow from 'sentry/components/repositoryRow';\nimport {IconCommit} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport {Repository, RepositoryStatus} from 'sentry/types';\nimport EmptyMessage from 'sentry/views/settings/components/emptyMessage';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\n\ntype Props = RouteComponentProps<{orgId: string}, {}> & {\n  api: Client;\n  itemList: Repository[];\n  onRepositoryChange: (data: {id: string; status: RepositoryStatus}) => void;\n};\n\nconst OrganizationRepositories = ({itemList, onRepositoryChange, api, params}: Props) => {\n  const {orgId} = params;\n  const hasItemList = itemList && itemList.length > 0;\n\n  return (\n    <div>\n      <SettingsPageHeader title={t('Repositories')} />\n      <AlertLink to={`/settings/${orgId}/integrations/`}>\n        {t(\n          'Want to add a repository to start tracking commits? Install or configure your version control integration here.'\n        )}\n      </AlertLink>\n      {!hasItemList && (\n        <div className=\"m-b-2\">\n          <TextBlock>\n            {t(\n              'Connecting a repository allows Sentry to capture commit data via webhooks. ' +\n                'This enables features like suggested assignees and resolving issues via commit message. ' +\n                \"Once you've connected a repository, you can associate commits with releases via the API.\"\n            )}\n            &nbsp;\n            {tct('See our [link:documentation] for more details.', {\n              link: <ExternalLink href=\"https://docs.sentry.io/learn/releases/\" />,\n            })}\n          </TextBlock>\n        </div>\n      )}\n\n      {hasItemList ? (\n        <Panel>\n          <PanelHeader>{t('Added Repositories')}</PanelHeader>\n          <PanelBody>\n            <div>\n              {itemList.map(repo => (\n                <RepositoryRow\n                  key={repo.id}\n                  repository={repo}\n                  api={api}\n                  showProvider\n                  orgId={orgId}\n                  onRepositoryChange={onRepositoryChange}\n                />\n              ))}\n            </div>\n          </PanelBody>\n        </Panel>\n      ) : (\n        <Panel>\n          <EmptyMessage\n            icon={<IconCommit size=\"xl\" />}\n            title={t('Sentry is better with commit data')}\n            description={t(\n              'Adding one or more repositories will enable enhanced releases and the ability to resolve Sentry Issues via git message.'\n            )}\n            action={\n              <Button href=\"https://docs.sentry.io/learn/releases/\">\n                {t('Learn more')}\n              </Button>\n            }\n          />\n        </Panel>\n      )}\n    </div>\n  );\n};\n\nexport default OrganizationRepositories;\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport Pagination from 'sentry/components/pagination';\nimport {t} from 'sentry/locale';\nimport {Repository} from 'sentry/types';\nimport routeTitleGen from 'sentry/utils/routeTitle';\nimport AsyncView from 'sentry/views/asyncView';\n\nimport OrganizationRepositories from './organizationRepositories';\n\ntype Props = RouteComponentProps<{orgId: string}, {}> & AsyncView['props'];\n\ntype State = AsyncView['state'] & {\n  itemList: Repository[] | null;\n};\n\nexport default class OrganizationRepositoriesContainer extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {orgId} = this.props.params;\n    return [['itemList', `/organizations/${orgId}/repos/`, {query: {status: ''}}]];\n  }\n\n  // Callback used by child component to signal state change\n  onRepositoryChange = (data: Pick<Repository, 'id' | 'status'>) => {\n    const itemList = this.state.itemList;\n    itemList?.forEach(item => {\n      if (item.id === data.id) {\n        item.status = data.status;\n      }\n    });\n    this.setState({itemList});\n  };\n\n  getTitle() {\n    const {orgId} = this.props.params;\n    return routeTitleGen(t('Repositories'), orgId, false);\n  }\n\n  renderBody() {\n    const {itemList, itemListPageLinks} = this.state;\n\n    return (\n      <Fragment>\n        <OrganizationRepositories\n          {...this.props}\n          itemList={itemList!}\n          api={this.api}\n          onRepositoryChange={this.onRepositoryChange}\n        />\n        {itemListPageLinks && (\n          <Pagination pageLinks={itemListPageLinks} {...this.props} />\n        )}\n      </Fragment>\n    );\n  }\n}\n"],"names":["AlertLink","size","priority","icon","children","onClick","withoutMarginBottom","openInNewTab","to","href","dataTestId","StyledLink","IconWrapper","AlertLinkText","IconLink","direction","props","linkProps","omit","p","theme","alert","backgroundLight","textColor","border","space","routeName","orgSlug","withSentry","projectSlug","tmplBase","tmpl","OrganizationRepositories","itemList","onRepositoryChange","api","params","orgId","hasItemList","length","title","t","className","tct","link","map","repo","repository","showProvider","id","description","action","OrganizationRepositoriesContainer","AsyncView","data","this","state","forEach","item","status","setState","getEndpoints","query","getTitle","routeTitleGen","renderBody","itemListPageLinks","Fragment","pageLinks"],"sourceRoot":""}