{"version":3,"file":"chunks/app_views_alerts_rules_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/alertBadge.tsx","webpack:///./app/views/alerts/rules/row.tsx","webpack:///./app/views/alerts/rules/index.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nimport {\n  IconCheckmark,\n  IconDiamond,\n  IconExclamation,\n  IconFire,\n  IconIssues,\n} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Color} from 'sentry/utils/theme';\nimport {IncidentStatus} from 'sentry/views/alerts/types';\n\ntype Props = {\n  hideText?: boolean;\n  isIssue?: boolean;\n  status?: IncidentStatus;\n};\n\nfunction AlertBadge({status, hideText = false, isIssue}: Props) {\n  let statusText = t('Resolved');\n  let Icon = IconCheckmark;\n  let color: Color = 'green300';\n  if (isIssue) {\n    statusText = t('Issue');\n    Icon = IconIssues;\n    color = 'gray300';\n  } else if (status === IncidentStatus.CRITICAL) {\n    statusText = t('Critical');\n    Icon = IconFire;\n    color = 'red300';\n  } else if (status === IncidentStatus.WARNING) {\n    statusText = t('Warning');\n    Icon = IconExclamation;\n    color = 'yellow300';\n  }\n\n  return (\n    <Wrapper data-test-id=\"alert-badge\">\n      <AlertIconWrapper color={color} icon={Icon}>\n        <AlertIconBackground color={color} />\n        <Icon color=\"white\" />\n      </AlertIconWrapper>\n\n      {!hideText && <IncidentStatusValue color={color}>{statusText}</IncidentStatusValue>}\n    </Wrapper>\n  );\n}\n\nexport default AlertBadge;\n\nconst Wrapper = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst AlertIconWrapper = styled('div')<{color: Color; icon: React.ReactNode}>`\n  width: 36px;\n  height: 36px;\n  position: relative;\n\n  svg:last-child {\n    width: ${p => (p.icon === IconIssues ? '13px' : '16px')};\n    z-index: 2;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    margin: auto;\n  }\n`;\n\nconst AlertIconBackground = styled(IconDiamond)<{color: Color}>`\n  width: 36px;\n  height: 36px;\n`;\n\nconst IncidentStatusValue = styled('div')`\n  margin-left: ${space(1)};\n`;\n","import * as React from 'react';\nimport styled from '@emotion/styled';\nimport memoize from 'lodash/memoize';\n\nimport Access from 'sentry/components/acl/access';\nimport AlertBadge from 'sentry/components/alertBadge';\nimport ActorAvatar from 'sentry/components/avatar/actorAvatar';\nimport {openConfirmModal} from 'sentry/components/confirm';\nimport DateTime from 'sentry/components/dateTime';\nimport DropdownMenuControlV2 from 'sentry/components/dropdownMenuControlV2';\nimport {MenuItemProps} from 'sentry/components/dropdownMenuItemV2';\nimport ErrorBoundary from 'sentry/components/errorBoundary';\nimport IdBadge from 'sentry/components/idBadge';\nimport Link from 'sentry/components/links/link';\nimport TimeSince from 'sentry/components/timeSince';\nimport Tooltip from 'sentry/components/tooltip';\nimport {IconArrow, IconEllipsis} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport overflowEllipsis from 'sentry/styles/overflowEllipsis';\nimport space from 'sentry/styles/space';\nimport {Actor, Organization, Project} from 'sentry/types';\nimport getDynamicText from 'sentry/utils/getDynamicText';\nimport type {Color} from 'sentry/utils/theme';\nimport {\n  AlertRuleThresholdType,\n  AlertRuleTriggerType,\n} from 'sentry/views/alerts/incidentRules/types';\n\nimport {CombinedMetricIssueAlerts, IncidentStatus} from '../types';\nimport {isIssueAlert} from '../utils';\n\ntype Props = {\n  onDelete: (projectId: string, rule: CombinedMetricIssueAlerts) => void;\n  orgId: string;\n  organization: Organization;\n  projects: Project[];\n  projectsLoaded: boolean;\n  rule: CombinedMetricIssueAlerts;\n  // Set of team ids that the user belongs to\n  userTeams: Set<string>;\n};\n\n/**\n * Memoized function to find a project from a list of projects\n */\nconst getProject = memoize((slug: string, projects: Project[]) =>\n  projects.find(project => project.slug === slug)\n);\n\nfunction RuleListRow({\n  rule,\n  organization,\n  projectsLoaded,\n  projects,\n  orgId,\n  onDelete,\n  userTeams,\n}: Props) {\n  const activeIncident =\n    rule.latestIncident?.status !== undefined &&\n    [IncidentStatus.CRITICAL, IncidentStatus.WARNING].includes(\n      rule.latestIncident.status\n    );\n\n  function renderLastIncidentDate(): React.ReactNode {\n    if (isIssueAlert(rule)) {\n      return null;\n    }\n\n    if (!rule.latestIncident) {\n      return '-';\n    }\n\n    if (activeIncident) {\n      return (\n        <div>\n          {t('Triggered ')}\n          <TimeSince date={rule.latestIncident.dateCreated} />\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        {t('Resolved ')}\n        <TimeSince date={rule.latestIncident.dateClosed!} />\n      </div>\n    );\n  }\n\n  function renderAlertRuleStatus(): React.ReactNode {\n    if (isIssueAlert(rule)) {\n      return null;\n    }\n\n    const criticalTrigger = rule.triggers.find(\n      ({label}) => label === AlertRuleTriggerType.CRITICAL\n    );\n    const warningTrigger = rule.triggers.find(\n      ({label}) => label === AlertRuleTriggerType.WARNING\n    );\n    const resolvedTrigger = rule.resolveThreshold;\n    const trigger =\n      activeIncident && rule.latestIncident?.status === IncidentStatus.CRITICAL\n        ? criticalTrigger\n        : warningTrigger ?? criticalTrigger;\n\n    let iconColor: Color = 'green300';\n    let iconDirection: 'up' | 'down' | undefined;\n    let thresholdTypeText =\n      activeIncident && rule.thresholdType === AlertRuleThresholdType.ABOVE\n        ? t('Above')\n        : t('Below');\n\n    if (activeIncident) {\n      iconColor =\n        trigger?.label === AlertRuleTriggerType.CRITICAL\n          ? 'red300'\n          : trigger?.label === AlertRuleTriggerType.WARNING\n          ? 'yellow300'\n          : 'green300';\n      iconDirection = rule.thresholdType === AlertRuleThresholdType.ABOVE ? 'up' : 'down';\n    } else {\n      // Use the Resolved threshold type, which is opposite of Critical\n      iconDirection = rule.thresholdType === AlertRuleThresholdType.ABOVE ? 'down' : 'up';\n      thresholdTypeText =\n        rule.thresholdType === AlertRuleThresholdType.ABOVE ? t('Below') : t('Above');\n    }\n\n    return (\n      <FlexCenter>\n        <IconArrow color={iconColor} direction={iconDirection} />\n        <TriggerText>\n          {`${thresholdTypeText} ${\n            rule.latestIncident || (!rule.latestIncident && !resolvedTrigger)\n              ? trigger?.alertThreshold?.toLocaleString()\n              : resolvedTrigger?.toLocaleString()\n          }`}\n        </TriggerText>\n      </FlexCenter>\n    );\n  }\n\n  const slug = rule.projects[0];\n  const editLink = `/organizations/${orgId}/alerts/${\n    isIssueAlert(rule) ? 'rules' : 'metric-rules'\n  }/${slug}/${rule.id}/`;\n\n  const detailsLink = `/organizations/${orgId}/alerts/rules/details/${rule.id}/`;\n\n  const ownerId = rule.owner?.split(':')[1];\n  const teamActor = ownerId\n    ? {type: 'team' as Actor['type'], id: ownerId, name: ''}\n    : null;\n\n  const canEdit = ownerId ? userTeams.has(ownerId) : true;\n  const hasAlertRuleStatusPage = organization.features.includes('alert-rule-status-page');\n  // TODO(workflow): Refactor when removing alert-rule-status-page flag\n  const alertLink = isIssueAlert(rule) ? (\n    hasAlertRuleStatusPage ? (\n      <Link\n        to={`/organizations/${orgId}/alerts/rules/${rule.projects[0]}/${rule.id}/details/`}\n      >\n        {rule.name}\n      </Link>\n    ) : (\n      rule.name\n    )\n  ) : (\n    <TitleLink to={isIssueAlert(rule) ? editLink : detailsLink}>{rule.name}</TitleLink>\n  );\n\n  const IssueStatusText: Record<IncidentStatus, string> = {\n    [IncidentStatus.CRITICAL]: t('Critical'),\n    [IncidentStatus.WARNING]: t('Warning'),\n    [IncidentStatus.CLOSED]: t('Resolved'),\n    [IncidentStatus.OPENED]: t('Resolved'),\n  };\n\n  const actions: MenuItemProps[] = [\n    {\n      key: 'edit',\n      label: t('Edit'),\n      to: editLink,\n    },\n    {\n      key: 'delete',\n      label: t('Delete'),\n      priority: 'danger',\n      onAction: () => {\n        openConfirmModal({\n          onConfirm: () => onDelete(slug, rule),\n          header: t('Delete Alert Rule?'),\n          message: tct(\n            \"Are you sure you want to delete [name]? You won't be able to view the history of this alert once it's deleted.\",\n            {name: rule.name}\n          ),\n          confirmText: t('Delete Rule'),\n          priority: 'danger',\n        });\n      },\n    },\n  ];\n\n  return (\n    <ErrorBoundary>\n      <AlertNameWrapper isIssueAlert={isIssueAlert(rule)}>\n        <FlexCenter>\n          <Tooltip\n            title={\n              isIssueAlert(rule)\n                ? t('Issue Alert')\n                : tct('Metric Alert Status: [status]', {\n                    status:\n                      IssueStatusText[\n                        rule?.latestIncident?.status ?? IncidentStatus.CLOSED\n                      ],\n                  })\n            }\n          >\n            <AlertBadge\n              status={rule?.latestIncident?.status}\n              isIssue={isIssueAlert(rule)}\n              hideText\n            />\n          </Tooltip>\n        </FlexCenter>\n        <AlertNameAndStatus>\n          <AlertName>{alertLink}</AlertName>\n          <AlertIncidentDate>\n            {!isIssueAlert(rule) && renderLastIncidentDate()}\n          </AlertIncidentDate>\n        </AlertNameAndStatus>\n      </AlertNameWrapper>\n      <FlexCenter>{renderAlertRuleStatus()}</FlexCenter>\n\n      <FlexCenter>\n        <ProjectBadgeContainer>\n          <ProjectBadge\n            avatarSize={18}\n            project={!projectsLoaded ? {slug} : getProject(slug, projects)}\n          />\n        </ProjectBadgeContainer>\n      </FlexCenter>\n\n      <FlexCenter>\n        {teamActor ? <ActorAvatar actor={teamActor} size={24} /> : '-'}\n      </FlexCenter>\n\n      <FlexCenter>\n        <StyledDateTime\n          date={getDynamicText({\n            value: rule.dateCreated,\n            fixed: new Date('2021-04-20'),\n          })}\n          format=\"ll\"\n        />\n      </FlexCenter>\n      <ActionsRow>\n        <Access access={['alerts:write']}>\n          {({hasAccess}) => (\n            <DropdownMenuControlV2\n              items={actions}\n              placement=\"bottom right\"\n              triggerProps={{\n                'aria-label': t('Show more'),\n                size: 'xsmall',\n                icon: <IconEllipsis size=\"xs\" />,\n                showChevron: false,\n              }}\n              disabledKeys={hasAccess && canEdit ? [] : ['delete']}\n            />\n          )}\n        </Access>\n      </ActionsRow>\n    </ErrorBoundary>\n  );\n}\n\nconst TitleLink = styled(Link)`\n  ${overflowEllipsis}\n`;\n\nconst FlexCenter = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst AlertNameWrapper = styled(FlexCenter)<{isIssueAlert?: boolean}>`\n  position: relative;\n  ${p => p.isIssueAlert && `padding: ${space(3)} ${space(2)}; line-height: 2.4;`}\n`;\n\nconst AlertNameAndStatus = styled('div')`\n  ${overflowEllipsis}\n  margin-left: ${space(2)};\n  line-height: 1.35;\n`;\n\nconst AlertName = styled('div')`\n  ${overflowEllipsis}\n  font-size: ${p => p.theme.fontSizeLarge};\n\n  @media (max-width: ${p => p.theme.breakpoints[3]}) {\n    max-width: 300px;\n  }\n  @media (max-width: ${p => p.theme.breakpoints[2]}) {\n    max-width: 165px;\n  }\n  @media (max-width: ${p => p.theme.breakpoints[1]}) {\n    max-width: 100px;\n  }\n`;\n\nconst AlertIncidentDate = styled('div')`\n  color: ${p => p.theme.gray300};\n`;\n\nconst ProjectBadgeContainer = styled('div')`\n  width: 100%;\n`;\n\nconst ProjectBadge = styled(IdBadge)`\n  flex-shrink: 0;\n`;\n\nconst StyledDateTime = styled(DateTime)`\n  font-variant-numeric: tabular-nums;\n  color: ${p => p.theme.gray300};\n`;\n\nconst TriggerText = styled('div')`\n  margin-left: ${space(1)};\n  white-space: nowrap;\n  font-variant-numeric: tabular-nums;\n`;\n\nconst ActionsRow = styled(FlexCenter)`\n  justify-content: center;\n  padding: ${space(1)};\n`;\n\nexport default RuleListRow;\n","import {Component} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport flatten from 'lodash/flatten';\n\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport Link from 'sentry/components/links/link';\nimport PageFiltersContainer from 'sentry/components/organizations/pageFilters/container';\nimport Pagination from 'sentry/components/pagination';\nimport {PanelTable} from 'sentry/components/panels';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {IconArrow} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport {Organization, PageFilters, Project} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport Projects from 'sentry/utils/projects';\nimport Teams from 'sentry/utils/teams';\nimport withPageFilters from 'sentry/utils/withPageFilters';\n\nimport FilterBar from '../filterBar';\nimport AlertHeader from '../list/header';\nimport {CombinedMetricIssueAlerts} from '../types';\nimport {getTeamParams, isIssueAlert} from '../utils';\n\nimport RuleListRow from './row';\n\nconst DOCS_URL = 'https://docs.sentry.io/product/alerts-notifications/metric-alerts/';\n\ntype Props = RouteComponentProps<{orgId: string}, {}> & {\n  organization: Organization;\n  selection: PageFilters;\n};\n\ntype State = {\n  ruleList?: CombinedMetricIssueAlerts[];\n  teamFilterSearch?: string;\n};\n\nclass AlertRulesList extends AsyncComponent<Props, State & AsyncComponent['state']> {\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {params, location} = this.props;\n    const {query} = location;\n\n    query.expand = ['latestIncident'];\n    query.team = getTeamParams(query.team);\n\n    if (!query.sort) {\n      query.sort = ['incident_status', 'date_triggered'];\n    }\n\n    return [\n      [\n        'ruleList',\n        `/organizations/${params && params.orgId}/combined-rules/`,\n        {\n          query,\n        },\n      ],\n    ];\n  }\n\n  handleChangeFilter = (_sectionId: string, activeFilters: Set<string>) => {\n    const {router, location} = this.props;\n    const {cursor: _cursor, page: _page, ...currentQuery} = location.query;\n    const teams = [...activeFilters];\n    router.push({\n      pathname: location.pathname,\n      query: {\n        ...currentQuery,\n        team: teams.length ? teams : '',\n      },\n    });\n  };\n\n  handleChangeSearch = (name: string) => {\n    const {router, location} = this.props;\n    const {cursor: _cursor, page: _page, ...currentQuery} = location.query;\n    router.push({\n      pathname: location.pathname,\n      query: {\n        ...currentQuery,\n        name,\n      },\n    });\n  };\n\n  handleDeleteRule = async (projectId: string, rule: CombinedMetricIssueAlerts) => {\n    const {params} = this.props;\n    const {orgId} = params;\n    const alertPath = isIssueAlert(rule) ? 'rules' : 'alert-rules';\n\n    try {\n      await this.api.requestPromise(\n        `/projects/${orgId}/${projectId}/${alertPath}/${rule.id}/`,\n        {\n          method: 'DELETE',\n        }\n      );\n      this.reloadData();\n    } catch (_err) {\n      addErrorMessage(t('Error deleting rule'));\n    }\n  };\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderList() {\n    const {\n      params: {orgId},\n      location,\n      organization,\n      router,\n    } = this.props;\n    const {loading, ruleList = [], ruleListPageLinks} = this.state;\n    const {query} = location;\n\n    const allProjectsFromIncidents = new Set(\n      flatten(ruleList?.map(({projects}) => projects))\n    );\n\n    const sort: {\n      asc: boolean;\n      field: 'date_added' | 'name' | ['incident_status', 'date_triggered'];\n    } = {\n      asc: query.asc === '1',\n      field: query.sort || 'date_added',\n    };\n    const {cursor: _cursor, page: _page, ...currentQuery} = query;\n    const isAlertRuleSort =\n      sort.field.includes('incident_status') || sort.field.includes('date_triggered');\n    const sortArrow = (\n      <IconArrow color=\"gray300\" size=\"xs\" direction={sort.asc ? 'up' : 'down'} />\n    );\n\n    return (\n      <StyledLayoutBody>\n        <Layout.Main fullWidth>\n          <FilterBar\n            organization={organization}\n            location={location}\n            onChangeFilter={this.handleChangeFilter}\n            onChangeSearch={this.handleChangeSearch}\n          />\n          <Teams provideUserTeams>\n            {({initiallyLoaded: loadedTeams, teams}) => (\n              <StyledPanelTable\n                headers={[\n                  <StyledSortLink\n                    key=\"name\"\n                    role=\"columnheader\"\n                    aria-sort={\n                      sort.field !== 'name'\n                        ? 'none'\n                        : sort.asc\n                        ? 'ascending'\n                        : 'descending'\n                    }\n                    to={{\n                      pathname: location.pathname,\n                      query: {\n                        ...currentQuery,\n                        // sort by name should start by ascending on first click\n                        asc: sort.field === 'name' && sort.asc ? undefined : '1',\n                        sort: 'name',\n                      },\n                    }}\n                  >\n                    {t('Alert Rule')} {sort.field === 'name' && sortArrow}\n                  </StyledSortLink>,\n\n                  <StyledSortLink\n                    key=\"status\"\n                    role=\"columnheader\"\n                    aria-sort={\n                      !isAlertRuleSort ? 'none' : sort.asc ? 'ascending' : 'descending'\n                    }\n                    to={{\n                      pathname: location.pathname,\n                      query: {\n                        ...currentQuery,\n                        asc: isAlertRuleSort && !sort.asc ? '1' : undefined,\n                        sort: ['incident_status', 'date_triggered'],\n                      },\n                    }}\n                  >\n                    {t('Status')} {isAlertRuleSort && sortArrow}\n                  </StyledSortLink>,\n\n                  t('Project'),\n                  t('Team'),\n                  <StyledSortLink\n                    key=\"dateAdded\"\n                    role=\"columnheader\"\n                    aria-sort={\n                      sort.field !== 'date_added'\n                        ? 'none'\n                        : sort.asc\n                        ? 'ascending'\n                        : 'descending'\n                    }\n                    to={{\n                      pathname: location.pathname,\n                      query: {\n                        ...currentQuery,\n                        asc: sort.field === 'date_added' && !sort.asc ? '1' : undefined,\n                        sort: 'date_added',\n                      },\n                    }}\n                  >\n                    {t('Created')} {sort.field === 'date_added' && sortArrow}\n                  </StyledSortLink>,\n                  t('Actions'),\n                ]}\n                isLoading={loading || !loadedTeams}\n                isEmpty={ruleList?.length === 0}\n                emptyMessage={t('No alert rules found for the current query.')}\n                emptyAction={\n                  <EmptyStateAction>\n                    {tct('Learn more about [link:Alerts]', {\n                      link: <ExternalLink href={DOCS_URL} />,\n                    })}\n                  </EmptyStateAction>\n                }\n              >\n                <Projects orgId={orgId} slugs={Array.from(allProjectsFromIncidents)}>\n                  {({initiallyLoaded, projects}) =>\n                    ruleList.map(rule => (\n                      <RuleListRow\n                        // Metric and issue alerts can have the same id\n                        key={`${isIssueAlert(rule) ? 'metric' : 'issue'}-${rule.id}`}\n                        projectsLoaded={initiallyLoaded}\n                        projects={projects as Project[]}\n                        rule={rule}\n                        orgId={orgId}\n                        onDelete={this.handleDeleteRule}\n                        organization={organization}\n                        userTeams={new Set(teams.map(team => team.id))}\n                      />\n                    ))\n                  }\n                </Projects>\n              </StyledPanelTable>\n            )}\n          </Teams>\n          <Pagination\n            pageLinks={ruleListPageLinks}\n            onCursor={(cursor, path, _direction) => {\n              let team = currentQuery.team;\n              // Keep team parameter, but empty to remove parameters\n              if (!team || team.length === 0) {\n                team = '';\n              }\n\n              router.push({\n                pathname: path,\n                query: {...currentQuery, team, cursor},\n              });\n            }}\n          />\n        </Layout.Main>\n      </StyledLayoutBody>\n    );\n  }\n\n  renderBody() {\n    const {params, organization, router} = this.props;\n    const {orgId} = params;\n\n    return (\n      <SentryDocumentTitle title={t('Alerts')} orgSlug={orgId}>\n        <PageFiltersContainer\n          organization={organization}\n          showDateSelector={false}\n          showEnvironmentSelector={false}\n          hideGlobalHeader={organization.features.includes('selection-filters-v2')}\n        >\n          <AlertHeader organization={organization} router={router} activeTab=\"rules\" />\n          {this.renderList()}\n        </PageFiltersContainer>\n      </SentryDocumentTitle>\n    );\n  }\n}\n\nclass AlertRulesListContainer extends Component<Props> {\n  componentDidMount() {\n    this.trackView();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const {location} = this.props;\n    if (prevProps.location.query?.sort !== location.query?.sort) {\n      this.trackView();\n    }\n  }\n\n  trackView() {\n    const {organization, location} = this.props;\n\n    trackAdvancedAnalyticsEvent('alert_rules.viewed', {\n      organization,\n      sort: Array.isArray(location.query.sort)\n        ? location.query.sort.join(',')\n        : location.query.sort,\n    });\n  }\n\n  render() {\n    return <AlertRulesList {...this.props} />;\n  }\n}\n\nexport default withPageFilters(AlertRulesListContainer);\n\nconst StyledLayoutBody = styled(Layout.Body)`\n  margin-bottom: -20px;\n`;\n\nconst StyledSortLink = styled(Link)`\n  color: inherit;\n\n  :hover {\n    color: inherit;\n  }\n`;\n\nconst StyledPanelTable = styled(PanelTable)`\n  position: static;\n  overflow: auto;\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    overflow: initial;\n  }\n\n  grid-template-columns: 4fr auto 140px 60px 110px auto;\n  white-space: nowrap;\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n\nconst EmptyStateAction = styled('p')`\n  font-size: ${p => p.theme.fontSizeLarge};\n`;\n"],"names":["AlertBadge","status","hideText","isIssue","statusText","t","Icon","IconCheckmark","color","IconIssues","IncidentStatus","IconFire","IconExclamation","Wrapper","AlertIconWrapper","icon","AlertIconBackground","IncidentStatusValue","p","IconDiamond","space","getProject","memoize","slug","projects","find","project","RuleListRow","rule","organization","projectsLoaded","orgId","onDelete","userTeams","activeIncident","undefined","latestIncident","includes","editLink","isIssueAlert","id","detailsLink","ownerId","owner","split","teamActor","type","name","canEdit","has","hasAlertRuleStatusPage","features","alertLink","to","TitleLink","IssueStatusText","actions","key","label","priority","onAction","openConfirmModal","onConfirm","header","message","tct","confirmText","AlertNameWrapper","FlexCenter","title","AlertNameAndStatus","AlertName","AlertIncidentDate","date","dateCreated","dateClosed","criticalTrigger","triggers","AlertRuleTriggerType","warningTrigger","resolvedTrigger","resolveThreshold","trigger","iconDirection","iconColor","thresholdTypeText","thresholdType","AlertRuleThresholdType","direction","TriggerText","alertThreshold","toLocaleString","renderAlertRuleStatus","ProjectBadgeContainer","ProjectBadge","avatarSize","actor","size","StyledDateTime","getDynamicText","value","fixed","Date","format","ActionsRow","access","hasAccess","items","placement","triggerProps","showChevron","disabledKeys","Link","overflowEllipsis","theme","fontSizeLarge","breakpoints","gray300","IdBadge","DateTime","AlertRulesList","AsyncComponent","_sectionId","activeFilters","router","location","this","props","cursor","_cursor","page","_page","currentQuery","query","teams","push","pathname","team","length","async","projectId","params","alertPath","api","requestPromise","method","reloadData","_err","addErrorMessage","getEndpoints","expand","getTeamParams","sort","renderLoading","renderBody","renderList","loading","ruleList","ruleListPageLinks","state","allProjectsFromIncidents","Set","flatten","map","asc","field","isAlertRuleSort","sortArrow","StyledLayoutBody","fullWidth","onChangeFilter","handleChangeFilter","onChangeSearch","handleChangeSearch","provideUserTeams","initiallyLoaded","loadedTeams","StyledPanelTable","headers","StyledSortLink","role","isLoading","isEmpty","emptyMessage","emptyAction","EmptyStateAction","link","href","slugs","Array","from","handleDeleteRule","pageLinks","onCursor","path","_direction","orgSlug","showDateSelector","showEnvironmentSelector","hideGlobalHeader","activeTab","AlertRulesListContainer","Component","componentDidMount","trackView","componentDidUpdate","prevProps","trackAdvancedAnalyticsEvent","isArray","join","render","withPageFilters","Layout","PanelTable","fontSizeMedium"],"sourceRoot":""}