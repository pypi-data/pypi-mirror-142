{"version":3,"file":"chunks/app_views_performance_onboarding_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/onboardingPanel.tsx","webpack:///./app/views/performance/onboarding.tsx"],"sourcesContent":["import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport {Panel} from 'sentry/components/panels';\nimport space from 'sentry/styles/space';\n\ntype Props = React.PropsWithChildren<{\n  image: React.ReactNode;\n  className?: string;\n}>;\n\nfunction OnboardingPanel({className, image, children}: Props) {\n  return (\n    <Panel className={className}>\n      <Container>\n        <IlloBox>{image}</IlloBox>\n        <StyledBox>{children}</StyledBox>\n      </Container>\n    </Panel>\n  );\n}\n\nconst Container = styled('div')`\n  padding: ${space(3)};\n  position: relative;\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    display: flex;\n    align-items: center;\n    flex-direction: row;\n    justify-content: center;\n    flex-wrap: wrap;\n    min-height: 300px;\n    max-width: 1000px;\n    margin: 0 auto;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints[1]}) {\n    min-height: 350px;\n  }\n`;\n\nconst StyledBox = styled('div')`\n  z-index: 1;\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    flex: 2;\n  }\n`;\n\nconst IlloBox = styled(StyledBox)`\n  position: relative;\n  min-height: 100px;\n  max-width: 300px;\n  margin: ${space(2)} auto;\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    flex: 1;\n    margin: ${space(3)};\n    max-width: auto;\n  }\n`;\n\nexport default OnboardingPanel;\n","import {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\n\nimport emptyStateImg from 'sentry-images/spot/performance-empty-state.svg';\nimport tourAlert from 'sentry-images/spot/performance-tour-alert.svg';\nimport tourCorrelate from 'sentry-images/spot/performance-tour-correlate.svg';\nimport tourMetrics from 'sentry-images/spot/performance-tour-metrics.svg';\nimport tourTrace from 'sentry-images/spot/performance-tour-trace.svg';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  clearIndicators,\n} from 'sentry/actionCreators/indicator';\nimport Button from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport FeatureTourModal, {\n  TourImage,\n  TourStep,\n  TourText,\n} from 'sentry/components/modals/featureTourModal';\nimport OnboardingPanel from 'sentry/components/onboardingPanel';\nimport {t} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport useApi from 'sentry/utils/useApi';\n\nconst performanceSetupUrl =\n  'https://docs.sentry.io/performance-monitoring/getting-started/';\n\nconst docsLink = (\n  <Button external href={performanceSetupUrl}>\n    {t('Setup')}\n  </Button>\n);\n\nexport const PERFORMANCE_TOUR_STEPS: TourStep[] = [\n  {\n    title: t('Track Application Metrics'),\n    image: <TourImage src={tourMetrics} />,\n    body: (\n      <TourText>\n        {t(\n          'Monitor your slowest pageloads and APIs to see which users are having the worst time.'\n        )}\n      </TourText>\n    ),\n    actions: docsLink,\n  },\n  {\n    title: t('Correlate Errors and Performance'),\n    image: <TourImage src={tourCorrelate} />,\n    body: (\n      <TourText>\n        {t(\n          'See what errors occurred within a transaction and the impact of those errors.'\n        )}\n      </TourText>\n    ),\n    actions: docsLink,\n  },\n  {\n    title: t('Watch and Alert'),\n    image: <TourImage src={tourAlert} />,\n    body: (\n      <TourText>\n        {t(\n          'Highlight mission-critical pages and APIs and set latency alerts to notify you before things go wrong.'\n        )}\n      </TourText>\n    ),\n    actions: docsLink,\n  },\n  {\n    title: t('Trace Across Systems'),\n    image: <TourImage src={tourTrace} />,\n    body: (\n      <TourText>\n        {t(\n          \"Follow a trace from a user's session and drill down to identify any bottlenecks that occur.\"\n        )}\n      </TourText>\n    ),\n  },\n];\n\ntype Props = {\n  organization: Organization;\n  project: Project;\n};\n\nfunction Onboarding({organization, project}: Props) {\n  const api = useApi();\n\n  function handleAdvance(step: number, duration: number) {\n    trackAdvancedAnalyticsEvent('performance_views.tour.advance', {\n      step,\n      duration,\n      organization,\n    });\n  }\n\n  function handleClose(step: number, duration: number) {\n    trackAdvancedAnalyticsEvent('performance_views.tour.close', {\n      step,\n      duration,\n      organization,\n    });\n  }\n\n  return (\n    <OnboardingPanel image={<PerfImage src={emptyStateImg} />}>\n      <h3>{t('Pinpoint problems')}</h3>\n      <p>\n        {t(\n          'Something seem slow? Track down transactions to connect the dots between 10-second page loads and poor-performing API calls or slow database queries.'\n        )}\n      </p>\n      <ButtonList gap={1}>\n        <Button\n          priority=\"primary\"\n          target=\"_blank\"\n          href=\"https://docs.sentry.io/performance-monitoring/getting-started/\"\n        >\n          {t('Start Setup')}\n        </Button>\n        <Button\n          data-test-id=\"create-sample-transaction-btn\"\n          onClick={async () => {\n            trackAdvancedAnalyticsEvent('performance_views.create_sample_transaction', {\n              platform: project.platform,\n              organization,\n            });\n            addLoadingMessage(t('Processing sample event...'), {\n              duration: 15000,\n            });\n            const url = `/projects/${organization.slug}/${project.slug}/create-sample-transaction/`;\n            try {\n              const eventData = await api.requestPromise(url, {method: 'POST'});\n              browserHistory.push(\n                `/organizations/${organization.slug}/performance/${project.slug}:${eventData.eventID}/`\n              );\n              clearIndicators();\n            } catch (error) {\n              Sentry.withScope(scope => {\n                scope.setExtra('error', error);\n                Sentry.captureException(new Error('Failed to create sample event'));\n              });\n              clearIndicators();\n              addErrorMessage(t('Failed to create a new sample event'));\n              return;\n            }\n          }}\n        >\n          {t('View Sample Transaction')}\n        </Button>\n      </ButtonList>\n      <FeatureTourModal\n        steps={PERFORMANCE_TOUR_STEPS}\n        onAdvance={handleAdvance}\n        onCloseModal={handleClose}\n        doneUrl={performanceSetupUrl}\n        doneText={t('Start Setup')}\n      >\n        {({showModal}) => (\n          <Button\n            priority=\"link\"\n            onClick={() => {\n              trackAdvancedAnalyticsEvent('performance_views.tour.start', {organization});\n              showModal();\n            }}\n          >\n            {t('Take a Tour')}\n          </Button>\n        )}\n      </FeatureTourModal>\n    </OnboardingPanel>\n  );\n}\n\nconst PerfImage = styled('img')`\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    max-width: unset;\n    user-select: none;\n    position: absolute;\n    top: 75px;\n    bottom: 0;\n    width: 450px;\n    margin-top: auto;\n    margin-bottom: auto;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints[1]}) {\n    width: 480px;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints[2]}) {\n    width: 600px;\n  }\n`;\n\nconst ButtonList = styled(ButtonBar)`\n  grid-template-columns: repeat(auto-fit, minmax(130px, max-content));\n  margin-bottom: 16px;\n`;\n\nexport default Onboarding;\n"],"names":["OnboardingPanel","className","image","children","Container","IlloBox","StyledBox","space","p","theme","breakpoints","performanceSetupUrl","docsLink","external","href","t","PERFORMANCE_TOUR_STEPS","title","src","tourMetrics","body","actions","tourCorrelate","tourAlert","tourTrace","Onboarding","organization","project","api","useApi","PerfImage","emptyStateImg","ButtonList","gap","priority","target","onClick","async","trackAdvancedAnalyticsEvent","platform","addLoadingMessage","duration","url","slug","eventData","requestPromise","method","browserHistory","eventID","clearIndicators","error","Sentry","scope","setExtra","Error","addErrorMessage","steps","onAdvance","step","onCloseModal","doneUrl","doneText","showModal","ButtonBar"],"sourceRoot":""}