{"version":3,"file":"chunks/app_views_organizationGroupDetails_groupTags_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/deviceName.tsx","webpack:///./app/views/organizationGroupDetails/groupTags.tsx"],"sourcesContent":["import * as React from 'react';\nimport * as Sentry from '@sentry/react';\n\n// Self reference to the module, so that we can mock a failed import in a test.\nimport * as selfModule from 'sentry/components/deviceName';\nimport {IOSDeviceList} from 'sentry/types/iOSDeviceList';\n\nexport function deviceNameMapper(\n  model: string | undefined,\n  module: IOSDeviceList | null\n): string | null {\n  // If we have no model, render nothing\n  if (typeof model !== 'string') {\n    return null;\n  }\n\n  // If module has not loaded yet, render the unparsed model\n  if (module === null) {\n    return model;\n  }\n\n  const [identifier, ...rest] = model.split(' ');\n\n  const modelName = module.generationByIdentifier(identifier);\n  return modelName === undefined ? model : `${modelName} ${rest.join(' ')}`;\n}\n\nexport async function loadDeviceListModule(platform: 'iOS') {\n  if (platform !== 'iOS') {\n    Sentry.captureException('DeviceName component only supports iOS module');\n  }\n  return import('ios-device-list');\n}\n\ninterface DeviceNameProps {\n  value: string;\n  children?: (name: string) => React.ReactNode;\n}\n\n/**\n * This is used to map iOS Device Names to model name.\n * This asynchronously loads the ios-device-list library because of its size\n */\nfunction DeviceName({value, children}: DeviceNameProps): React.ReactElement | null {\n  const [deviceList, setDeviceList] = React.useState<IOSDeviceList | null>(null);\n\n  React.useEffect(() => {\n    let didUnmount = false;\n\n    selfModule\n      .loadDeviceListModule('iOS')\n      .then(module => {\n        // We need to track component unmount so we dont try and setState on an unmounted component\n        if (didUnmount) {\n          return;\n        }\n\n        setDeviceList(module);\n      })\n      .catch(() => {\n        Sentry.captureException('Failed to load ios-device-list module');\n      });\n\n    return () => {\n      didUnmount = true;\n    };\n  }, []);\n\n  const deviceName = React.useMemo(\n    () => deviceNameMapper(value, deviceList),\n    [value, deviceList]\n  );\n\n  return deviceName ? (\n    <span data-test-id=\"loaded-device-name\">\n      {children ? children(deviceName) : deviceName}\n    </span>\n  ) : null;\n}\n\nexport {DeviceName};\n","import * as React from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport isEqual from 'lodash/isEqual';\n\nimport Alert from 'sentry/components/alert';\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport Button from 'sentry/components/button';\nimport Count from 'sentry/components/count';\nimport {DeviceName} from 'sentry/components/deviceName';\nimport GlobalSelectionLink from 'sentry/components/globalSelectionLink';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {extractSelectionParameters} from 'sentry/components/organizations/pageFilters/utils';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport Version from 'sentry/components/version';\nimport {t, tct} from 'sentry/locale';\nimport overflowEllipsis from 'sentry/styles/overflowEllipsis';\nimport space from 'sentry/styles/space';\nimport {Group, TagWithTopValues} from 'sentry/types';\nimport {percent} from 'sentry/utils';\n\ntype Props = AsyncComponent['props'] & {\n  baseUrl: string;\n  environments: string[];\n  group: Group;\n} & RouteComponentProps<{}, {}>;\n\ntype State = AsyncComponent['state'] & {\n  tagList: null | TagWithTopValues[];\n};\n\nclass GroupTags extends AsyncComponent<Props, State> {\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      tagList: null,\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {group, environments} = this.props;\n    return [\n      [\n        'tagList',\n        `/issues/${group.id}/tags/`,\n        {\n          query: {environment: environments},\n        },\n      ],\n    ];\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (!isEqual(prevProps.environments, this.props.environments)) {\n      this.remountComponent();\n    }\n  }\n\n  renderTags() {\n    const {baseUrl, location} = this.props;\n    const {tagList} = this.state;\n\n    const alphabeticalTags = (tagList ?? []).sort((a, b) => a.key.localeCompare(b.key));\n\n    return (\n      <Container>\n        {alphabeticalTags.map((tag, tagIdx) => (\n          <TagItem key={tagIdx}>\n            <Panel>\n              <StyledPanelHeader hasButtons>\n                <TagHeading>{tag.key}</TagHeading>\n                <Button\n                  size=\"small\"\n                  to={{\n                    pathname: `${baseUrl}tags/${tag.key}/`,\n                    query: extractSelectionParameters(location.query),\n                  }}\n                >\n                  {t('More Details')}\n                </Button>\n              </StyledPanelHeader>\n              <PanelBody withPadding>\n                <UnstyledUnorderedList>\n                  {tag.topValues.map((tagValue, tagValueIdx) => (\n                    <li key={tagValueIdx} data-test-id={tag.key}>\n                      <TagBarGlobalSelectionLink\n                        to={{\n                          pathname: `${baseUrl}events/`,\n                          query: {\n                            query: tagValue.query || `${tag.key}:\"${tagValue.value}\"`,\n                          },\n                        }}\n                      >\n                        <TagBarBackground\n                          widthPercent={percent(tagValue.count, tag.totalValues) + '%'}\n                        />\n                        <TagBarLabel>\n                          {tag.key === 'release' ? (\n                            <Version version={tagValue.name} anchor={false} />\n                          ) : (\n                            <DeviceName value={tagValue.name} />\n                          )}\n                        </TagBarLabel>\n                        <TagBarCount>\n                          <Count value={tagValue.count} />\n                        </TagBarCount>\n                      </TagBarGlobalSelectionLink>\n                    </li>\n                  ))}\n                </UnstyledUnorderedList>\n              </PanelBody>\n            </Panel>\n          </TagItem>\n        ))}\n      </Container>\n    );\n  }\n\n  renderBody() {\n    return (\n      <div>\n        {this.renderTags()}\n        <Alert type=\"info\">\n          {tct(\n            'Tags are automatically indexed for searching and breakdown charts. Learn how to [link: add custom tags to issues]',\n            {\n              link: (\n                <ExternalLink href=\"https://docs.sentry.io/platform-redirect/?next=/enriching-events/tags\" />\n              ),\n            }\n          )}\n        </Alert>\n      </div>\n    );\n  }\n}\n\nconst Container = styled('div')`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst StyledPanelHeader = styled(PanelHeader)`\n  text-transform: none;\n`;\n\nconst TagHeading = styled('h5')`\n  font-size: ${p => p.theme.fontSizeLarge};\n  margin-bottom: 0;\n`;\n\nconst UnstyledUnorderedList = styled('ul')`\n  list-style: none;\n  padding-left: 0;\n  margin-bottom: 0;\n`;\n\nconst TagItem = styled('div')`\n  padding: 0 ${space(1)};\n  width: 50%;\n`;\n\nconst TagBarBackground = styled('div')<{widthPercent: string}>`\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  background: ${p => p.theme.tagBar};\n  border-radius: ${p => p.theme.borderRadius};\n  width: ${p => p.widthPercent};\n`;\n\nconst TagBarGlobalSelectionLink = styled(GlobalSelectionLink)`\n  position: relative;\n  display: flex;\n  line-height: 2.2;\n  color: ${p => p.theme.textColor};\n  margin-bottom: ${space(0.5)};\n  padding: 0 ${space(1)};\n  background: ${p => p.theme.backgroundSecondary};\n  border-radius: ${p => p.theme.borderRadius};\n  overflow: hidden;\n\n  &:hover {\n    color: ${p => p.theme.textColor};\n    text-decoration: underline;\n    ${TagBarBackground} {\n      background: ${p => p.theme.tagBarHover};\n    }\n  }\n`;\n\nconst TagBarLabel = styled('div')`\n  position: relative;\n  flex-grow: 1;\n  ${overflowEllipsis}\n`;\n\nconst TagBarCount = styled('div')`\n  position: relative;\n  padding-left: ${space(2)};\n  font-variant-numeric: tabular-nums;\n`;\n\nexport default GroupTags;\n"],"names":["deviceNameMapper","model","module","identifier","rest","split","modelName","generationByIdentifier","undefined","join","async","loadDeviceListModule","platform","Sentry","DeviceName","value","children","deviceList","setDeviceList","React","didUnmount","selfModule","then","catch","deviceName","GroupTags","AsyncComponent","getDefaultState","super","tagList","getEndpoints","group","environments","this","props","id","query","environment","componentDidUpdate","prevProps","isEqual","remountComponent","renderTags","baseUrl","location","state","alphabeticalTags","sort","a","b","key","localeCompare","Container","map","tag","tagIdx","TagItem","StyledPanelHeader","hasButtons","TagHeading","size","to","pathname","extractSelectionParameters","t","withPadding","UnstyledUnorderedList","topValues","tagValue","tagValueIdx","TagBarGlobalSelectionLink","TagBarBackground","widthPercent","percent","count","totalValues","TagBarLabel","version","name","anchor","TagBarCount","renderBody","type","tct","link","href","PanelHeader","p","theme","fontSizeLarge","space","tagBar","borderRadius","GlobalSelectionLink","textColor","backgroundSecondary","tagBarHover","overflowEllipsis"],"sourceRoot":""}