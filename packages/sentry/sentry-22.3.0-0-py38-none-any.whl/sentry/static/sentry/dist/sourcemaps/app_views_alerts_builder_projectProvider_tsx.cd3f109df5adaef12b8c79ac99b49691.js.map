{"version":3,"file":"chunks/app_views_alerts_builder_projectProvider_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"olBA+DA,QAzCA,SAAqCA,GACnC,MAAMC,GAAMC,EAAAA,EAAAA,MACZC,EAAAA,EAAAA,GAAe,CAACC,SAAUJ,EAAMI,WAEhC,MAAM,SAACC,EAAD,OAAWC,EAAX,aAAmBC,KAAiBC,GAASR,GAC7C,UAACS,GAAaH,GACd,SAACI,EAAD,gBAAWC,EAAX,SAA4BC,EAA5B,WAAsCC,IAAcC,EAAAA,EAAAA,GAAY,CACpEC,MAAO,CAACN,KAEJO,EAAUN,EAASO,MAAK,QAAC,KAACC,GAAF,SAAYA,IAAST,KAWnD,OATAU,EAAAA,EAAAA,YAAU,KACHH,IAKLI,EAAAA,EAAAA,IAAgBnB,EAAKM,EAAaW,KAAM,CAACF,EAAQK,OAChD,CAACL,KAECL,GAAmBC,GACf,QAAC,IAAD,KAIJI,GAAWH,GAEZ,QAAC,IAAD,CAAOS,KAAK,UAAZ,UAAuBC,EAAAA,EAAAA,GAAE,qDAItBlB,IAAYmB,EAAAA,EAAAA,gBAAenB,IAC9BoB,EAAAA,EAAAA,cAAapB,EAAU,IAClBG,KACAH,EAASL,MACZgB,QAAAA,EACAT,aAAAA,IAEFF","sources":["webpack:///./app/views/alerts/builder/projectProvider.tsx"],"sourcesContent":["import {cloneElement, isValidElement, useEffect} from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport {fetchOrgMembers} from 'sentry/actionCreators/members';\nimport Alert from 'sentry/components/alert';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {t} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport useApi from 'sentry/utils/useApi';\nimport useProjects from 'sentry/utils/useProjects';\nimport useScrollToTop from 'sentry/utils/useScrollToTop';\n\ntype Props = RouteComponentProps<RouteParams, {}> & {\n  hasMetricAlerts: boolean;\n  organization: Organization;\n  children?: React.ReactNode;\n};\n\ntype RouteParams = {\n  projectId: string;\n};\n\nfunction AlertBuilderProjectProvider(props: Props) {\n  const api = useApi();\n  useScrollToTop({location: props.location});\n\n  const {children, params, organization, ...other} = props;\n  const {projectId} = params;\n  const {projects, initiallyLoaded, fetching, fetchError} = useProjects({\n    slugs: [projectId],\n  });\n  const project = projects.find(({slug}) => slug === projectId);\n\n  useEffect(() => {\n    if (!project) {\n      return;\n    }\n\n    // fetch members list for mail action fields\n    fetchOrgMembers(api, organization.slug, [project.id]);\n  }, [project]);\n\n  if (!initiallyLoaded || fetching) {\n    return <LoadingIndicator />;\n  }\n\n  // if loaded, but project fetching states incomplete or project can't be found, project doesn't exist\n  if (!project || fetchError) {\n    return (\n      <Alert type=\"warning\">{t('The project you were looking for was not found.')}</Alert>\n    );\n  }\n\n  return children && isValidElement(children)\n    ? cloneElement(children, {\n        ...other,\n        ...children.props,\n        project,\n        organization,\n      })\n    : children;\n}\n\nexport default AlertBuilderProjectProvider;\n"],"names":["props","api","useApi","useScrollToTop","location","children","params","organization","other","projectId","projects","initiallyLoaded","fetching","fetchError","useProjects","slugs","project","find","slug","useEffect","fetchOrgMembers","id","type","t","isValidElement","cloneElement"],"sourceRoot":""}