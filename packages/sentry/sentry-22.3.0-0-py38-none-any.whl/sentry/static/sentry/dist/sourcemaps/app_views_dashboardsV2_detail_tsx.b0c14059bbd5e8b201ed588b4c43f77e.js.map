{"version":3,"file":"chunks/app_views_dashboardsV2_detail_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"u1DA8BA,SAASA,EAAT,GAUU,IAVQ,aAChBC,EADgB,eAEhBC,EAFgB,WAGhBC,EAHgB,mBAIhBC,EAJgB,OAKhBC,EALgB,SAMhBC,EANgB,SAOhBC,EAPgB,SAQhBC,EARgB,YAShBC,GACQ,EACR,SAASC,IAAwC,IAArBC,EAAqB,wDAAbC,EAAAA,EAAAA,GAAE,UACpC,OACE,QAAC,KAAD,CACE,eAAa,mBACbC,QAASC,IACPA,EAAEC,iBACFP,KAJJ,SAOGG,IAKP,MAAI,CAACK,EAAAA,GAAAA,KAAqBA,EAAAA,GAAAA,gBAA+BC,SAASf,IAE9D,QAACgB,EAAD,CAAiBC,IAAK,EAAtB,UACGT,KACD,QAAC,IAAD,CACEU,SAAS,SACTC,SAAST,EAAAA,EAAAA,GAAE,mDACXU,UAAWf,EACXgB,SAAUpB,EAAWqB,QAAU,EAJjC,UAME,QAAC,KAAD,CAAQ,eAAa,mBAAmBJ,SAAS,SAAjD,UACGR,EAAAA,EAAAA,GAAE,eAGP,QAAC,KAAD,CACE,eAAa,mBACbC,QAASC,IACPA,EAAEC,iBACFT,KAEFc,SAAS,UANX,UAQGR,EAAAA,EAAAA,GAAE,uBApBsB,iBA0B7BV,IAAmBc,EAAAA,GAAAA,QAEnB,QAACE,EAAD,CAAiBC,IAAK,EAAtB,UACGT,KACD,QAAC,KAAD,CACE,eAAa,mBACbG,QAASC,IACPA,EAAEC,iBACFT,KAEFc,SAAS,UANX,UAQGR,EAAAA,EAAAA,GAAE,uBAVsB,mBAgB7BV,IAAmBc,EAAAA,GAAAA,SAEnB,QAACE,EAAD,CAAiBC,IAAK,EAAtB,UACGT,GAAmBE,EAAAA,EAAAA,GAAE,aACtB,QAAC,KAAD,CACE,eAAa,mBACbC,QAASC,IACPA,EAAEC,iBACFT,KAEFc,SAAS,UANX,UAQGR,EAAAA,EAAAA,GAAE,qBAVsB,qBAiB/B,QAACM,EAAD,CAAiBC,IAAK,EAAtB,UACE,QAACM,EAAD,UACGC,IACC,QAAC,WAAD,YACE,QAAC,KAAD,CACE,eAAa,iBACbb,QAASC,IACPA,EAAEC,iBACFV,KAEFsB,MAAM,QAAC,KAAD,IACNJ,UAAWG,EACXN,SACEnB,EAAa2B,SAASX,SAAS,kBAAoB,UAAY,UATnE,UAYGL,EAAAA,EAAAA,GAAE,oBAEJX,EAAa2B,SAASX,SAAS,mBAAqBS,GACnD,QAAC,IAAD,CACEG,OAAOC,EAAAA,EAAAA,IAAI,oDAAqD,CAC9DC,WAAYC,EAAAA,KAEdT,UAAanB,EAJf,UAME,QAAC,KAAD,CACE,eAAa,qBACbgB,SAAS,UACTG,SAAUnB,EACVuB,MAAM,QAAC,KAAD,CAASM,WAAS,IACxBpB,QAAS,MACPqB,EAAAA,EAAAA,GACE,yCACA,CACEjC,aAAAA,IAGJQ,KAZJ,UAeGG,EAAAA,EAAAA,GAAE,kBAGL,WA3CiB,YA1FxBZ,EAAAA,YAAAA,WA6IT,MAAMyB,EAAuB,IAIvB,IAJwB,SAC5BU,GAGI,EACJ,MAAMC,GAAmBxB,EAAAA,EAAAA,GAAE,+BAiB3B,OACE,QAAC,IAAD,CACEyB,SAAS,mCACTT,SAAU,CAAC,iCACXU,eAnBmBC,IACrB,QAAC,KAAD,CACEC,MACE,QAAC,IAAD,CACEZ,SAAUW,EAAEX,SACZa,gBAAc,EACdpB,QAASe,EACTM,YAAaN,IANnB,SAUGG,EAAEJ,SAASI,KAKd,SAKG,QAAC,WAACb,GAAF,SAAkBS,EAAST,OA5B5BD,EAAAA,YAAAA,uBAiCN,MAAMP,GAAkB,OAAOyB,EAAAA,GAAP,qBAAH,uBACEJ,GAAKA,EAAEK,MAAMC,YAAY,IAD3B,sCAGDC,EAAAA,EAAAA,GAAM,GAHL,iBAQrB,I,oLCzMA,SAASC,EAAT,GAAiE,IAAzC,UAACC,EAAD,UAAYC,EAAZ,SAAuBC,GAAkB,EAC/D,OACE,wBACIF,GAGA,QAAC,IAAD,CACEG,YAAaF,EACbG,MAAOJ,EAAUnB,MACjBwB,SAAUC,GAAYJ,EAAS,IAAIF,EAAWnB,MAAOyB,IACrDC,cAAc3C,EAAAA,EAAAA,GAAE,yCAChB4C,YAAU,KAPZ5C,EAAAA,EAAAA,GAAE,gBAJDmC,EAAAA,YAAAA,iBAkBT,U,8CC4BA,MAAMU,GAAkB7C,EAAAA,EAAAA,GAAE,6DAEpB8C,GAAaC,EAAAA,EAAAA,GAAc,CAACtB,SAAU,gCA2B5C,MAAMuB,WAAwBC,EAAAA,UAAwB,uDACrC,CACb3D,eAAgB4D,KAAKC,MAAMC,aAC3BC,kBAAmBH,KAAKI,wBAAwBJ,KAAKC,MAAMC,cAC3D5D,mBAAoB0D,KAAKC,MAAMf,UAAUmB,QAAQ3C,QAAUQ,EAAAA,MAJT,sBAsI3C,KACP,MAAM,UAACgB,GAAac,KAAKC,OAEzBK,EAAAA,EAAAA,IAAoB,CAClBC,SAAU,yBACVC,UAAW,0BACXC,gBAAiBC,SAASV,KAAKC,MAAM9D,aAAawE,GAAI,MAGxDX,KAAKY,SAAS,CACZxE,eAAgBc,EAAAA,GAAAA,KAChBiD,mBAAmBU,EAAAA,EAAAA,IAAe3B,SAjJc,4BAqJrC,KACb,MAAM,UAACA,GAAac,KAAKC,OACnB,kBAACE,GAAqBH,KAAKc,MAEjC,IACG,CACC5D,EAAAA,GAAAA,KACAA,EAAAA,GAAAA,eACAA,EAAAA,GAAAA,SACAC,SAAS6C,KAAKc,MAAM1E,kBACrB2E,GAAAA,CAAQZ,EAAmBjB,GAE5B,OAAOS,MAjKyC,wBAsKxCqB,IACV,MAAM,UAAC9B,GAAac,KAAKC,OACnB,kBAACE,GAAqBH,KAAKc,MAG/B,CACE5D,EAAAA,GAAAA,KACAA,EAAAA,GAAAA,eACAA,EAAAA,GAAAA,SACAC,SAAS6C,KAAKc,MAAM1E,iBACtB2E,GAAAA,CAAQZ,EAAmBjB,KAI7B8B,EAAM/D,iBACN+D,EAAMC,YAActB,OArL8B,wBAwLxCT,GAA0C,KACpD,MAAM,IAACgC,EAAD,aAAM/E,EAAN,SAAoBgF,GAAYnB,KAAKC,MAC3C,GAAKf,MAAAA,IAAAA,EAAWyB,GACd,OAGF,MAAMS,EAAyBpB,KAAKc,MAAM1E,eAE1C4D,KAAKY,SAAS,CAACxE,eAAgBc,EAAAA,GAAAA,iBAAgC,MAC7DmE,EAAAA,EAAAA,IAAgBH,EAAK/E,EAAamF,KAAMpC,EAAUyB,IAC/CY,MAAK,MACJC,EAAAA,EAAAA,KAAkB1E,EAAAA,EAAAA,GAAE,uBACpBwD,EAAAA,EAAAA,IAAoB,CAClBC,SAAU,qBACVC,UAAW,sBACXC,gBAAiBC,SAASV,KAAKC,MAAM9D,aAAawE,GAAI,MAExDc,EAAAA,eAAAA,QAAuB,CACrBC,SAAW,kBAAiBvF,EAAamF,mBACzCK,MAAOR,EAASQ,WAGnBC,OAAM,KACL5B,KAAKY,SAAS,CACZxE,eAAgBgF,cAhN0B,wBAsNzC,KACT,MAAM,aAACjF,EAAD,UAAe+C,EAAf,SAA0BiC,EAA1B,OAAoCU,GAAU7B,KAAKC,OACnD,kBAACE,GAAqBH,KAAKc,MAEjC,IAAIgB,GAAuBf,GAAAA,CAAQZ,EAAmBjB,GAgBtD,GAZuBA,EAAUmB,QAAQ0B,OAAM,QAAC,OAACC,GAAF,UAAeC,EAAAA,EAAAA,IAAQD,QAEpEF,GAAuBf,GAAAA,CACrB,IACKZ,EACHE,QAASF,MAAAA,OAAF,EAAEA,EAAmBE,QAAQ6B,KAAIC,GAAUC,GAAAA,CAAKD,EAAQ,aAEjE,IAAIjD,EAAWmB,QAASnB,EAAUmB,QAAQ6B,KAAIC,GAAUC,GAAAA,CAAKD,EAAQ,gBAKrEL,GAAwB9B,KAAKqC,WAG1BC,QAAQ3C,GAHf,CAOA,GAAIkC,EAAOU,YAUT,OATAjC,EAAAA,EAAAA,IAAoB,CAClBC,SAAU,0BACVC,UAAW,2BACXC,gBAAiBC,SAASV,KAAKC,MAAM9D,aAAawE,GAAI,WAExDX,KAAKY,SAAS,CACZxE,eAAgBc,EAAAA,GAAAA,KAChBiD,kBAAmB,QAIvBG,EAAAA,EAAAA,IAAoB,CAClBC,SAAU,4BACVC,UAAW,6BACXC,gBAAiBC,SAASV,KAAKC,MAAM9D,aAAawE,GAAI,MAExDc,EAAAA,eAAAA,QAAuB,CACrBC,SAAW,kBAAiBvF,EAAamF,mBACzCK,MAAOR,EAASQ,aApQgC,sCAwQ1BtB,IACxB,MAAM,aAAClE,EAAD,UAAe+C,EAAf,IAA0BgC,EAA1B,kBAA+BsB,EAA/B,SAAkDrB,GAAYnB,KAAKC,OACnE,kBAACE,GAAqBH,KAAKc,MAI3B2B,GAAgBC,EAAAA,EAAAA,IAAmBrC,GACnCsC,GAAqBC,EAAAA,EAAAA,IAAsBH,GAC3CI,EAAuB,KACxBhC,EAAAA,EAAAA,IAAeV,GAAqBjB,GACvCmB,SAASyC,EAAAA,EAAAA,IAAoBzC,EAASsC,IAExC3C,KAAKY,SAAS,CACZT,kBAAmB0C,EACnBvG,mBAAoB+D,EAAQ3C,QAAUQ,EAAAA,KAEpC8B,KAAKb,WAAaa,KAAKqC,YAG3BU,EAAAA,EAAAA,GAAgB7B,EAAK/E,EAAamF,KAAMuB,GAAsBtB,MAC3DyB,IACKR,IACFA,EAAkBQ,GAClBhD,KAAKY,SAAS,CACZT,kBAAmB,SAGvBqB,EAAAA,EAAAA,KAAkB1E,EAAAA,EAAAA,GAAE,sBAChBoC,GAAa8D,EAAarC,KAAOzB,EAAUyB,IAC7Cc,EAAAA,eAAAA,QAAuB,CACrBC,SAAW,kBAAiBvF,EAAamF,kBAAkB0B,EAAarC,MACxEgB,MAAO,IACFR,EAASQ,YAMpB,aA9SgD,qCAkT3BQ,IACvB,MAAM,UAACjD,GAAac,KAAKC,OACnB,kBAACE,GAAqBH,KAAKc,MAC3B+B,EAAuB1C,GAAqBjB,EAClDc,KAAKiD,eAAe,IAAIJ,EAAqBxC,QAAS8B,QAtTJ,2BAyTtC,KACZ,MAAM,aAAChG,EAAD,UAAe+C,GAAac,KAAKC,MACvCD,KAAKY,SAAS,CACZT,mBAAmBU,EAAAA,EAAAA,IAAe3B,MAGpCgE,EAAAA,EAAAA,6BAA4B,CAC1B/G,aAAAA,EACA+C,UAAAA,EACAiE,mBAAqB9C,GAAsBL,KAAKoD,uBAAuB/C,GACvEgD,OAAQC,EAAAA,GAAAA,cAnUwC,wBAuUzC,KACT,MAAM,IAACpC,EAAD,aAAM/E,EAAN,SAAoBgF,EAApB,UAA8BjC,EAA9B,kBAAyCsD,GAAqBxC,KAAKC,OACnE,kBAACE,EAAD,eAAoB/D,GAAkB4D,KAAKc,MAEjD,OAAQ1E,GACN,KAAKc,EAAAA,GAAAA,QACL,KAAKA,EAAAA,GAAAA,OACCiD,IACEH,KAAKqC,YACPjE,EAAAA,EAAAA,GAA4B,kCAAmC,CAC7DjC,aAAAA,EACAoH,aAAcrE,EAAUyB,GACxB6C,gBAAiBtE,EAAUnB,MAC3B0F,eAAe,KAGnBC,EAAAA,EAAAA,IAAgBxC,EAAK/E,EAAamF,KAAMnB,EAAmBH,KAAKqC,WAAWd,MACxEyB,KACCxB,EAAAA,EAAAA,KAAkB1E,EAAAA,EAAAA,GAAE,uBACpBwD,EAAAA,EAAAA,IAAoB,CAClBC,SAAU,8BACVC,UAAW,+BACXC,gBAAiBC,SAASvE,EAAawE,GAAI,MAE7CX,KAAKY,SAAS,CACZxE,eAAgBc,EAAAA,GAAAA,OAIlBuE,EAAAA,eAAAA,QAAuB,CACrBC,SAAW,kBAAiBvF,EAAamF,kBAAkB0B,EAAarC,MACxEgB,MAAO,IACFR,EAASQ,YAIlB,UAGJ,MAEF,KAAKzE,EAAAA,GAAAA,KAEH,GAAIiD,EACF,OAAIY,GAAAA,CAAQ7B,EAAWiB,QACrBH,KAAKY,SAAS,CACZxE,eAAgBc,EAAAA,GAAAA,KAChBiD,kBAAmB,YAIvB4C,EAAAA,EAAAA,GAAgB7B,EAAK/E,EAAamF,KAAMnB,GAAmBoB,MACxDyB,IACKR,GACFA,EAAkBQ,IAEpBxB,EAAAA,EAAAA,KAAkB1E,EAAAA,EAAAA,GAAE,uBACpBwD,EAAAA,EAAAA,IAAoB,CAClBC,SAAU,4BACVC,UAAW,6BACXC,gBAAiBC,SAASvE,EAAawE,GAAI,MAE7CX,KAAKY,SAAS,CACZxE,eAAgBc,EAAAA,GAAAA,KAChBiD,kBAAmB,OAGjBjB,GAAa8D,EAAarC,KAAOzB,EAAUyB,IAC7Cc,EAAAA,eAAAA,QAAuB,CACrBC,SAAW,kBAAiBvF,EAAamF,kBAAkB0B,EAAarC,MACxEgB,MAAO,IACFR,EAASQ,YAMpB,SAKJ3B,KAAKY,SAAS,CACZxE,eAAgBc,EAAAA,GAAAA,KAChBiD,kBAAmB,OAErB,MAEF,KAAKjD,EAAAA,GAAAA,KACL,QACE8C,KAAKY,SAAS,CACZxE,eAAgBc,EAAAA,GAAAA,KAChBiD,kBAAmB,YAnayB,oCA0a5BjB,IACtBc,KAAKY,SAAS,CACZT,kBAAmBjB,QA5a6B,sCAgb1BiD,IACxBnC,KAAKY,SAAS,CAAC+C,kBAAmBxB,QAjbgB,8BAoblC9B,IAChBL,KAAKY,UAAUE,IAAD,IACTA,EACH6C,uBAAmBC,EACnBtH,mBAAoB+D,EAAQ3C,QAAUQ,EAAAA,GACtCiC,kBAAmB,IACbW,EAAMX,mBAAqBH,KAAKC,MAAMf,UAC1CmB,QAAAA,UApbNwD,oBACE,MAAM,MAACC,EAAD,OAAQC,GAAU/D,KAAKC,MAC7BD,KAAKgE,kBACLD,EAAOE,kBAAkBH,EAAO9D,KAAKkE,cACrCC,OAAOC,iBAAiB,eAAgBpE,KAAKqE,UAC7CrE,KAAKsE,sCAGPC,mBAAmBC,GACbA,EAAUrD,SAASO,WAAa1B,KAAKC,MAAMkB,SAASO,UACtD1B,KAAKgE,kBAEPhE,KAAKsE,sCAGPG,uBACEN,OAAOO,oBAAoB,eAAgB1E,KAAKqE,UAGlDC,sCACE,MACEzC,QAAQ,SAAC8C,GADL,aAEJxI,EAFI,UAGJ+C,EAHI,SAIJiC,EAJI,OAKJ4C,GACE/D,KAAKC,MACT,IAAI2E,EAAAA,EAAAA,GAAmBzD,EAASO,UAAW,OACzC,MAAMS,GACJF,EAAAA,EAAAA,IAAQ0C,KAAR,UACCzF,EAAUmB,QAAQwE,MAAK,QAAC,GAAClE,GAAF,SAAUA,IAAOmE,OAAOH,aADhD,QAEEzF,EAAUmB,QAAQsE,IAClBxC,GACF4C,EAAAA,EAAAA,uBAAsB,CACpB5I,aAAAA,EACAgG,OAAAA,EACA6C,QAAS,KAEP,MAAMrD,EAAQS,GAAAA,CAAKjB,EAASQ,MAAOsD,OAAOC,OAAOC,EAAAA,IACjDpB,EAAOqB,KAAK,CACV1D,SAAUP,EAASO,SAAS2D,QAAQ,oBAAqB,IACzD1D,MAAAA,KAGJpF,OAAQ,MACN2G,EAAAA,EAAAA,6BAA4B,CAC1B/G,aAAAA,EACAgG,OAAAA,EACAc,eAAiBqC,IACf,MAAMC,EAAcrG,EAAUmB,QAAQmF,QAAQrD,GACxCsD,EAAkBC,GAAAA,CAAUxG,EAAUmB,SAC5CoF,EAAgBF,GAAeD,EAC/BtF,KAAKoD,uBAAuBqC,IAE9BpC,OAAQC,EAAAA,GAAAA,iBAMdS,EAAOsB,QAAQ,CACb3D,SAAW,kBAAiBvF,EAAamF,kBAAkBpC,EAAUyB,MACrEgB,MAAOR,EAASQ,SAElBgE,EAAAA,EAAAA,KAAgB7I,EAAAA,EAAAA,GAAE,uBAKxBkH,kBACE,MAAM,aAAC7H,EAAD,OAAe0F,GAAU7B,KAAKC,OAC9B,YAACsC,GAAeV,EAEhB+D,EAAyB,kBAAiBzJ,EAAamF,kBAAkBiB,KAE3EpB,SAASO,WAAakE,GAA2B5F,KAAKc,MAAM6C,mBAC9D3D,KAAK6F,4BAAuBjC,GAIhCxD,wBAAwBhE,GACtB,MAAM,UAAC8C,GAAac,KAAKC,MACzB,OAAQ7D,GACN,KAAKc,EAAAA,GAAAA,QACL,KAAKA,EAAAA,GAAAA,OACL,KAAKA,EAAAA,GAAAA,KACH,OAAO2D,EAAAA,EAAAA,IAAe3B,GACxB,QACE,OAAO,MAKA,gBACX,MAAM,eAAC9C,GAAkB4D,KAAKc,MAC9B,OAAO5D,EAAAA,GAAAA,UAA2Bd,EAGvB,gBACX,MAAM,eAACA,GAAkB4D,KAAKc,MAC9B,MAAO,CACL5D,EAAAA,GAAAA,KACAA,EAAAA,GAAAA,OACAA,EAAAA,GAAAA,gBACAC,SAASf,GAGY,4BACvB,MAAM,SAAC+E,EAAD,OAAWU,EAAX,aAAmB1F,GAAgB6D,KAAKC,OACxC,YAACsC,EAAD,YAAcuD,GAAejE,EASnC,MAP4B,CACzB,kBAAiB1F,EAAamF,kCAC9B,kBAAiBnF,EAAamF,kBAAkBiB,gBAChD,kBAAiBpG,EAAamF,8BAA8BwE,UAC5D,kBAAiB3J,EAAamF,kBAAkBiB,YAAsBuD,WAG9C3I,SAASgE,EAASO,UAG7B,qBAChB,MAAM,UAACxC,GAAac,KAAKC,OACnB,kBAACE,GAAqBH,KAAKc,MACjC,OAAOX,EAAoBA,EAAkBpC,MAAQmB,EAAUnB,MA6TjEgI,oBAAoB7G,GAClB,MAAM,SAACb,GAAY2B,KAAKC,OAClB,kBAACE,EAAD,kBAAoBwD,GAAqB3D,KAAKc,MAEpD,OAAOkF,EAAAA,EAAAA,gBAAe3H,IAClB4H,EAAAA,EAAAA,cAAa5H,EAAU,CACrBa,UAAWiB,MAAAA,EAAAA,EAAqBjB,EAChCgH,OAAQlG,KAAKb,UAAYa,KAAKiD,eAAiBjD,KAAKoD,uBACpDjB,OAAQwB,IAEVtF,EAGN8H,+BACE,MAAM,aAAChK,EAAD,UAAe+C,EAAf,WAA0B7C,EAA1B,OAAsCwF,EAAtC,OAA8CkC,EAA9C,SAAsD5C,GAAYnB,KAAKC,OACvE,kBAACE,EAAD,eAAoB/D,EAApB,mBAAoCE,GAAsB0D,KAAKc,OAC/D,YAACyB,GAAeV,EAEtB,OACE,QAAC,IAAD,CACEuE,iBAAkBjK,EAAa2B,SAASX,SAAS,gBACjDkJ,iBAAkB,CAChBC,SAAU,CACRC,MAAO,KACPC,IAAK,KACLC,KAAK,EACLC,OAAQC,EAAAA,KAPd,UAWE,QAAC,KAAD,WACE,QAAC,IAAD,CAAkBxK,aAAcA,EAAhC,WACE,QAACyK,GAAD,YACE,QAACC,GAAD,WACE,QAAC,EAAD,CACE3H,UAAWiB,MAAAA,EAAAA,EAAqBjB,EAChCE,SAAUY,KAAK8G,qBACf3H,UAAWa,KAAKb,eAGpB,QAAC,EAAD,CACEhD,aAAcA,EACdE,WAAYA,EACZE,OAAQyD,KAAKzD,OACbG,SAAUsD,KAAKtD,SACfF,SAAUwD,KAAKxD,SACfG,YAAaqD,KAAKrD,YAClBF,SAAUuD,KAAKvD,SAASyC,GACxB9C,eAAgBA,EAChBE,mBAAoBA,QAGxB,QAACsD,EAAD,CAAYzD,aAAcA,KAC1B,QAAC,KAAD,CACE4K,iBAAkBxE,EAClBrD,UAAWiB,MAAAA,EAAAA,EAAqBjB,EAChC/C,aAAcA,EACdgD,UAAWa,KAAKb,UAChB7C,mBAAoBA,EACpB8C,SAAUY,KAAKiD,eACf4C,uBAAwB7F,KAAK6F,uBAC7BzC,uBAAwBpD,KAAKoD,uBAC7B4D,sBAAuBhH,KAAKgH,sBAC5B3E,UAAWrC,KAAKqC,UAChB0B,OAAQA,EACR5C,SAAUA,WAQtB8F,qBACE,MAAM,eAAC7K,GAAkB4D,KAAKc,MAE9B,IAAIjE,EAAQmD,KAAKkH,eAMjB,OALI9K,IAAmBc,EAAAA,GAAAA,OACrBL,GAAQC,EAAAA,EAAAA,GAAE,oBACDkD,KAAKqC,YACdxF,GAAQC,EAAAA,EAAAA,GAAE,sBAELD,EAGTsK,wBACE,MAAM,aAAChL,EAAD,UAAe+C,EAAf,WAA0B7C,EAA1B,OAAsCwF,EAAtC,OAA8CkC,EAA9C,SAAsD5C,EAAtD,UAAgEiG,GACpEpH,KAAKC,OACD,kBAACE,EAAD,eAAoB/D,EAApB,mBAAoCE,GAAsB0D,KAAKc,OAC/D,YAACyB,GAAeV,EAEtB,OACE,QAAC,IAAD,CAAqB9D,MAAOmB,EAAUnB,MAAOsJ,QAASlL,EAAamF,KAAnE,UACE,QAAC,IAAD,CACE8E,iBAAkBjK,EAAa2B,SAASX,SAAS,gBACjDkJ,iBAAkB,CAChBC,SAAU,CACRC,MAAO,KACPC,IAAK,KACLC,KAAK,EACLC,OAAQC,EAAAA,KAPd,UAWE,QAACW,GAAD,WACE,QAAC,IAAD,CAAkBnL,aAAcA,EAAhC,WACE,QAAC,KAAD,YACE,QAAC,KAAD,YACE,QAAC,IAAD,CACEoL,OAAQ,CACN,CACE1K,OAAOC,EAAAA,EAAAA,GAAE,cACT0K,GAAK,kBAAiBrL,EAAamF,oBAErC,CACEzE,MAAOmD,KAAKiH,0BAIlB,QAAC,KAAD,WACE,QAAC,EAAD,CACE/H,UAAWiB,MAAAA,EAAAA,EAAqBjB,EAChCE,SAAUY,KAAK8G,qBACf3H,UAAWa,KAAKb,kBAItB,QAAC,KAAD,WACE,QAAC,EAAD,CACEhD,aAAcA,EACdE,WAAYA,EACZE,OAAQyD,KAAKzD,OACbG,SAAUsD,KAAKtD,SACfF,SAAUwD,KAAKxD,SACfG,YAAaqD,KAAKrD,YAClBF,SAAUuD,KAAKvD,SAASyC,GACxB9C,eAAgBA,EAChBE,mBAAoBA,UAI1B,QAAC,KAAD,WACE,QAAC,KAAD,CAAamL,WAAS,EAAtB,UACE,QAAC,KAAD,CACEV,iBAAkBxE,EAClBrD,UAAWiB,MAAAA,EAAAA,EAAqBjB,EAChC/C,aAAcA,EACdgD,UAAWa,KAAKb,UAChB7C,mBAAoBA,EACpB8C,SAAUY,KAAKiD,eACfG,uBAAwBpD,KAAKoD,uBAC7B4D,sBAAuBhH,KAAKgH,sBAC5BnB,uBAAwB7F,KAAK6F,uBAC7B9B,OAAQA,EACR5C,SAAUA,EACViG,UAAWA,EACX/E,UAAWrC,KAAKqC,yBAWlCqF,SACE,MAAM,aAACvL,EAAD,UAAe+C,GAAac,KAAKC,MAEvC,OAAID,KAAK2H,sBACA3H,KAAK+F,oBAAoB7G,GAG9B/C,EAAa2B,SAASX,SAAS,mBAC1B6C,KAAKmH,wBAGPnH,KAAKmG,gCAlnBVrG,GAAAA,YAAAA,kBAsnBN,MAAM8G,IAAmB,OAAO,MAAP,sBAAH,mEAGJ5H,EAAAA,EAAAA,GAAM,GAHF,sCAKHA,EAAAA,EAAAA,GAAM,GALH,wBAOCP,GAAKA,EAAEK,MAAMC,YAAY,IAP1B,uEASCC,EAAAA,EAAAA,GAAM,GATP,kBAchB6H,IAAc,OAAOe,EAAAA,GAAP,sBAAH,wCAIXN,IAAoB,OAAOO,EAAAA,GAAP,sBAAH,qCAIvB,IAAeC,EAAAA,EAAAA,IAAQC,EAAAA,EAAAA,GAAiBjI","sources":["webpack:///./app/views/dashboardsV2/controls.tsx","webpack:///./app/views/dashboardsV2/title.tsx","webpack:///./app/views/dashboardsV2/detail.tsx"],"sourcesContent":["import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport Feature from 'sentry/components/acl/feature';\nimport FeatureDisabled from 'sentry/components/acl/featureDisabled';\nimport Button from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport Confirm from 'sentry/components/confirm';\nimport {Hovercard} from 'sentry/components/hovercard';\nimport Tooltip from 'sentry/components/tooltip';\nimport {IconAdd, IconEdit} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\n\nimport {DashboardListItem, DashboardState, MAX_WIDGETS} from './types';\n\ntype Props = {\n  dashboardState: DashboardState;\n  dashboards: DashboardListItem[];\n  onAddWidget: () => void;\n  onCancel: () => void;\n  onCommit: () => void;\n  onDelete: () => void;\n  onEdit: () => void;\n  organization: Organization;\n  widgetLimitReached: boolean;\n};\n\nfunction Controls({\n  organization,\n  dashboardState,\n  dashboards,\n  widgetLimitReached,\n  onEdit,\n  onCommit,\n  onDelete,\n  onCancel,\n  onAddWidget,\n}: Props) {\n  function renderCancelButton(label = t('Cancel')) {\n    return (\n      <Button\n        data-test-id=\"dashboard-cancel\"\n        onClick={e => {\n          e.preventDefault();\n          onCancel();\n        }}\n      >\n        {label}\n      </Button>\n    );\n  }\n\n  if ([DashboardState.EDIT, DashboardState.PENDING_DELETE].includes(dashboardState)) {\n    return (\n      <StyledButtonBar gap={1} key=\"edit-controls\">\n        {renderCancelButton()}\n        <Confirm\n          priority=\"danger\"\n          message={t('Are you sure you want to delete this dashboard?')}\n          onConfirm={onDelete}\n          disabled={dashboards.length <= 1}\n        >\n          <Button data-test-id=\"dashboard-delete\" priority=\"danger\">\n            {t('Delete')}\n          </Button>\n        </Confirm>\n        <Button\n          data-test-id=\"dashboard-commit\"\n          onClick={e => {\n            e.preventDefault();\n            onCommit();\n          }}\n          priority=\"primary\"\n        >\n          {t('Save and Finish')}\n        </Button>\n      </StyledButtonBar>\n    );\n  }\n\n  if (dashboardState === DashboardState.CREATE) {\n    return (\n      <StyledButtonBar gap={1} key=\"create-controls\">\n        {renderCancelButton()}\n        <Button\n          data-test-id=\"dashboard-commit\"\n          onClick={e => {\n            e.preventDefault();\n            onCommit();\n          }}\n          priority=\"primary\"\n        >\n          {t('Save and Finish')}\n        </Button>\n      </StyledButtonBar>\n    );\n  }\n\n  if (dashboardState === DashboardState.PREVIEW) {\n    return (\n      <StyledButtonBar gap={1} key=\"preview-controls\">\n        {renderCancelButton(t('Go Back'))}\n        <Button\n          data-test-id=\"dashboard-commit\"\n          onClick={e => {\n            e.preventDefault();\n            onCommit();\n          }}\n          priority=\"primary\"\n        >\n          {t('Add Dashboard')}\n        </Button>\n      </StyledButtonBar>\n    );\n  }\n\n  return (\n    <StyledButtonBar gap={1} key=\"controls\">\n      <DashboardEditFeature>\n        {hasFeature => (\n          <React.Fragment>\n            <Button\n              data-test-id=\"dashboard-edit\"\n              onClick={e => {\n                e.preventDefault();\n                onEdit();\n              }}\n              icon={<IconEdit />}\n              disabled={!hasFeature}\n              priority={\n                organization.features.includes('widget-library') ? 'default' : 'primary'\n              }\n            >\n              {t('Edit Dashboard')}\n            </Button>\n            {organization.features.includes('widget-library') && hasFeature ? (\n              <Tooltip\n                title={tct('Max widgets ([maxWidgets]) per dashboard reached.', {\n                  maxWidgets: MAX_WIDGETS,\n                })}\n                disabled={!!!widgetLimitReached}\n              >\n                <Button\n                  data-test-id=\"add-widget-library\"\n                  priority=\"primary\"\n                  disabled={widgetLimitReached}\n                  icon={<IconAdd isCircled />}\n                  onClick={() => {\n                    trackAdvancedAnalyticsEvent(\n                      'dashboards_views.widget_library.opened',\n                      {\n                        organization,\n                      }\n                    );\n                    onAddWidget();\n                  }}\n                >\n                  {t('Add Widget')}\n                </Button>\n              </Tooltip>\n            ) : null}\n          </React.Fragment>\n        )}\n      </DashboardEditFeature>\n    </StyledButtonBar>\n  );\n}\n\nconst DashboardEditFeature = ({\n  children,\n}: {\n  children: (hasFeature: boolean) => React.ReactNode;\n}) => {\n  const noFeatureMessage = t('Requires dashboard editing.');\n\n  const renderDisabled = p => (\n    <Hovercard\n      body={\n        <FeatureDisabled\n          features={p.features}\n          hideHelpToggle\n          message={noFeatureMessage}\n          featureName={noFeatureMessage}\n        />\n      }\n    >\n      {p.children(p)}\n    </Hovercard>\n  );\n\n  return (\n    <Feature\n      hookName=\"feature-disabled:dashboards-edit\"\n      features={['organizations:dashboards-edit']}\n      renderDisabled={renderDisabled}\n    >\n      {({hasFeature}) => children(hasFeature)}\n    </Feature>\n  );\n};\n\nconst StyledButtonBar = styled(ButtonBar)`\n  @media (max-width: ${p => p.theme.breakpoints[0]}) {\n    grid-auto-flow: row;\n    grid-row-gap: ${space(1)};\n    width: 100%;\n  }\n`;\n\nexport default Controls;\n","import EditableText from 'sentry/components/editableText';\nimport {t} from 'sentry/locale';\n\nimport {DashboardDetails} from './types';\n\ntype Props = {\n  dashboard: DashboardDetails | null;\n  isEditing: boolean;\n  onUpdate: (dashboard: DashboardDetails) => void;\n};\n\nfunction DashboardTitle({dashboard, isEditing, onUpdate}: Props) {\n  return (\n    <div>\n      {!dashboard ? (\n        t('Dashboards')\n      ) : (\n        <EditableText\n          isDisabled={!isEditing}\n          value={dashboard.title}\n          onChange={newTitle => onUpdate({...dashboard, title: newTitle})}\n          errorMessage={t('Please set a title for this dashboard')}\n          autoSelect\n        />\n      )}\n    </div>\n  );\n}\n\nexport default DashboardTitle;\n","import {cloneElement, Component, isValidElement} from 'react';\nimport {browserHistory, PlainRoute, RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport cloneDeep from 'lodash/cloneDeep';\nimport isEqual from 'lodash/isEqual';\nimport omit from 'lodash/omit';\n\nimport {\n  createDashboard,\n  deleteDashboard,\n  updateDashboard,\n} from 'sentry/actionCreators/dashboards';\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {\n  openAddDashboardWidgetModal,\n  openWidgetViewerModal,\n} from 'sentry/actionCreators/modal';\nimport {Client} from 'sentry/api';\nimport Breadcrumbs from 'sentry/components/breadcrumbs';\nimport HookOrDefault from 'sentry/components/hookOrDefault';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport {\n  isWidgetViewerPath,\n  WidgetViewerQueryField,\n} from 'sentry/components/modals/widgetViewerModal/utils';\nimport NoProjectMessage from 'sentry/components/noProjectMessage';\nimport PageFiltersContainer from 'sentry/components/organizations/pageFilters/container';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t} from 'sentry/locale';\nimport {PageContent} from 'sentry/styles/organization';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport {trackAnalyticsEvent} from 'sentry/utils/analytics';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport withApi from 'sentry/utils/withApi';\nimport withOrganization from 'sentry/utils/withOrganization';\n\nimport Controls from './controls';\nimport Dashboard from './dashboard';\nimport {DEFAULT_STATS_PERIOD} from './data';\nimport {\n  assignDefaultLayout,\n  calculateColumnDepths,\n  getDashboardLayout,\n} from './layoutUtils';\nimport DashboardTitle from './title';\nimport {\n  DashboardDetails,\n  DashboardListItem,\n  DashboardState,\n  DashboardWidgetSource,\n  MAX_WIDGETS,\n  Widget,\n} from './types';\nimport {cloneDashboard} from './utils';\n\nconst UNSAVED_MESSAGE = t('You have unsaved changes, are you sure you want to leave?');\n\nconst HookHeader = HookOrDefault({hookName: 'component:dashboards-header'});\n\ntype RouteParams = {\n  orgId: string;\n  dashboardId?: string;\n  widgetId?: number;\n  widgetIndex?: number;\n};\n\ntype Props = RouteComponentProps<RouteParams, {}> & {\n  api: Client;\n  dashboard: DashboardDetails;\n  dashboards: DashboardListItem[];\n  initialState: DashboardState;\n  organization: Organization;\n  route: PlainRoute;\n  newWidget?: Widget;\n  onDashboardUpdate?: (updatedDashboard: DashboardDetails) => void;\n};\n\ntype State = {\n  dashboardState: DashboardState;\n  modifiedDashboard: DashboardDetails | null;\n  widgetLimitReached: boolean;\n  widgetToBeUpdated?: Widget;\n};\n\nclass DashboardDetail extends Component<Props, State> {\n  state: State = {\n    dashboardState: this.props.initialState,\n    modifiedDashboard: this.updateModifiedDashboard(this.props.initialState),\n    widgetLimitReached: this.props.dashboard.widgets.length >= MAX_WIDGETS,\n  };\n\n  componentDidMount() {\n    const {route, router} = this.props;\n    this.checkStateRoute();\n    router.setRouteLeaveHook(route, this.onRouteLeave);\n    window.addEventListener('beforeunload', this.onUnload);\n    this.checkIfShouldMountWidgetViewerModal();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.location.pathname !== this.props.location.pathname) {\n      this.checkStateRoute();\n    }\n    this.checkIfShouldMountWidgetViewerModal();\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('beforeunload', this.onUnload);\n  }\n\n  checkIfShouldMountWidgetViewerModal() {\n    const {\n      params: {widgetId},\n      organization,\n      dashboard,\n      location,\n      router,\n    } = this.props;\n    if (isWidgetViewerPath(location.pathname)) {\n      const widget =\n        defined(widgetId) &&\n        (dashboard.widgets.find(({id}) => id === String(widgetId)) ??\n          dashboard.widgets[widgetId]);\n      if (widget) {\n        openWidgetViewerModal({\n          organization,\n          widget,\n          onClose: () => {\n            // Filter out Widget Viewer Modal query params when exiting the Modal\n            const query = omit(location.query, Object.values(WidgetViewerQueryField));\n            router.push({\n              pathname: location.pathname.replace(/widget\\/[0-9]+\\/$/, ''),\n              query,\n            });\n          },\n          onEdit: () => {\n            openAddDashboardWidgetModal({\n              organization,\n              widget,\n              onUpdateWidget: (nextWidget: Widget) => {\n                const updateIndex = dashboard.widgets.indexOf(widget);\n                const nextWidgetsList = cloneDeep(dashboard.widgets);\n                nextWidgetsList[updateIndex] = nextWidget;\n                this.handleUpdateWidgetList(nextWidgetsList);\n              },\n              source: DashboardWidgetSource.DASHBOARDS,\n            });\n          },\n        });\n      } else {\n        // Replace the URL if the widget isn't found and raise an error in toast\n        router.replace({\n          pathname: `/organizations/${organization.slug}/dashboard/${dashboard.id}/`,\n          query: location.query,\n        });\n        addErrorMessage(t('Widget not found'));\n      }\n    }\n  }\n\n  checkStateRoute() {\n    const {organization, params} = this.props;\n    const {dashboardId} = params;\n\n    const dashboardDetailsRoute = `/organizations/${organization.slug}/dashboard/${dashboardId}/`;\n\n    if (location.pathname === dashboardDetailsRoute && !!this.state.widgetToBeUpdated) {\n      this.onSetWidgetToBeUpdated(undefined);\n    }\n  }\n\n  updateModifiedDashboard(dashboardState: DashboardState) {\n    const {dashboard} = this.props;\n    switch (dashboardState) {\n      case DashboardState.PREVIEW:\n      case DashboardState.CREATE:\n      case DashboardState.EDIT:\n        return cloneDashboard(dashboard);\n      default: {\n        return null;\n      }\n    }\n  }\n\n  get isPreview() {\n    const {dashboardState} = this.state;\n    return DashboardState.PREVIEW === dashboardState;\n  }\n\n  get isEditing() {\n    const {dashboardState} = this.state;\n    return [\n      DashboardState.EDIT,\n      DashboardState.CREATE,\n      DashboardState.PENDING_DELETE,\n    ].includes(dashboardState);\n  }\n\n  get isWidgetBuilderRouter() {\n    const {location, params, organization} = this.props;\n    const {dashboardId, widgetIndex} = params;\n\n    const widgetBuilderRoutes = [\n      `/organizations/${organization.slug}/dashboards/new/widget/new/`,\n      `/organizations/${organization.slug}/dashboard/${dashboardId}/widget/new/`,\n      `/organizations/${organization.slug}/dashboards/new/widget/${widgetIndex}/edit/`,\n      `/organizations/${organization.slug}/dashboard/${dashboardId}/widget/${widgetIndex}/edit/`,\n    ];\n\n    return widgetBuilderRoutes.includes(location.pathname);\n  }\n\n  get dashboardTitle() {\n    const {dashboard} = this.props;\n    const {modifiedDashboard} = this.state;\n    return modifiedDashboard ? modifiedDashboard.title : dashboard.title;\n  }\n\n  onEdit = () => {\n    const {dashboard} = this.props;\n\n    trackAnalyticsEvent({\n      eventKey: 'dashboards2.edit.start',\n      eventName: 'Dashboards2: Edit start',\n      organization_id: parseInt(this.props.organization.id, 10),\n    });\n\n    this.setState({\n      dashboardState: DashboardState.EDIT,\n      modifiedDashboard: cloneDashboard(dashboard),\n    });\n  };\n\n  onRouteLeave = () => {\n    const {dashboard} = this.props;\n    const {modifiedDashboard} = this.state;\n\n    if (\n      ![\n        DashboardState.VIEW,\n        DashboardState.PENDING_DELETE,\n        DashboardState.PREVIEW,\n      ].includes(this.state.dashboardState) &&\n      !isEqual(modifiedDashboard, dashboard)\n    ) {\n      return UNSAVED_MESSAGE;\n    }\n    return undefined;\n  };\n\n  onUnload = (event: BeforeUnloadEvent) => {\n    const {dashboard} = this.props;\n    const {modifiedDashboard} = this.state;\n\n    if (\n      [\n        DashboardState.VIEW,\n        DashboardState.PENDING_DELETE,\n        DashboardState.PREVIEW,\n      ].includes(this.state.dashboardState) ||\n      isEqual(modifiedDashboard, dashboard)\n    ) {\n      return;\n    }\n    event.preventDefault();\n    event.returnValue = UNSAVED_MESSAGE;\n  };\n\n  onDelete = (dashboard: State['modifiedDashboard']) => () => {\n    const {api, organization, location} = this.props;\n    if (!dashboard?.id) {\n      return;\n    }\n\n    const previousDashboardState = this.state.dashboardState;\n\n    this.setState({dashboardState: DashboardState.PENDING_DELETE}, () => {\n      deleteDashboard(api, organization.slug, dashboard.id)\n        .then(() => {\n          addSuccessMessage(t('Dashboard deleted'));\n          trackAnalyticsEvent({\n            eventKey: 'dashboards2.delete',\n            eventName: 'Dashboards2: Delete',\n            organization_id: parseInt(this.props.organization.id, 10),\n          });\n          browserHistory.replace({\n            pathname: `/organizations/${organization.slug}/dashboards/`,\n            query: location.query,\n          });\n        })\n        .catch(() => {\n          this.setState({\n            dashboardState: previousDashboardState,\n          });\n        });\n    });\n  };\n\n  onCancel = () => {\n    const {organization, dashboard, location, params} = this.props;\n    const {modifiedDashboard} = this.state;\n\n    let hasDashboardChanged = !isEqual(modifiedDashboard, dashboard);\n\n    // If a dashboard has every layout undefined, then ignore the layout field\n    // when checking equality because it is a dashboard from before the grid feature\n    const isLegacyLayout = dashboard.widgets.every(({layout}) => !defined(layout));\n    if (isLegacyLayout) {\n      hasDashboardChanged = !isEqual(\n        {\n          ...modifiedDashboard,\n          widgets: modifiedDashboard?.widgets.map(widget => omit(widget, 'layout')),\n        },\n        {...dashboard, widgets: dashboard.widgets.map(widget => omit(widget, 'layout'))}\n      );\n    }\n\n    // Don't confirm preview cancellation regardless of dashboard state\n    if (hasDashboardChanged && !this.isPreview) {\n      // Ignore no-alert here, so that the confirm on cancel matches onUnload & onRouteLeave\n      /* eslint no-alert:0 */\n      if (!confirm(UNSAVED_MESSAGE)) {\n        return;\n      }\n    }\n    if (params.dashboardId) {\n      trackAnalyticsEvent({\n        eventKey: 'dashboards2.edit.cancel',\n        eventName: 'Dashboards2: Edit cancel',\n        organization_id: parseInt(this.props.organization.id, 10),\n      });\n      this.setState({\n        dashboardState: DashboardState.VIEW,\n        modifiedDashboard: null,\n      });\n      return;\n    }\n    trackAnalyticsEvent({\n      eventKey: 'dashboards2.create.cancel',\n      eventName: 'Dashboards2: Create cancel',\n      organization_id: parseInt(this.props.organization.id, 10),\n    });\n    browserHistory.replace({\n      pathname: `/organizations/${organization.slug}/dashboards/`,\n      query: location.query,\n    });\n  };\n\n  handleUpdateWidgetList = (widgets: Widget[]) => {\n    const {organization, dashboard, api, onDashboardUpdate, location} = this.props;\n    const {modifiedDashboard} = this.state;\n\n    // Use the new widgets for calculating layout because widgets has\n    // the most up to date information in edit state\n    const currentLayout = getDashboardLayout(widgets);\n    const layoutColumnDepths = calculateColumnDepths(currentLayout);\n    const newModifiedDashboard = {\n      ...cloneDashboard(modifiedDashboard || dashboard),\n      widgets: assignDefaultLayout(widgets, layoutColumnDepths),\n    };\n    this.setState({\n      modifiedDashboard: newModifiedDashboard,\n      widgetLimitReached: widgets.length >= MAX_WIDGETS,\n    });\n    if (this.isEditing || this.isPreview) {\n      return;\n    }\n    updateDashboard(api, organization.slug, newModifiedDashboard).then(\n      (newDashboard: DashboardDetails) => {\n        if (onDashboardUpdate) {\n          onDashboardUpdate(newDashboard);\n          this.setState({\n            modifiedDashboard: null,\n          });\n        }\n        addSuccessMessage(t('Dashboard updated'));\n        if (dashboard && newDashboard.id !== dashboard.id) {\n          browserHistory.replace({\n            pathname: `/organizations/${organization.slug}/dashboard/${newDashboard.id}/`,\n            query: {\n              ...location.query,\n            },\n          });\n          return;\n        }\n      },\n      () => undefined\n    );\n  };\n\n  handleAddCustomWidget = (widget: Widget) => {\n    const {dashboard} = this.props;\n    const {modifiedDashboard} = this.state;\n    const newModifiedDashboard = modifiedDashboard || dashboard;\n    this.onUpdateWidget([...newModifiedDashboard.widgets, widget]);\n  };\n\n  onAddWidget = () => {\n    const {organization, dashboard} = this.props;\n    this.setState({\n      modifiedDashboard: cloneDashboard(dashboard),\n    });\n\n    openAddDashboardWidgetModal({\n      organization,\n      dashboard,\n      onAddLibraryWidget: (widgets: Widget[]) => this.handleUpdateWidgetList(widgets),\n      source: DashboardWidgetSource.LIBRARY,\n    });\n  };\n\n  onCommit = () => {\n    const {api, organization, location, dashboard, onDashboardUpdate} = this.props;\n    const {modifiedDashboard, dashboardState} = this.state;\n\n    switch (dashboardState) {\n      case DashboardState.PREVIEW:\n      case DashboardState.CREATE: {\n        if (modifiedDashboard) {\n          if (this.isPreview) {\n            trackAdvancedAnalyticsEvent('dashboards_manage.templates.add', {\n              organization,\n              dashboard_id: dashboard.id,\n              dashboard_title: dashboard.title,\n              was_previewed: true,\n            });\n          }\n          createDashboard(api, organization.slug, modifiedDashboard, this.isPreview).then(\n            (newDashboard: DashboardDetails) => {\n              addSuccessMessage(t('Dashboard created'));\n              trackAnalyticsEvent({\n                eventKey: 'dashboards2.create.complete',\n                eventName: 'Dashboards2: Create complete',\n                organization_id: parseInt(organization.id, 10),\n              });\n              this.setState({\n                dashboardState: DashboardState.VIEW,\n              });\n\n              // redirect to new dashboard\n              browserHistory.replace({\n                pathname: `/organizations/${organization.slug}/dashboard/${newDashboard.id}/`,\n                query: {\n                  ...location.query,\n                },\n              });\n            },\n            () => undefined\n          );\n        }\n        break;\n      }\n      case DashboardState.EDIT: {\n        // only update the dashboard if there are changes\n        if (modifiedDashboard) {\n          if (isEqual(dashboard, modifiedDashboard)) {\n            this.setState({\n              dashboardState: DashboardState.VIEW,\n              modifiedDashboard: null,\n            });\n            return;\n          }\n          updateDashboard(api, organization.slug, modifiedDashboard).then(\n            (newDashboard: DashboardDetails) => {\n              if (onDashboardUpdate) {\n                onDashboardUpdate(newDashboard);\n              }\n              addSuccessMessage(t('Dashboard updated'));\n              trackAnalyticsEvent({\n                eventKey: 'dashboards2.edit.complete',\n                eventName: 'Dashboards2: Edit complete',\n                organization_id: parseInt(organization.id, 10),\n              });\n              this.setState({\n                dashboardState: DashboardState.VIEW,\n                modifiedDashboard: null,\n              });\n\n              if (dashboard && newDashboard.id !== dashboard.id) {\n                browserHistory.replace({\n                  pathname: `/organizations/${organization.slug}/dashboard/${newDashboard.id}/`,\n                  query: {\n                    ...location.query,\n                  },\n                });\n                return;\n              }\n            },\n            () => undefined\n          );\n\n          return;\n        }\n        this.setState({\n          dashboardState: DashboardState.VIEW,\n          modifiedDashboard: null,\n        });\n        break;\n      }\n      case DashboardState.VIEW:\n      default: {\n        this.setState({\n          dashboardState: DashboardState.VIEW,\n          modifiedDashboard: null,\n        });\n        break;\n      }\n    }\n  };\n\n  setModifiedDashboard = (dashboard: DashboardDetails) => {\n    this.setState({\n      modifiedDashboard: dashboard,\n    });\n  };\n\n  onSetWidgetToBeUpdated = (widget?: Widget) => {\n    this.setState({widgetToBeUpdated: widget});\n  };\n\n  onUpdateWidget = (widgets: Widget[]) => {\n    this.setState((state: State) => ({\n      ...state,\n      widgetToBeUpdated: undefined,\n      widgetLimitReached: widgets.length >= MAX_WIDGETS,\n      modifiedDashboard: {\n        ...(state.modifiedDashboard || this.props.dashboard),\n        widgets,\n      },\n    }));\n  };\n\n  renderWidgetBuilder(dashboard: DashboardDetails) {\n    const {children} = this.props;\n    const {modifiedDashboard, widgetToBeUpdated} = this.state;\n\n    return isValidElement(children)\n      ? cloneElement(children, {\n          dashboard: modifiedDashboard ?? dashboard,\n          onSave: this.isEditing ? this.onUpdateWidget : this.handleUpdateWidgetList,\n          widget: widgetToBeUpdated,\n        })\n      : children;\n  }\n\n  renderDefaultDashboardDetail() {\n    const {organization, dashboard, dashboards, params, router, location} = this.props;\n    const {modifiedDashboard, dashboardState, widgetLimitReached} = this.state;\n    const {dashboardId} = params;\n\n    return (\n      <PageFiltersContainer\n        skipLoadLastUsed={organization.features.includes('global-views')}\n        defaultSelection={{\n          datetime: {\n            start: null,\n            end: null,\n            utc: false,\n            period: DEFAULT_STATS_PERIOD,\n          },\n        }}\n      >\n        <PageContent>\n          <NoProjectMessage organization={organization}>\n            <StyledPageHeader>\n              <StyledTitle>\n                <DashboardTitle\n                  dashboard={modifiedDashboard ?? dashboard}\n                  onUpdate={this.setModifiedDashboard}\n                  isEditing={this.isEditing}\n                />\n              </StyledTitle>\n              <Controls\n                organization={organization}\n                dashboards={dashboards}\n                onEdit={this.onEdit}\n                onCancel={this.onCancel}\n                onCommit={this.onCommit}\n                onAddWidget={this.onAddWidget}\n                onDelete={this.onDelete(dashboard)}\n                dashboardState={dashboardState}\n                widgetLimitReached={widgetLimitReached}\n              />\n            </StyledPageHeader>\n            <HookHeader organization={organization} />\n            <Dashboard\n              paramDashboardId={dashboardId}\n              dashboard={modifiedDashboard ?? dashboard}\n              organization={organization}\n              isEditing={this.isEditing}\n              widgetLimitReached={widgetLimitReached}\n              onUpdate={this.onUpdateWidget}\n              onSetWidgetToBeUpdated={this.onSetWidgetToBeUpdated}\n              handleUpdateWidgetList={this.handleUpdateWidgetList}\n              handleAddCustomWidget={this.handleAddCustomWidget}\n              isPreview={this.isPreview}\n              router={router}\n              location={location}\n            />\n          </NoProjectMessage>\n        </PageContent>\n      </PageFiltersContainer>\n    );\n  }\n\n  getBreadcrumbLabel() {\n    const {dashboardState} = this.state;\n\n    let label = this.dashboardTitle;\n    if (dashboardState === DashboardState.CREATE) {\n      label = t('Create Dashboard');\n    } else if (this.isPreview) {\n      label = t('Preview Dashboard');\n    }\n    return label;\n  }\n\n  renderDashboardDetail() {\n    const {organization, dashboard, dashboards, params, router, location, newWidget} =\n      this.props;\n    const {modifiedDashboard, dashboardState, widgetLimitReached} = this.state;\n    const {dashboardId} = params;\n\n    return (\n      <SentryDocumentTitle title={dashboard.title} orgSlug={organization.slug}>\n        <PageFiltersContainer\n          skipLoadLastUsed={organization.features.includes('global-views')}\n          defaultSelection={{\n            datetime: {\n              start: null,\n              end: null,\n              utc: false,\n              period: DEFAULT_STATS_PERIOD,\n            },\n          }}\n        >\n          <StyledPageContent>\n            <NoProjectMessage organization={organization}>\n              <Layout.Header>\n                <Layout.HeaderContent>\n                  <Breadcrumbs\n                    crumbs={[\n                      {\n                        label: t('Dashboards'),\n                        to: `/organizations/${organization.slug}/dashboards/`,\n                      },\n                      {\n                        label: this.getBreadcrumbLabel(),\n                      },\n                    ]}\n                  />\n                  <Layout.Title>\n                    <DashboardTitle\n                      dashboard={modifiedDashboard ?? dashboard}\n                      onUpdate={this.setModifiedDashboard}\n                      isEditing={this.isEditing}\n                    />\n                  </Layout.Title>\n                </Layout.HeaderContent>\n                <Layout.HeaderActions>\n                  <Controls\n                    organization={organization}\n                    dashboards={dashboards}\n                    onEdit={this.onEdit}\n                    onCancel={this.onCancel}\n                    onCommit={this.onCommit}\n                    onAddWidget={this.onAddWidget}\n                    onDelete={this.onDelete(dashboard)}\n                    dashboardState={dashboardState}\n                    widgetLimitReached={widgetLimitReached}\n                  />\n                </Layout.HeaderActions>\n              </Layout.Header>\n              <Layout.Body>\n                <Layout.Main fullWidth>\n                  <Dashboard\n                    paramDashboardId={dashboardId}\n                    dashboard={modifiedDashboard ?? dashboard}\n                    organization={organization}\n                    isEditing={this.isEditing}\n                    widgetLimitReached={widgetLimitReached}\n                    onUpdate={this.onUpdateWidget}\n                    handleUpdateWidgetList={this.handleUpdateWidgetList}\n                    handleAddCustomWidget={this.handleAddCustomWidget}\n                    onSetWidgetToBeUpdated={this.onSetWidgetToBeUpdated}\n                    router={router}\n                    location={location}\n                    newWidget={newWidget}\n                    isPreview={this.isPreview}\n                  />\n                </Layout.Main>\n              </Layout.Body>\n            </NoProjectMessage>\n          </StyledPageContent>\n        </PageFiltersContainer>\n      </SentryDocumentTitle>\n    );\n  }\n\n  render() {\n    const {organization, dashboard} = this.props;\n\n    if (this.isWidgetBuilderRouter) {\n      return this.renderWidgetBuilder(dashboard);\n    }\n\n    if (organization.features.includes('dashboards-edit')) {\n      return this.renderDashboardDetail();\n    }\n\n    return this.renderDefaultDashboardDetail();\n  }\n}\n\nconst StyledPageHeader = styled('div')`\n  display: grid;\n  grid-template-columns: minmax(0, 1fr);\n  grid-row-gap: ${space(2)};\n  align-items: center;\n  margin-bottom: ${space(2)};\n\n  @media (min-width: ${p => p.theme.breakpoints[1]}) {\n    grid-template-columns: minmax(0, 1fr) max-content;\n    grid-column-gap: ${space(2)};\n    height: 40px;\n  }\n`;\n\nconst StyledTitle = styled(Layout.Title)`\n  margin-top: 0;\n`;\n\nconst StyledPageContent = styled(PageContent)`\n  padding: 0;\n`;\n\nexport default withApi(withOrganization(DashboardDetail));\n"],"names":["Controls","organization","dashboardState","dashboards","widgetLimitReached","onEdit","onCommit","onDelete","onCancel","onAddWidget","renderCancelButton","label","t","onClick","e","preventDefault","DashboardState","includes","StyledButtonBar","gap","priority","message","onConfirm","disabled","length","DashboardEditFeature","hasFeature","icon","features","title","tct","maxWidgets","MAX_WIDGETS","isCircled","trackAdvancedAnalyticsEvent","children","noFeatureMessage","hookName","renderDisabled","p","body","hideHelpToggle","featureName","ButtonBar","theme","breakpoints","space","DashboardTitle","dashboard","isEditing","onUpdate","isDisabled","value","onChange","newTitle","errorMessage","autoSelect","UNSAVED_MESSAGE","HookHeader","HookOrDefault","DashboardDetail","Component","this","props","initialState","modifiedDashboard","updateModifiedDashboard","widgets","trackAnalyticsEvent","eventKey","eventName","organization_id","parseInt","id","setState","cloneDashboard","state","isEqual","event","returnValue","api","location","previousDashboardState","deleteDashboard","slug","then","addSuccessMessage","browserHistory","pathname","query","catch","params","hasDashboardChanged","every","layout","defined","map","widget","omit","isPreview","confirm","dashboardId","onDashboardUpdate","currentLayout","getDashboardLayout","layoutColumnDepths","calculateColumnDepths","newModifiedDashboard","assignDefaultLayout","updateDashboard","newDashboard","onUpdateWidget","openAddDashboardWidgetModal","onAddLibraryWidget","handleUpdateWidgetList","source","DashboardWidgetSource","dashboard_id","dashboard_title","was_previewed","createDashboard","widgetToBeUpdated","undefined","componentDidMount","route","router","checkStateRoute","setRouteLeaveHook","onRouteLeave","window","addEventListener","onUnload","checkIfShouldMountWidgetViewerModal","componentDidUpdate","prevProps","componentWillUnmount","removeEventListener","widgetId","isWidgetViewerPath","find","String","openWidgetViewerModal","onClose","Object","values","WidgetViewerQueryField","push","replace","nextWidget","updateIndex","indexOf","nextWidgetsList","cloneDeep","addErrorMessage","dashboardDetailsRoute","onSetWidgetToBeUpdated","widgetIndex","renderWidgetBuilder","isValidElement","cloneElement","onSave","renderDefaultDashboardDetail","skipLoadLastUsed","defaultSelection","datetime","start","end","utc","period","DEFAULT_STATS_PERIOD","StyledPageHeader","StyledTitle","setModifiedDashboard","paramDashboardId","handleAddCustomWidget","getBreadcrumbLabel","dashboardTitle","renderDashboardDetail","newWidget","orgSlug","StyledPageContent","crumbs","to","fullWidth","render","isWidgetBuilderRouter","Layout","PageContent","withApi","withOrganization"],"sourceRoot":""}