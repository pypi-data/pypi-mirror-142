{"version":3,"file":"chunks/app_views_performance_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"+fAMA,MAAMA,EAAa,wCAOZC,EAAqBC,EAAuBC,IACjDC,EAAAA,EAAAA,GAAoD,CAClDC,KAAM,kCAGGC,EAAcH,EAAkBI,SAEhCC,EAAqB,IAM5B,IAN6B,SACjCC,EADiC,cAEjCC,GAII,EACJ,MAAMC,EAAkD,kBAAlBD,GAC/BE,EAAcC,IAAkBC,EAAAA,EAAAA,UACrCH,EAAyBD,EAAqD,UAArCK,EAAAA,EAAAA,QAAqBf,IAOhE,OACE,QAACC,EAAD,CAAqBe,MAAO,CAACJ,aAAAA,EAAcK,cAL7C,SAAuBD,GACrBH,EAAeG,GACfD,EAAAA,EAAAA,QAAqBf,EAAYgB,EAAQ,OAAS,WAGlD,SACGP,KAlBMD,EAAAA,YAAAA,qBAuBN,MAAMU,EAAuBhB,G,kHClC7B,SAASE,EAAkCe,GAKhD,MAAM,OACJC,GAAS,EADL,aAEJC,EAAgB,mBAAkBF,EAAQd,+CAFtC,KAGJA,GACEc,EAEEG,EAAUC,EAAAA,mBAA6CC,GAY7D,OAVAF,EAAQG,YAAcpB,EAUf,CAACiB,EAAQI,SARhB,WACE,MAAMC,EAAUJ,EAAAA,WAAiBD,GACjC,IAAKK,GAAWP,EACd,MAAM,IAAIQ,MAAMP,GAElB,OAAOM,GAG6BL,K,kaCnBxC,SAASO,EAAT,GAA+D,IAAjC,aAACC,EAAD,SAAerB,GAAkB,EAS7D,OACE,QAAC,IAAD,CACEsB,SAAS,oCACTC,SAAU,CAAC,oBACXF,aAAcA,EACdG,eAbJ,WACE,OACE,QAAC,KAAD,WACE,QAAC,IAAD,CAAOC,KAAK,UAAZ,UAAuBC,EAAAA,EAAAA,GAAE,8CAM7B,UAME,QAAC,KAAD,UAAqB1B,MAhBlBoB,EAAAA,YAAAA,uBAqBT,SAAeO,EAAAA,EAAAA,GAAiBP","sources":["webpack:///./app/utils/performance/contexts/metricsEnhancedSetting.tsx","webpack:///./app/utils/performance/contexts/utils.tsx","webpack:///./app/views/performance/index.tsx"],"sourcesContent":["import {ReactNode, useState} from 'react';\n\nimport localStorage from 'sentry/utils/localStorage';\n\nimport {createDefinedContext} from './utils';\n\nconst storageKey = 'performance.metrics-enhanced-setting';\n\ninterface MetricsEnhancedSettingContext {\n  isMEPEnabled: boolean;\n  setMEPEnabled: (value: boolean) => void;\n}\n\nconst [_MEPSettingProvider, _useMEPSettingContext, MEPSettingContext] =\n  createDefinedContext<MetricsEnhancedSettingContext>({\n    name: 'MetricsEnhancedSettingContext',\n  });\n\nexport const MEPConsumer = MEPSettingContext.Consumer;\n\nexport const MEPSettingProvider = ({\n  children,\n  _isMEPEnabled,\n}: {\n  children: ReactNode;\n  _isMEPEnabled?: boolean;\n}) => {\n  const isControlledMEPEnabled = typeof _isMEPEnabled === 'boolean';\n  const [isMEPEnabled, _setMEPEnabled] = useState<boolean>(\n    isControlledMEPEnabled ? _isMEPEnabled : localStorage.getItem(storageKey) !== 'false'\n  );\n\n  function setMEPEnabled(value: boolean) {\n    _setMEPEnabled(value);\n    localStorage.setItem(storageKey, value ? 'true' : 'false');\n  }\n  return (\n    <_MEPSettingProvider value={{isMEPEnabled, setMEPEnabled}}>\n      {children}\n    </_MEPSettingProvider>\n  );\n};\n\nexport const useMEPSettingContext = _useMEPSettingContext;\n","import * as React from 'react';\n\ntype CreateContextReturn<T> = [React.Provider<T>, () => T, React.Context<T>];\n/*\n * Creates provider, context and useContext hook, guarding against calling useContext without a provider.\n * [0]: https://github.com/chakra-ui/chakra-ui/blob/c0f9c287df0397e2aa9bd90eb3d5c2f2c08aa0b1/packages/utils/src/react-helpers.ts#L27\n *\n * Renamed to createDefinedContext to not conflate with React context.\n */\nexport function createDefinedContext<ContextType>(options: {\n  name: string;\n  errorMessage?: string;\n  strict?: boolean;\n}) {\n  const {\n    strict = true,\n    errorMessage = `useContext for \"${options.name}\" must be inside a Provider with a value`,\n    name,\n  } = options;\n\n  const Context = React.createContext<ContextType | undefined>(undefined);\n\n  Context.displayName = name;\n\n  function useContext() {\n    const context = React.useContext(Context);\n    if (!context && strict) {\n      throw new Error(errorMessage);\n    }\n    return context;\n  }\n\n  return [Context.Provider, useContext, Context] as CreateContextReturn<ContextType>;\n}\n","import Feature from 'sentry/components/acl/feature';\nimport Alert from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\nimport {PageContent} from 'sentry/styles/organization';\nimport {Organization} from 'sentry/types';\nimport {MEPSettingProvider} from 'sentry/utils/performance/contexts/metricsEnhancedSetting';\nimport withOrganization from 'sentry/utils/withOrganization';\n\ntype Props = {\n  children: React.ReactChildren;\n  organization: Organization;\n};\n\nfunction PerformanceContainer({organization, children}: Props) {\n  function renderNoAccess() {\n    return (\n      <PageContent>\n        <Alert type=\"warning\">{t(\"You don't have access to this feature\")}</Alert>\n      </PageContent>\n    );\n  }\n\n  return (\n    <Feature\n      hookName=\"feature-disabled:performance-page\"\n      features={['performance-view']}\n      organization={organization}\n      renderDisabled={renderNoAccess}\n    >\n      <MEPSettingProvider>{children}</MEPSettingProvider>\n    </Feature>\n  );\n}\n\nexport default withOrganization(PerformanceContainer);\n"],"names":["storageKey","_MEPSettingProvider","_useMEPSettingContext","MEPSettingContext","createDefinedContext","name","MEPConsumer","Consumer","MEPSettingProvider","children","_isMEPEnabled","isControlledMEPEnabled","isMEPEnabled","_setMEPEnabled","useState","localStorage","value","setMEPEnabled","useMEPSettingContext","options","strict","errorMessage","Context","React","undefined","displayName","Provider","context","Error","PerformanceContainer","organization","hookName","features","renderDisabled","type","t","withOrganization"],"sourceRoot":""}