{"version":3,"file":"chunks/app_views_organizationIntegrations_integrationDetailedView_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/organizationIntegrations/addIntegration.tsx","webpack:///./app/views/organizationIntegrations/addIntegrationButton.tsx","webpack:///./app/views/organizationIntegrations/installedIntegration.tsx","webpack:///./app/views/organizationIntegrations/integrationDetailedView.tsx","webpack:///./app/views/organizationIntegrations/integrationItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport * as qs from 'query-string';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {t} from 'sentry/locale';\nimport {IntegrationProvider, IntegrationWithConfig, Organization} from 'sentry/types';\nimport {trackIntegrationAnalytics} from 'sentry/utils/integrationUtil';\n\ntype Props = {\n  children: (\n    openDialog: (urlParams?: {[key: string]: string}) => void\n  ) => React.ReactNode;\n  onInstall: (data: IntegrationWithConfig) => void;\n  organization: Organization;\n  provider: IntegrationProvider;\n  account?: string; // for analytics\n  analyticsParams?: {\n    already_installed: boolean;\n    view:\n      | 'integrations_directory_integration_detail'\n      | 'integrations_directory'\n      | 'onboarding'\n      | 'project_creation';\n  };\n  modalParams?: {[key: string]: string};\n};\n\nexport default class AddIntegration extends React.Component<Props> {\n  componentDidMount() {\n    window.addEventListener('message', this.didReceiveMessage);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('message', this.didReceiveMessage);\n    this.dialog && this.dialog.close();\n  }\n\n  dialog: Window | null = null;\n\n  computeCenteredWindow(width: number, height: number) {\n    // Taken from: https://stackoverflow.com/questions/4068373/center-a-popup-window-on-screen\n    const screenLeft =\n      window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n\n    const screenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n\n    const innerWidth = window.innerWidth\n      ? window.innerWidth\n      : document.documentElement.clientWidth\n      ? document.documentElement.clientWidth\n      : screen.width;\n\n    const innerHeight = window.innerHeight\n      ? window.innerHeight\n      : document.documentElement.clientHeight\n      ? document.documentElement.clientHeight\n      : screen.height;\n\n    const left = innerWidth / 2 - width / 2 + screenLeft;\n    const top = innerHeight / 2 - height / 2 + screenTop;\n\n    return {left, top};\n  }\n\n  openDialog = (urlParams?: {[key: string]: string}) => {\n    const {account, analyticsParams, modalParams, organization, provider} = this.props;\n\n    trackIntegrationAnalytics('integrations.installation_start', {\n      integration: provider.key,\n      integration_type: 'first_party',\n      organization,\n      ...analyticsParams,\n    });\n    const name = 'sentryAddIntegration';\n    const {url, width, height} = provider.setupDialog;\n    const {left, top} = this.computeCenteredWindow(width, height);\n\n    let query: {[key: string]: string} = {...urlParams};\n\n    if (account) {\n      query.account = account;\n    }\n\n    if (modalParams) {\n      query = {...query, ...modalParams};\n    }\n\n    const installUrl = `${url}?${qs.stringify(query)}`;\n    const opts = `scrollbars=yes,width=${width},height=${height},top=${top},left=${left}`;\n\n    this.dialog = window.open(installUrl, name, opts);\n    this.dialog && this.dialog.focus();\n  };\n\n  didReceiveMessage = (message: MessageEvent) => {\n    const {analyticsParams, onInstall, organization, provider} = this.props;\n\n    if (message.origin !== document.location.origin) {\n      return;\n    }\n\n    if (message.source !== this.dialog) {\n      return;\n    }\n\n    const {success, data} = message.data;\n    this.dialog = null;\n\n    if (!success) {\n      addErrorMessage(data.error);\n      return;\n    }\n\n    if (!data) {\n      return;\n    }\n    trackIntegrationAnalytics('integrations.installation_complete', {\n      integration: provider.key,\n      integration_type: 'first_party',\n      organization,\n      ...analyticsParams,\n    });\n    addSuccessMessage(t('%s added', provider.name));\n    onInstall(data);\n  };\n\n  render() {\n    const {children} = this.props;\n\n    return children(this.openDialog);\n  }\n}\n","import * as React from 'react';\n\nimport Button, {ButtonPropsWithoutAriaLabel} from 'sentry/components/button';\nimport Tooltip from 'sentry/components/tooltip';\nimport {t} from 'sentry/locale';\nimport {IntegrationWithConfig} from 'sentry/types';\n\nimport AddIntegration from './addIntegration';\n\ninterface AddIntegrationButtonProps\n  extends Omit<ButtonPropsWithoutAriaLabel, 'children'>,\n    Pick<\n      React.ComponentProps<typeof AddIntegration>,\n      'provider' | 'organization' | 'analyticsParams' | 'modalParams'\n    > {\n  onAddIntegration: (data: IntegrationWithConfig) => void;\n  buttonText?: string;\n  reinstall?: boolean;\n}\n\nexport default class AddIntegrationButton extends React.Component<AddIntegrationButtonProps> {\n  render() {\n    const {\n      provider,\n      buttonText,\n      onAddIntegration,\n      organization,\n      reinstall,\n      analyticsParams,\n      modalParams,\n      ...buttonProps\n    } = this.props;\n\n    const label =\n      buttonText || t(reinstall ? 'Enable' : 'Add %s', provider.metadata.noun);\n\n    return (\n      <Tooltip\n        disabled={provider.canAdd}\n        title={`Integration cannot be added on Sentry. Enable this integration via the ${provider.name} instance.`}\n      >\n        <AddIntegration\n          provider={provider}\n          onInstall={onAddIntegration}\n          organization={organization}\n          analyticsParams={analyticsParams}\n          modalParams={modalParams}\n        >\n          {onClick => (\n            <Button\n              disabled={!provider.canAdd}\n              {...buttonProps}\n              onClick={() => onClick()}\n              aria-label={t('Add integration')}\n            >\n              {label}\n            </Button>\n          )}\n        </AddIntegration>\n      </Tooltip>\n    );\n  }\n}\n","import * as React from 'react';\nimport {useTheme} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport Access from 'sentry/components/acl/access';\nimport Alert from 'sentry/components/alert';\nimport Button from 'sentry/components/button';\nimport CircleIndicator from 'sentry/components/circleIndicator';\nimport Confirm from 'sentry/components/confirm';\nimport Tooltip from 'sentry/components/tooltip';\nimport {IconDelete, IconFlag, IconSettings, IconWarning} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Integration, IntegrationProvider, ObjectStatus, Organization} from 'sentry/types';\nimport {IntegrationAnalyticsKey} from 'sentry/utils/analytics/integrationAnalyticsEvents';\n\nimport AddIntegrationButton from './addIntegrationButton';\nimport IntegrationItem from './integrationItem';\n\nexport type Props = {\n  integration: Integration;\n  onDisable: (integration: Integration) => void;\n  onRemove: (integration: Integration) => void;\n  organization: Organization;\n  provider: IntegrationProvider;\n  trackIntegrationAnalytics: (eventKey: IntegrationAnalyticsKey) => void; // analytics callback\n  className?: string;\n  requiresUpgrade?: boolean;\n};\n\nexport default class InstalledIntegration extends React.Component<Props> {\n  handleUninstallClick = () => {\n    this.props.trackIntegrationAnalytics('integrations.uninstall_clicked');\n  };\n\n  getRemovalBodyAndText(aspects: Integration['provider']['aspects']) {\n    if (aspects && aspects.removal_dialog) {\n      return {\n        body: aspects.removal_dialog.body,\n        actionText: aspects.removal_dialog.actionText,\n      };\n    }\n    return {\n      body: t(\n        'Deleting this integration will remove any project associated data. This action cannot be undone. Are you sure you want to delete this integration?'\n      ),\n      actionText: t('Delete'),\n    };\n  }\n\n  handleRemove(integration: Integration) {\n    this.props.onRemove(integration);\n    this.props.trackIntegrationAnalytics('integrations.uninstall_completed');\n  }\n\n  get integrationStatus() {\n    const {integration} = this.props;\n    // there are multiple status fields for an integration we consider\n    const statusList = [integration.status, integration.organizationIntegrationStatus];\n    const firstNotActive = statusList.find(s => s !== 'active');\n    // Active if everything is active, otherwise the first inactive status\n    return firstNotActive ?? 'active';\n  }\n\n  get removeConfirmProps() {\n    const {integration} = this.props;\n    const {body, actionText} = this.getRemovalBodyAndText(integration.provider.aspects);\n\n    const message = (\n      <React.Fragment>\n        <Alert type=\"error\" icon={<IconFlag size=\"md\" />}>\n          {t('Deleting this integration has consequences!')}\n        </Alert>\n        {body}\n      </React.Fragment>\n    );\n    return {\n      message,\n      confirmText: actionText,\n      onConfirm: () => this.handleRemove(integration),\n    };\n  }\n\n  get disableConfirmProps() {\n    const {integration} = this.props;\n    const {body, actionText} = integration.provider.aspects.disable_dialog || {};\n    const message = (\n      <React.Fragment>\n        <Alert type=\"error\" icon={<IconFlag size=\"md\" />}>\n          {t('This integration cannot be removed in Sentry')}\n        </Alert>\n        {body}\n      </React.Fragment>\n    );\n\n    return {\n      message,\n      confirmText: actionText,\n      onConfirm: () => this.props.onDisable(integration),\n    };\n  }\n\n  render() {\n    const {className, integration, organization, provider, requiresUpgrade} = this.props;\n\n    const removeConfirmProps =\n      this.integrationStatus === 'active' && integration.provider.canDisable\n        ? this.disableConfirmProps\n        : this.removeConfirmProps;\n\n    return (\n      <Access access={['org:integrations']}>\n        {({hasAccess}) => {\n          const disableAction = !(hasAccess && this.integrationStatus === 'active');\n          return (\n            <IntegrationFlex key={integration.id} className={className}>\n              <IntegrationItemBox>\n                <IntegrationItem integration={integration} />\n              </IntegrationItemBox>\n              <div>\n                <Tooltip\n                  disabled={hasAccess}\n                  position=\"left\"\n                  title={t(\n                    'You must be an organization owner, manager or admin to configure'\n                  )}\n                >\n                  {requiresUpgrade && (\n                    <AddIntegrationButton\n                      analyticsParams={{\n                        view: 'integrations_directory_integration_detail',\n                        already_installed: true,\n                      }}\n                      buttonText={t('Update Now')}\n                      data-test-id=\"integration-upgrade-button\"\n                      disabled={disableAction}\n                      icon={<IconWarning />}\n                      onAddIntegration={() => {}}\n                      organization={organization}\n                      provider={provider}\n                      priority=\"primary\"\n                      size=\"small\"\n                    />\n                  )}\n                  <StyledButton\n                    borderless\n                    icon={<IconSettings />}\n                    disabled={disableAction}\n                    to={`/settings/${organization.slug}/integrations/${provider.key}/${integration.id}/`}\n                    data-test-id=\"integration-configure-button\"\n                  >\n                    {t('Configure')}\n                  </StyledButton>\n                </Tooltip>\n              </div>\n              <div>\n                <Tooltip\n                  disabled={hasAccess}\n                  title={t(\n                    'You must be an organization owner, manager or admin to uninstall'\n                  )}\n                >\n                  <Confirm\n                    priority=\"danger\"\n                    onConfirming={this.handleUninstallClick}\n                    disabled={!hasAccess}\n                    {...removeConfirmProps}\n                  >\n                    <StyledButton\n                      disabled={!hasAccess}\n                      borderless\n                      icon={<IconDelete />}\n                      data-test-id=\"integration-remove-button\"\n                    >\n                      {t('Uninstall')}\n                    </StyledButton>\n                  </Confirm>\n                </Tooltip>\n              </div>\n              <StyledIntegrationStatus\n                status={this.integrationStatus}\n                // Let the hook handle the alert for disabled org integrations\n                hideTooltip={integration.organizationIntegrationStatus === 'disabled'}\n              />\n            </IntegrationFlex>\n          );\n        }}\n      </Access>\n    );\n  }\n}\n\nconst StyledButton = styled(Button)`\n  color: ${p => p.theme.gray300};\n`;\n\nconst IntegrationFlex = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst IntegrationItemBox = styled('div')`\n  flex: 1;\n`;\n\nconst IntegrationStatus = (\n  props: React.HTMLAttributes<HTMLDivElement> & {\n    status: ObjectStatus;\n    hideTooltip?: boolean;\n  }\n) => {\n  const theme = useTheme();\n  const {status, hideTooltip, ...p} = props;\n  const color = status === 'active' ? theme.success : theme.gray300;\n  const inner = (\n    <div {...p}>\n      <CircleIndicator size={6} color={color} />\n      <IntegrationStatusText data-test-id=\"integration-status\">{`${\n        status === 'active'\n          ? t('enabled')\n          : status === 'disabled'\n          ? t('disabled')\n          : t('pending deletion')\n      }`}</IntegrationStatusText>\n    </div>\n  );\n  return hideTooltip ? (\n    inner\n  ) : (\n    <Tooltip\n      title={\n        status === 'active'\n          ? t('This integration can be disabled by clicking the Uninstall button')\n          : status === 'disabled'\n          ? t('This integration has been disconnected from the external provider')\n          : t('This integration is pending deletion.')\n      }\n    >\n      {inner}\n    </Tooltip>\n  );\n};\n\nconst StyledIntegrationStatus = styled(IntegrationStatus)`\n  display: flex;\n  align-items: center;\n  color: ${p => p.theme.gray300};\n  font-weight: light;\n  text-transform: capitalize;\n  &:before {\n    content: '|';\n    color: ${p => p.theme.gray200};\n    margin-right: ${space(1)};\n    font-weight: normal;\n  }\n`;\n\nconst IntegrationStatusText = styled('div')`\n  margin: 0 ${space(0.75)} 0 ${space(0.5)};\n`;\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport {RequestOptions} from 'sentry/api';\nimport Alert from 'sentry/components/alert';\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport Button from 'sentry/components/button';\nimport HookOrDefault from 'sentry/components/hookOrDefault';\nimport {IconFlag, IconOpen, IconWarning} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Integration, IntegrationProvider, ObjectStatus} from 'sentry/types';\nimport {getAlertText} from 'sentry/utils/integrationUtil';\nimport withOrganization from 'sentry/utils/withOrganization';\n\nimport AbstractIntegrationDetailedView from './abstractIntegrationDetailedView';\nimport AddIntegrationButton from './addIntegrationButton';\nimport InstalledIntegration from './installedIntegration';\n\nconst FirstPartyIntegrationAlert = HookOrDefault({\n  hookName: 'component:first-party-integration-alert',\n  defaultComponent: () => null,\n});\n\nconst FirstPartyIntegrationAdditionalCTA = HookOrDefault({\n  hookName: 'component:first-party-integration-additional-cta',\n  defaultComponent: () => null,\n});\n\ntype State = {\n  configurations: Integration[];\n  information: {providers: IntegrationProvider[]};\n};\n\nclass IntegrationDetailedView extends AbstractIntegrationDetailedView<\n  AbstractIntegrationDetailedView['props'],\n  State & AbstractIntegrationDetailedView['state']\n> {\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {orgId, integrationSlug} = this.props.params;\n    return [\n      [\n        'information',\n        `/organizations/${orgId}/config/integrations/?provider_key=${integrationSlug}`,\n      ],\n      [\n        'configurations',\n        `/organizations/${orgId}/integrations/?provider_key=${integrationSlug}&includeConfig=0`,\n      ],\n    ];\n  }\n\n  get integrationType() {\n    return 'first_party' as const;\n  }\n\n  get provider() {\n    return this.state.information.providers[0];\n  }\n\n  get description() {\n    return this.metadata.description;\n  }\n\n  get author() {\n    return this.metadata.author;\n  }\n\n  get alerts() {\n    const provider = this.provider;\n    const metadata = this.metadata;\n    // The server response for integration installations includes old icon CSS classes\n    // We map those to the currently in use values to their react equivalents\n    // and fallback to IconFlag just in case.\n    const alerts = (metadata.aspects.alerts || []).map(item => {\n      switch (item.icon) {\n        case 'icon-warning':\n        case 'icon-warning-sm':\n          return {...item, icon: <IconWarning />};\n        default:\n          return {...item, icon: <IconFlag />};\n      }\n    });\n\n    if (!provider.canAdd && metadata.aspects.externalInstall) {\n      alerts.push({\n        type: 'warning',\n        icon: <IconOpen />,\n        text: metadata.aspects.externalInstall.noticeText,\n      });\n    }\n    return alerts;\n  }\n\n  get resourceLinks() {\n    const metadata = this.metadata;\n    return [\n      {url: metadata.source_url, title: 'View Source'},\n      {url: metadata.issue_url, title: 'Report Issue'},\n    ];\n  }\n\n  get metadata() {\n    return this.provider.metadata;\n  }\n\n  get isEnabled() {\n    return this.state.configurations.length > 0;\n  }\n\n  get installationStatus() {\n    const {configurations} = this.state;\n    if (\n      configurations.filter(i => i.organizationIntegrationStatus === 'disabled').length\n    ) {\n      return 'Disabled';\n    }\n    return configurations.length ? 'Installed' : 'Not Installed';\n  }\n\n  get integrationName() {\n    return this.provider.name;\n  }\n\n  get featureData() {\n    return this.metadata.features;\n  }\n\n  onInstall = (integration: Integration) => {\n    // send the user to the configure integration view for that integration\n    const {orgId} = this.props.params;\n    this.props.router.push(\n      `/settings/${orgId}/integrations/${integration.provider.key}/${integration.id}/`\n    );\n  };\n\n  onRemove = (integration: Integration) => {\n    const {orgId} = this.props.params;\n\n    const origIntegrations = [...this.state.configurations];\n\n    const integrations = this.state.configurations.map(i =>\n      i.id === integration.id\n        ? {...i, organizationIntegrationStatus: 'pending_deletion' as ObjectStatus}\n        : i\n    );\n\n    this.setState({configurations: integrations});\n\n    const options: RequestOptions = {\n      method: 'DELETE',\n      error: () => {\n        this.setState({configurations: origIntegrations});\n        addErrorMessage(t('Failed to remove Integration'));\n      },\n    };\n\n    this.api.request(`/organizations/${orgId}/integrations/${integration.id}/`, options);\n  };\n\n  onDisable = (integration: Integration) => {\n    let url: string;\n\n    const [domainName, orgName] = integration.domainName.split('/');\n    if (integration.accountType === 'User') {\n      url = `https://${domainName}/settings/installations/`;\n    } else {\n      url = `https://${domainName}/organizations/${orgName}/settings/installations/`;\n    }\n\n    window.open(url, '_blank');\n  };\n\n  handleExternalInstall = () => {\n    this.trackIntegrationAnalytics('integrations.installation_start');\n  };\n\n  renderAlert() {\n    return (\n      <FirstPartyIntegrationAlert\n        integrations={this.state.configurations ?? []}\n        hideCTA\n      />\n    );\n  }\n\n  renderAdditionalCTA() {\n    return (\n      <FirstPartyIntegrationAdditionalCTA\n        integrations={this.state.configurations ?? []}\n      />\n    );\n  }\n\n  renderTopButton(disabledFromFeatures: boolean, userHasAccess: boolean) {\n    const {organization} = this.props;\n    const provider = this.provider;\n    const {metadata} = provider;\n\n    const size = 'small' as const;\n    const priority = 'primary' as const;\n\n    const buttonProps = {\n      style: {marginBottom: space(1)},\n      size,\n      priority,\n      'data-test-id': 'install-button',\n      disabled: disabledFromFeatures,\n      organization,\n    };\n\n    if (!userHasAccess) {\n      return this.renderRequestIntegrationButton();\n    }\n\n    if (provider.canAdd) {\n      return (\n        <AddIntegrationButton\n          provider={provider}\n          onAddIntegration={this.onInstall}\n          analyticsParams={{\n            view: 'integrations_directory_integration_detail',\n            already_installed: this.installationStatus !== 'Not Installed',\n          }}\n          {...buttonProps}\n        />\n      );\n    }\n    if (metadata.aspects.externalInstall) {\n      return (\n        <Button\n          icon={<IconOpen />}\n          href={metadata.aspects.externalInstall.url}\n          onClick={this.handleExternalInstall}\n          external\n          {...buttonProps}\n        >\n          {metadata.aspects.externalInstall.buttonText}\n        </Button>\n      );\n    }\n\n    // This should never happen but we can't return undefined without some refactoring.\n    return <Fragment />;\n  }\n\n  renderConfigurations() {\n    const {configurations} = this.state;\n    const {organization} = this.props;\n    const provider = this.provider;\n\n    if (!configurations.length) {\n      return this.renderEmptyConfigurations();\n    }\n\n    const alertText = getAlertText(configurations);\n\n    return (\n      <Fragment>\n        {alertText && (\n          <Alert type=\"warning\" icon={<IconFlag size=\"sm\" />}>\n            {alertText}\n          </Alert>\n        )}\n        {configurations.map(integration => (\n          <InstallWrapper key={integration.id}>\n            <InstalledIntegration\n              organization={organization}\n              provider={provider}\n              integration={integration}\n              onRemove={this.onRemove}\n              onDisable={this.onDisable}\n              data-test-id={integration.id}\n              trackIntegrationAnalytics={this.trackIntegrationAnalytics}\n              requiresUpgrade={!!alertText}\n            />\n          </InstallWrapper>\n        ))}\n      </Fragment>\n    );\n  }\n}\n\nconst InstallWrapper = styled('div')`\n  padding: ${space(2)};\n  border: 1px solid ${p => p.theme.border};\n  border-bottom: none;\n  background-color: ${p => p.theme.background};\n\n  &:last-child {\n    border-bottom: 1px solid ${p => p.theme.border};\n  }\n`;\n\nexport default withOrganization(IntegrationDetailedView);\n","import {Component} from 'react';\nimport styled from '@emotion/styled';\n\nimport space from 'sentry/styles/space';\nimport {Integration} from 'sentry/types';\nimport IntegrationIcon from 'sentry/views/organizationIntegrations/integrationIcon';\n\ntype DefaultProps = {\n  compact: boolean;\n};\n\ntype Props = DefaultProps & {\n  integration: Integration;\n};\nexport default class IntegrationItem extends Component<Props> {\n  static defaultProps: DefaultProps = {\n    compact: false,\n  };\n\n  render() {\n    const {integration, compact} = this.props;\n    return (\n      <Flex>\n        <div>\n          <IntegrationIcon size={compact ? 22 : 32} integration={integration} />\n        </div>\n        <Labels compact={compact}>\n          <IntegrationName data-test-id=\"integration-name\">\n            {integration.name}\n          </IntegrationName>\n          <DomainName compact={compact}>{integration.domainName}</DomainName>\n        </Labels>\n      </Flex>\n    );\n  }\n}\n\nconst Flex = styled('div')`\n  display: flex;\n`;\ntype StyledProps = Pick<Props, 'compact'>;\nconst Labels = styled('div')<StyledProps>`\n  box-sizing: border-box;\n  display: flex;\n  ${p => (p.compact ? 'align-items: center;' : '')};\n  flex-direction: ${p => (p.compact ? 'row' : 'column')};\n  padding-left: ${space(1)};\n  min-width: 0;\n  justify-content: center;\n`;\n\nconst IntegrationName = styled('div')`\n  font-size: 1rem;\n`;\n\n// Not using the overflowEllipsis style import here\n// as it sets width 100% which causes layout issues in the\n// integration list.\nconst DomainName = styled('div')<StyledProps>`\n  color: ${p => (p.compact ? p.theme.gray200 : p.theme.gray400)};\n  margin-left: ${p => (p.compact ? space(1) : 'inherit')};\n  margin-top: ${p => (!p.compact ? space(0.25) : 'inherit')};\n  font-size: 0.875rem;\n  line-height: 1.2;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n"],"names":["AddIntegration","React","urlParams","account","analyticsParams","modalParams","organization","provider","this","props","trackIntegrationAnalytics","integration","key","integration_type","url","width","height","setupDialog","left","top","computeCenteredWindow","query","installUrl","qs","opts","dialog","window","open","focus","message","onInstall","origin","document","location","source","success","data","addSuccessMessage","t","name","addErrorMessage","error","componentDidMount","addEventListener","didReceiveMessage","componentWillUnmount","removeEventListener","close","screenLeft","undefined","screenX","screenTop","screenY","innerWidth","documentElement","clientWidth","screen","innerHeight","clientHeight","render","children","openDialog","AddIntegrationButton","buttonText","onAddIntegration","reinstall","buttonProps","label","metadata","noun","disabled","canAdd","title","onClick","InstalledIntegration","getRemovalBodyAndText","aspects","removal_dialog","body","actionText","handleRemove","onRemove","firstNotActive","status","organizationIntegrationStatus","find","s","type","icon","size","confirmText","onConfirm","disable_dialog","onDisable","className","requiresUpgrade","removeConfirmProps","integrationStatus","canDisable","disableConfirmProps","access","hasAccess","disableAction","IntegrationFlex","IntegrationItemBox","position","view","already_installed","priority","StyledButton","borderless","to","slug","id","onConfirming","handleUninstallClick","StyledIntegrationStatus","hideTooltip","Button","p","theme","gray300","IntegrationStatus","useTheme","color","inner","IntegrationStatusText","gray200","space","FirstPartyIntegrationAlert","HookOrDefault","hookName","defaultComponent","FirstPartyIntegrationAdditionalCTA","IntegrationDetailedView","AbstractIntegrationDetailedView","orgId","params","router","push","origIntegrations","state","configurations","integrations","map","i","setState","options","method","api","request","domainName","orgName","split","accountType","getEndpoints","integrationSlug","information","providers","description","author","alerts","item","externalInstall","text","noticeText","source_url","issue_url","length","filter","features","renderAlert","hideCTA","renderAdditionalCTA","renderTopButton","disabledFromFeatures","userHasAccess","style","marginBottom","installationStatus","href","handleExternalInstall","external","Fragment","renderRequestIntegrationButton","renderConfigurations","renderEmptyConfigurations","alertText","getAlertText","InstallWrapper","border","background","withOrganization","IntegrationItem","Component","compact","Flex","Labels","IntegrationName","DomainName","gray400"],"sourceRoot":""}