{"version":3,"file":"chunks/app_views_settings_organizationMembers_organizationMembersWrapper_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"4MAYA,QAZA,SACEA,EACAC,GAGQ,IAFRC,IAEQ,yDADRC,EACQ,uCACR,MAAMC,EAAY,GAAEJ,OAAeC,IAC7BI,EAAOF,EAAe,GAAEC,OAAcD,IAAgBC,EAE5D,OAAOF,EAAc,GAAEG,aAAkBA,I,0RCD5B,MAAMC,UAGXC,EAAAA,EACRC,WACE,MAAO,GAGTC,SACE,OACE,QAAC,IAAD,CAAqBC,MAAOC,KAAKH,WAAjC,SACGG,KAAKC,qBAXON,EAAAA,YAAAA,a,8qBCcrB,MAAMO,UAAmCP,EAAAA,EAAwB,sEAmDxCQ,GACrBH,KAAKI,UAASC,IAAS,CACrBC,YAAaD,EAAMC,YAAYC,QAAOC,GAAWA,EAAQL,KAAOA,WArDL,mCAwDxCA,GACrBH,KAAKI,UAASC,IAAS,CACrBI,eAAgBJ,EAAMI,eAAeF,QAAOC,GAAWA,EAAQL,KAAOA,WA1DX,mCA6DzC,CAACA,EAAYO,IACjCV,KAAKI,UAASC,IACZ,MAAMI,EAAiB,IAAIJ,EAAMI,gBAC3BE,EAAcF,EAAeG,WAAUJ,GAAWA,EAAQL,KAAOA,IAIvE,OAFAM,EAAeE,GAAe,IAAIF,EAAeE,MAAiBD,GAE3D,CAACD,eAAAA,QAnEZI,eACE,MAAM,MAACC,GAASd,KAAKe,MAAMC,OAE3B,MAAO,CACL,CAAC,iBAAmB,kBAAiBF,sBACrC,CAAC,cAAgB,kBAAiBA,uBAItCjB,WACE,MAAM,MAACiB,GAASd,KAAKe,MAAMC,OAC3B,OAAOC,EAAAA,EAAAA,IAAcC,EAAAA,EAAAA,GAAE,WAAYJ,GAAO,GAG3B,oBACf,OAAOK,SAASC,SAASC,SAAS,cAGlB,qBAChB,MAAM,aAACC,GAAgBtB,KAAKe,MAC5B,SAAKO,IAAiBA,EAAaC,SAG5BD,EAAaC,OAAOF,SAAS,gBAGhB,yBACpB,OAAOrB,KAAKwB,eAGC,kBACb,MAAM,YAAClB,GAAeN,KAAKK,MAI3B,OAAQC,GAAeA,EAAYmB,OAAS,GAAMzB,KAAK0B,mBAGzC,mBACd,MAAM,YAACpB,EAAD,eAAcG,GAAkBT,KAAKK,MAC3C,IAAIsB,EAAQrB,EAAYmB,OAOxB,OAHIzB,KAAK0B,qBACPC,GAASlB,EAAegB,QAEnBE,EAAQA,EAAMC,WAAa,KAuBpCC,aACE,MAAM,SAACC,GAAY9B,KAAKe,OAClB,YAACT,EAAD,eAAcG,GAAkBT,KAAKK,MAErC0B,GACJ,QAAC,KAAD,CACEC,SAAS,UACTC,KAAK,QACLC,QAAS,KACPC,EAAAA,EAAAA,wBAAuB,CACrBC,QAAS,KACPpC,KAAKqC,aAEPC,OAAQ,qBAGZ,eAAa,eACbC,MAAM,QAAC,IAAD,IAZR,UAcGrB,EAAAA,EAAAA,GAAE,oBAIP,OACE,QAAC,EAAAsB,SAAD,YACE,QAAC,IAAD,CAAoBzC,MAAM,UAAUgC,OAAQA,IAC3CD,IACCW,EAAAA,EAAAA,cAAaX,EAAU,CACrBxB,YAAAA,EACAG,eAAAA,EACAiC,sBAAuB1C,KAAK2C,oBAC5BC,sBAAuB5C,KAAK6C,oBAC5BC,sBAAuB9C,KAAK+C,oBAC5BrB,mBAAoB1B,KAAK0B,yBAOrC,SAAesB,EAAAA,EAAAA,GAAiB9C","sources":["webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/organizationMembers/organizationMembersWrapper.tsx"],"sourcesContent":["function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import * as React from 'react';\n\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {cloneElement, Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport {openInviteMembersModal} from 'sentry/actionCreators/modal';\nimport Button from 'sentry/components/button';\nimport {IconMail} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {Member, Organization} from 'sentry/types';\nimport routeTitleGen from 'sentry/utils/routeTitle';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport AsyncView from 'sentry/views/asyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\n\ntype Props = {\n  organization: Organization;\n  children?: any;\n} & RouteComponentProps<{orgId: string}, {}>;\n\ntype State = AsyncView['state'] & {\n  inviteRequests: Member[];\n};\n\nclass OrganizationMembersWrapper extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {orgId} = this.props.params;\n\n    return [\n      ['inviteRequests', `/organizations/${orgId}/invite-requests/`],\n      ['requestList', `/organizations/${orgId}/access-requests/`],\n    ];\n  }\n\n  getTitle() {\n    const {orgId} = this.props.params;\n    return routeTitleGen(t('Members'), orgId, false);\n  }\n\n  get onRequestsTab() {\n    return location.pathname.includes('/requests/');\n  }\n\n  get hasWriteAccess() {\n    const {organization} = this.props;\n    if (!organization || !organization.access) {\n      return false;\n    }\n    return organization.access.includes('member:write');\n  }\n\n  get showInviteRequests() {\n    return this.hasWriteAccess;\n  }\n\n  get showNavTabs() {\n    const {requestList} = this.state;\n\n    // show the requests tab if there are pending team requests,\n    // or if the user has access to approve or deny invite requests\n    return (requestList && requestList.length > 0) || this.showInviteRequests;\n  }\n\n  get requestCount() {\n    const {requestList, inviteRequests} = this.state;\n    let count = requestList.length;\n\n    // if the user can't see the invite requests panel,\n    // exclude those requests from the total count\n    if (this.showInviteRequests) {\n      count += inviteRequests.length;\n    }\n    return count ? count.toString() : null;\n  }\n\n  removeAccessRequest = (id: string) =>\n    this.setState(state => ({\n      requestList: state.requestList.filter(request => request.id !== id),\n    }));\n\n  removeInviteRequest = (id: string) =>\n    this.setState(state => ({\n      inviteRequests: state.inviteRequests.filter(request => request.id !== id),\n    }));\n\n  updateInviteRequest = (id: string, data: Partial<Member>) =>\n    this.setState(state => {\n      const inviteRequests = [...state.inviteRequests];\n      const inviteIndex = inviteRequests.findIndex(request => request.id === id);\n\n      inviteRequests[inviteIndex] = {...inviteRequests[inviteIndex], ...data};\n\n      return {inviteRequests};\n    });\n\n  renderBody() {\n    const {children} = this.props;\n    const {requestList, inviteRequests} = this.state;\n\n    const action = (\n      <Button\n        priority=\"primary\"\n        size=\"small\"\n        onClick={() =>\n          openInviteMembersModal({\n            onClose: () => {\n              this.fetchData();\n            },\n            source: 'members_settings',\n          })\n        }\n        data-test-id=\"email-invite\"\n        icon={<IconMail />}\n      >\n        {t('Invite Members')}\n      </Button>\n    );\n\n    return (\n      <Fragment>\n        <SettingsPageHeader title=\"Members\" action={action} />\n        {children &&\n          cloneElement(children, {\n            requestList,\n            inviteRequests,\n            onRemoveInviteRequest: this.removeInviteRequest,\n            onUpdateInviteRequest: this.updateInviteRequest,\n            onRemoveAccessRequest: this.removeAccessRequest,\n            showInviteRequests: this.showInviteRequests,\n          })}\n      </Fragment>\n    );\n  }\n}\n\nexport default withOrganization(OrganizationMembersWrapper);\n"],"names":["routeName","orgSlug","withSentry","projectSlug","tmplBase","tmpl","AsyncView","AsyncComponent","getTitle","render","title","this","renderComponent","OrganizationMembersWrapper","id","setState","state","requestList","filter","request","inviteRequests","data","inviteIndex","findIndex","getEndpoints","orgId","props","params","routeTitleGen","t","location","pathname","includes","organization","access","hasWriteAccess","length","showInviteRequests","count","toString","renderBody","children","action","priority","size","onClick","openInviteMembersModal","onClose","fetchData","source","icon","Fragment","cloneElement","onRemoveInviteRequest","removeInviteRequest","onUpdateInviteRequest","updateInviteRequest","onRemoveAccessRequest","removeAccessRequest","withOrganization"],"sourceRoot":""}