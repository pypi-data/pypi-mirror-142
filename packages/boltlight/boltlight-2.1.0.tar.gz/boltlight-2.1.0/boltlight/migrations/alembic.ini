# A generic, single database configuration.

[alembic]
# path to migration scripts
script_location = rootpackage:migrations

# template used to generate migration files
# file_template = %%(rev)s_%%(slug)s

# timezone to use when rendering the date
# within the migration file as well as the filename.
# string value is passed to dateutil.tz.gettz()
# leave blank for localtime
# timezone =

# max length of characters to apply to the
# "slug" field
# truncate_slug_length = 40

# set to 'true' to run the environment during
# the 'revision' command, regardless of autogenerate
# revision_environment = false

# set to 'true' to allow .pyc and .pyo files without
# a source .py file to be detected as revisions in the
# versions/ directory
# sourceless = false

# version location specification; this defaults
# to migrations/versions.  When using multiple version
# directories, initial revisions must be specified with --version-path
# version_locations = %(here)s/bar %(here)s/bat migrations/versions

# the output encoding used when revision files
# are written from script.py.mako
# output_encoding = utf-8

sqlalchemy.url = driver://user:pass@localhost/dbname

[post_write_hooks]
# post_write_hooks defines scripts or Python functions that are run
# on newly generated revision scripts.  See the documentation for further
# detail and examples

# format using "black" - use the console_scripts runner, against the "black" entrypoint
# hooks=black
# black.type=console_scripts
# black.entrypoint=black
# black.options=-l 79

# Logging configuration
[loggers]
keys = root,sqlalchemy,alembic,env

[handlers]
keys = console,boltlightfile,migrationsfile

[formatters]
keys = simple,verbose

[logger_root]
level = INFO
handlers = console,boltlightfile,migrationsfile
qualname =

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[logger_env]
level = INFO
handlers =
qualname = env_py

[handler_console]
class = StreamHandler
args = (sys.stdout,)
level = INFO
formatter = simple

[handler_boltlightfile]
class = logging.handlers.RotatingFileHandler
args = ('%(boltlightlogfilename)s', 'a')
kwargs = {'maxBytes': 1048576, 'backupCount': 7}
level = INFO
formatter = verbose

[handler_migrationsfile]
class = logging.handlers.RotatingFileHandler
args = ('%(migrationslogfilename)s', 'a')
kwargs = {'maxBytes': 1048576, 'backupCount': 7}
level = INFO
formatter = verbose

[formatter_simple]
format = %(asctime)s %(levelname).3s: %(message)s
datefmt = %d %b %H:%M:%S

[formatter_verbose]
format = [%(asctime)s] %(levelname).3s [%(name)s:%(lineno)s] %(message)s
datefmt = %Y-%m-%d %H:%M:%S %z
class=logging.Formatter
