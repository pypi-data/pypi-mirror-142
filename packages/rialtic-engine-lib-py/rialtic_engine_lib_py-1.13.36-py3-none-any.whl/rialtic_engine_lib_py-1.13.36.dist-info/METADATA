Metadata-Version: 2.1
Name: rialtic-engine-lib-py
Version: 1.13.36
Summary: Python Library for development of Rialtic Insight Engines
Home-page: https://rialtic.io
License: Apache-2.0
Keywords: rialtic,insight,engine,library
Author: Rialtic
Author-email: engines.data@rialtic.io
Requires-Python: >=3.7,<4.0
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Topic :: Software Development :: Libraries
Requires-Dist: deprecation (>2.0)
Requires-Dist: fhir.resources (>=6.1.0,<7.0.0)
Requires-Dist: insight-engine-schema-python (>=0.3,<0.4)
Requires-Dist: rialtic-data-dev-py (>=1.1,<2.0)
Requires-Dist: sphinx (>=4.1.2,<5.0.0)
Project-URL: Repository, https://github.com/rialtic-community/rialtic-engine-lib-py
Description-Content-Type: text/markdown

# Rialtic Engine Development Library (Python)

This repository contains common modules for developing Rialtic Insight Engines with Python.

## API Documentation (Sphinx)

The code in this repository is documented using [`sphinx`](https://www.sphinx-doc.org/en/master/) and
[`autodoc`](https://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html#module-sphinx.ext.autodoc). This
documentation can be generated locally. `autodoc` will generate basic documentation automatically from code, and
docstrings in the code can be used to add additional information to the generated documentation.

### Documentation Practices

#### Docstring Format

We use `sphinx.ext.napoleon`, which allows us to use a simpler, more concise format for docstrings
(popularized by NumPy and Google projects). See
the [NumPy documentation](https://numpydoc.readthedocs.io/en/latest/format.html#docstring-standard)
for an overview of how to use this style of docstrings.

**NOTE:** One main way that our docs differ from the standard described in the NumPy docs is with regard to
the `Returns` section. We do not need to specify return type in our docsâ€”we have the
`sphinx_autodoc_typehints` extension, which automatically reads return type from type annotations in code.

#### Docstring Guidelines

Any docstrings written will eventually need to be edited or rewritten. With this in mind, it is valuable for our
docstrings to be concise and minimal, providing only necessary information, to reduce the work required to maintain
these docs.

For simple methods and functions, the generated function signature docs may even be sufficient. In these cases a
docstring can consist of only a single line summary.

If you find yourself writing a very long complex docstring, consider whether the object being documented could use a
refactor, or needs to be simplified in some way.

### Generating HTML Documentation Locally

The generated documentation will be hosted somewhere accessible on the web, but can also be generated locally in several
formats including HTML and PDF. Follow the instructions below to generate HTML documentation locally:

1.  ```bash
    $ git clone git@github.com:rialtic-community/rialtic-engine-lib-py.git
    $ cd rialtic-engine-lib-py/docs
    $ make html
    ```
    
2. Open the following file in a browser
    ```bash

    rialtic-engine-lib-py/docs/_build/html/index.html
    ```

# Engine Data SDK


## Publishing to Nexus repository

This is likely to change quite a bit before it stabilizes, so we are 
keeping only one set of instructions as 
a source of truth.

For a step by step, please, refer to the instructions in the `README.md` in 
branch `release-makefile` in the schema repository.

[schema repository](https://github.com/rialtic-community/insight-engine-schema-python/blob/develop/README.md)

In addition to the environment variables that have to be defined (as explained in the link above), 
for this repository, we also have to define:

```shell
export APIKEY=...
export RIALTIC_REF_DB=demodb
export RIALTIC_DATA_ENV=local
```
