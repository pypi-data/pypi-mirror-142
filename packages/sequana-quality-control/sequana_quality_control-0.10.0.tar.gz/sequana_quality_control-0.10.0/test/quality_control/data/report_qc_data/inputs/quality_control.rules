##############################################################################
#
#  Copyright (c) 2016-2021 - Sequana Dev Team (https://sequana.readthedocs.io)
#
#  Distributed under the terms of the 3-clause BSD license.
#  The full license is in the LICENSE file, distributed with this software.
#
#  Website:       https://github.com/sequana/sequana
#  Website:       https://github.com/sequana/quality_control
#  Documentation: http://sequana.readthedocs.io
#  Documentation: https://github.com/sequana/quality_control/README.rst
##############################################################################
import glob
import os
import shutil
import subprocess


# Some sequana related tools
import sequana


from sequana_pipetools import PipelineManager
from sequana_pipetools import snaketools as sm

# This must be defined before the include
configfile: "config.yaml"

# The sequana pipeline manager
manager = PipelineManager("quality_control", config)


expected_output = []

# stats on raw data and optional fastac
expected_output += expand("{sample}/fastq_stats_samples/{sample}.json", sample=manager.samples)
if manager.config.fastqc.do_raw:
    expected_output += expand("{sample}/fastqc_raw/fastqc.done", sample=manager.samples)

# if we remove the phix
if manager.config.bwa_mem_phix.do:
    expected_output += expand("{sample}/fastq_stats_phix/{sample}.json", sample=manager.samples)
    if manager.config.fastqc.do_after_phix_removal:
        expected_output += expand("{sample}/fastqc_phix/fastqc.done", sample=manager.samples)


if manager.config.fastqc.do_after_adapter_removal:
    expected_output += expand("{sample}/fastqc_trimmed/fastqc.done", sample=manager.samples)

if manager.config.kraken.do:
    expected_output += expand("{sample}/kraken/kraken/kraken.html", sample=manager.samples)
    expected_output += expand("{sample}/kraken/kraken/kraken.json", sample=manager.samples)

rule pipeline:
    input: ".sequana/rulegraph.svg",
        expand("{sample}/summary_pipeline/{sample}.json", sample=manager.samples),
        expected_output


# Sanity checks ============================================================

if manager.config.cutadapt.tool_choice == "atropos":
    if manager.config.cutadapt.threads < 2:
        print("ERROR: when selecting atropos as the tool choice in "
              "the cutadapt section, you must set the number of thread "
                "to a value greater than one")
        raise Exception

if manager.config.kraken.do is True:
    if manager.config.kraken.databases in [[], "", None]:
        print("ERROR: you must provide a kraken database path " +
              " Check http://sequana.readthedocs.io/en/master/" +
              "applications.html#sequana-taxonomy")
        raise Exception


# FASTQC on input data set
if manager.config.fastqc.do_raw:
    rule fastqc_samples:
        input: manager.getrawdata()
        output:
            done="{sample}/fastqc_raw/fastqc.done"
        params:
            options=config['fastqc']["options"],
            working_directory="{sample}/fastqc_raw"
        threads:
            config["fastqc"]["threads"]
        log:
            "logs/{sample}/fastqc_raw.log"
        wrapper:
            "main/wrappers/fastqc"



# FASTQ stats on input data set
rule fastq_stat_samples:
    input: manager.getrawdata()
    output:
        json="{sample}/fastq_stats_samples/{sample}.json",
        gc="{sample}/fastq_stats_samples/{sample}_gc.png",
        boxplot="{sample}/fastq_stats_samples/{sample}_boxplot.png"
    params:
        max_reads=config['fastq_stats']['max_reads']
    wrapper:
        "main/wrappers/fastq_stats"



# Do we want to remove the Phix ?
if manager.config.bwa_mem_phix.do:
    __copy_ref__input = config["bwa_mem_phix"]["reference_file"]
    __copy_ref__output = "reference/" + os.path.basename(__copy_ref__input)

    rule copy_reference:
        input: __copy_ref__input
        output:
            ref=__copy_ref__output,
        shell:
            """
            cp {input} {output.ref}
            """

    # Mapping input / output
    rule bwa_index:
        input:
            reference=__copy_ref__output
        output:
            bwa_bwt=__copy_ref__output + ".bwt",
            fai=__copy_ref__output + ".fai"
        log:
            "reference/build.log"
        params:
            options="",
            index_algorithm='is'
        threads: 2
        wrapper:
            "main/wrappers/bwa/build"

    rule bwa:
        input:
            fastq=manager.getrawdata(),
            bwa_bwt=__copy_ref__output + ".bwt",
            fai=__copy_ref__output + ".fai",
            reference=__copy_ref__output
        output:
            sorted="{sample}/bwa/{sample}.sorted.bam",
        log:
            "{sample}/bwa/{sample}.log"
        params:
            options=config["bwa_mem_phix"]["options"],
            tmp_directory=config["bwa_mem_phix"]["tmp_directory"]
        threads: 2
        wrapper:
            "main/wrappers/bwa/align"


    __bwa_bam_to_fastq__input = "{sample}/bwa/{sample}.sorted.bam"

    if manager.paired is True:
        _params = {"sample": manager.sample}
        __bwa_bam_to_fastq__fastq_output = [
            "%(sample)s/bwa_bam_to_fastq/%(sample)s_R1_.unmapped.fastq.gz" % _params,
            "%(sample)s/bwa_bam_to_fastq/%(sample)s_R1_.mapped.fastq.gz" % _params,
            "%(sample)s/bwa_bam_to_fastq/%(sample)s_R2_.unmapped.fastq.gz" % _params,
            "%(sample)s/bwa_bam_to_fastq/%(sample)s_R2_.mapped.fastq.gz" % _params]
    else:
        __bwa_bam_to_fastq__fastq_output = [
            "%(sample)s/bwa_bam_to_fastq/%(sample)s_R1_.unmapped.fastq.gz" % {"sample":manager.sample},
            "%(sample)s/bwa_bam_to_fastq/%(sample)s_R1_.mapped.fastq.gz" % {"sample":manager.sample}]

    __bwa_bam_to_fastq__stats_output = "%s/bwa_bam_to_fastq/bwa_mem_stats.json" % manager.sample
    __bwa_bam_to_fastq__wkdir = "%s/bwa_bam_to_fastq" % manager.sample

    include: sm.modules['bwa_bam_to_fastq']

    # Run a FASTQC on the data without phix
    if manager.config.fastqc.do_after_phix_removal:
        __fastqc_phix__input_fastq = [x for x in __bwa_bam_to_fastq__fastq_output if "unmapped" not in x]
        rule fastqc_phix:
            input: __fastqc_phix__input_fastq
            output: 
                done="{sample}/fastqc_phix/fastqc.done"
            params:
                options=config['fastqc']["options"],
                working_directory="{sample}/fastqc_phix"
            threads:
                threads= config["fastqc"]["threads"],
            log:
                "logs/{sample}/fastqc_phix.log"
            wrapper:
                "main/wrappers/fastqc"



    rule fastq_stat_phix:
        input: __bwa_bam_to_fastq__fastq_output
        output:
            json="{sample}/fastq_stats_phix/{sample}.json",
            gc="{sample}/fastq_stats_phix/{sample}_gc.png",
            boxplot="{sample}/fastq_stats_phix/{sample}_boxplot.png"
        params:
            max_reads=config['fastq_stats']['max_reads']
        wrapper:
            "main/wrappers/fastq_stats"



valid_trimmer = ['cutadapt', 'atropos']
if manager.config.trimming.software_choice not in valid_trimmer:
    print(f"Invalid choice for trimming tool. Choose one in {valid_trimmer}")
    sys.exit(1)

# Perform the adapter removal and trimming
if manager.config['trimming']['do']:
    adapter_tool = manager.config.trimming.software_choice

    fwd = manager.config.cutadapt.fwd
    rev = manager.config.cutadapt.rev

    if adapter_tool in ["cutadapt", "atropos"]:
        adapter_tool = "cutadapt"
        if manager.config.bwa_mem_phix.do:
            __cutadapt__input_fastq = [x for x in __bwa_bam_to_fastq__fastq_output
                                       if "unmapped" in x]
            __cutadapt__output = [x.replace("bwa_bam_to_fastq",
                                  "cutadapt").replace("unmapped","cutadapt")
                                  for x in __cutadapt__input_fastq]
        else:
            # If the fix is not yet performed, __data__input is a wildcard
            # function so the output must be specified by hand
            __cutadapt__input_fastq = __data__input
            if manager.paired:
                __cutadapt__output = [
                    "{sample}/cutadapt/{sample}_R1_.cutadapt.fastq.gz",
                    "{sample}/cutadapt/{sample}_R2_.cutadapt.fastq.gz"]
            else:
                __cutadapt__output = [
                    "{sample}/cutadapt/{sample}_R1_.cutadapt.fastq.gz"]

        __cutadapt__wkdir = "%s/cutadapt" % manager.sample

        # Set the fwd and rev adapters
        __cutadapt__fwd = manager.config.cutadapt.fwd
        __cutadapt__rev = manager.config.cutadapt.rev

        __cutadapt__options = manager.config.cutadapt.options
        __cutadapt__mode = manager.config.cutadapt.mode
        __cutadapt__log = "%s/logs/cutadapt/cutadapt.txt" % manager.sample
        __cutadapt__sample = manager.sample
        include: sm.modules["cutadapt"]
    else:
        raise ValueError("trimming must be either cutadapt or atropos or skewer")

    # Now we can perform again a FastQC and FastQ stats
    if manager.config.fastqc.do_after_adapter_removal:
        rule fastqc_trimmed:
            input: __cutadapt__output
            output:
                done="{sample}/fastqc_trimmed/fastqc.done"
            params:
                options=config['fastqc']["options"],
                working_directory="{sample}/fastqc_phix"
            threads:
                config["fastqc"]["threads"]
            log:
                "logs/{sample}/fastqc_trimmed.log"
            wrapper:
                "main/wrappers/fastqc"


if manager.config.kraken.do:
    if manager.config['cutadapt'].do:
        # todo: handle all adapter removal cases
        __kraken__input = __cutadapt__output
    elif manager.config.bwa_mem_phix.do:
        __kraken__input = [x for x in __bwa_bam_to_fastq__fastq_output if "unmapped" in x]
    else:
        __kraken__input = __data__input

    __kraken__output_wkdir = manager.sample + "/kraken/"
    __kraken__output_html = __kraken__output_wkdir + "kraken/kraken.html"
    __kraken__output_out = __kraken__output_wkdir + "kraken/kraken.out"
    __kraken__output_csv = __kraken__output_wkdir + "kraken/kraken.csv"
    __kraken__output_json = __kraken__output_wkdir + "kraken/kraken.json"

    include: sm.modules["kraken/2.0"]



# ====================================================================== rulegraph 
sequana_rulegraph_mapper = {
	    "fastqc_raw": "../fastqc_raw.html",
	    "fastqc_phix": "../fastqc_phix.html",
	    "fastqc_trimmed": "../fastqc_trimmed.html",
	    "cutadapt": "../cutadapt.html",
	    "kraken": "../kraken/kraken/kraken.html",
	    "kraken_translate": "../kraken/raken/kraken.html",
	    "kraken_to_krona": "../kraken/kraken/kraken.html",
	}
include: sm.modules['rulegraph']



# create a json file that summarise information of your pipeline
__summary_pipeline__inputs = manager.getrawdata()
if manager.config['cutadapt'].do:
    # todo: handle all adapter removal cases
    __summary_pipeline__outputs = [ __cutadapt__output ]
elif manager.config.bwa_mem_phix.do:
    __summary_pipeline__outputs = [x for x in __bwa_bam_to_fastq__fastq_output if "unmapped" in x]
else:
    __summary_pipeline__outputs = []

# temporary hack
if not os.path.exists(".sequana/env.yaml"):
    os.makedirs(".sequana", exist_ok=True)
    with open(".sequana/env.yaml", "w") as f:
        f.write("")
__summary_pipeline__html = []
__summary_pipeline__rulegraph = ".sequana/rulegraph.svg"
__summary_pipeline__requirements = ".sequana/env.yaml"
__summary_pipeline__snakefile = str(manager.snakefile)
__summary_pipeline__config = "config.yaml"
__summary_pipeline__name = "Quality Control"
__summary_pipeline__json_output = "{sample}/summary_pipeline/{sample}.json"
include: sm.modules["summary_pipeline"]


# Those rules takes a couple of seconds so no need for a cluster
localrules: rulegraph


onsuccess:
    from sequana.modules_report.fastq_stats import FastQStatsModule
    from sequana.modules_report.bwa_bam_to_fastq import BWABAMtoFastQModule
    from sequana.modules_report.kraken import KrakenModule
    from sequana.modules_report.phix import PhixModule
    from sequana.modules_report.cutadapt import CutadaptModule
    from sequana.modules_report.fastqc import FastQCModule
    from sequana.modules_report.summary import SummaryModule

    # the stats image
    #snake_parser = snakemake.get_argument_parser().parse_args()
    json_list = expand(__summary_pipeline__json_output, sample=manager.samples)
    for jfile in json_list:
        with open(jfile, 'r') as fp:
            jdict = json.load(fp)
        #jdict['stats'] = snake_parser.stats
        j = json.dumps(jdict, indent=4)
        with open(jfile, 'w') as fp:
            print(j, file=fp)


    # Main directory
    from sequana.utils import config as conf
    report_dir_format = "%(proj)s/report_qc_%(proj)s"

    for proj in manager.samples.keys():
        sample_summary = {}

        report_dir = report_dir_format % {"proj": proj}
        conf.output_dir = report_dir   # ensure files are stored in the correct location

        # Create the 3 FastQC HTML files (independent)
        for this in ["fastqc_phix", "fastqc_raw", "fastqc_trimmed"]:
            FastQCModule("{}.html".format(this),
                         proj + "/{}/*_fastqc.html".format(this))

        # add all sections in addition to standard summary
        conf.summary_sections = []

        # First the samples section ------------------------------
        indir = proj + "/fastq_stats_samples"

        fqmod = FastQStatsModule(indir, "fastqc_raw")
        sample_summary["fastq_stats_samples_json"] = json.loads(fqmod.get_stats().to_json())

        conf.summary_sections.append({
            "name": "Stats (input data)",
            "title_links": '<a href="fastqc_raw.html">FastQC</a>',
            "anchor'": "stats",
            "content": fqmod._get_stats_section()
        })

        # the phix section ---------------------------------
        if manager.config.bwa_mem_phix.do :
            print(proj)
            phixmod = PhixModule(proj)
            sample_summary["phix_section_json"] = json.loads(phixmod._get_stats().to_json())
            sample_summary["phix_section"] = phixmod._get_summary()
            conf.summary_sections.append({
                "name": "Phix ",
                "title_links": '<a href="fastqc_phix.html">FastQC</a>',
                "anchor'": "phix",
                "content": phixmod._get_html()
            })

        # the cutadapt section ----------------------------
        if manager.config.cutadapt.do:
            cutadapt_mod = CutadaptModule(f"{proj}/logs/cutadapt/cutadapt.txt", proj)
            sample_summary["cutadapt_json"] = json.loads(cutadapt_mod._get_stats().to_json())
            html = cutadapt_mod._get_stat_section()
            html += FastQStatsModule(proj + "/fastq_stats_phix", "fastqc_cutadapt")._get_stats_section(
                tablename="cutadapt2")
            conf.summary_sections.append({
                "name": "Adapter ",
                "title_links": '<a href="fastqc_cutadapt.html">FastQC</a>|' +
                    '<a href="cutadapt.html">Cutadapt</a>|',
                "anchor'": "phix",
                "content": html
            })

        # The Kraken section
        if manager.config.kraken.do:
            krakenmod = KrakenModule(proj + "/kraken/kraken")
            sample_summary['kraken_json'] = json.loads(krakenmod._get_stats().to_json())
            conf.summary_sections.append({
                "name": "Kraken ",
                "anchor'": "kraken",
                "content": krakenmod._get_summary_section()
            })
            logger.info("Copying files")
            shell('cp -r %s/kraken/ %s' % (proj, report_dir))

        # The cutadapt report (independent)
        if manager.config['cutadapt'].do:
            from sequana.modules_report.cutadapt import CutadaptModule
            filename = proj + "/logs/cutadapt/cutadapt.txt"
            CutadaptModule(filename, proj, "cutadapt.html")

        if glob.glob("%s/fastqc_*/" % (proj)):
            shell('cp -r %s/fastqc_*/ %s' % (proj, report_dir))

        filename = report_dir + "/../summary_pipeline/%s.json" % proj
        #
        intro = """
            <b>Sample:</b> {} <br><b>Paired data:</b> {}<br>
            <b>Data Type:</b> {}<br><b>Pipeline:</b>
<a target="_blank" href="http://sequana.readthedocs.io/en/master/pipelines.html#{}">{}</a><br>
            """.format(
                    proj,
                    manager.paired,
                    config.get('datatype', "unspecified"),
                    "quality_control",
                     __summary_pipeline__name)
        SummaryModule(json.loads(open(filename).read()), intro=intro)

        # save sample summary
        sample_summary['project'] = proj
        with open(report_dir + "/summary.json", "w") as fp:
            data = json.dumps(sample_summary, indent=4, sort_keys=True)
            fp.write(data)
        sm.create_cleanup(proj)

    try:
        logger.info("Creating multi summary file")
        from sequana.modules_report.multi_summary import MultiSummary
        from sequana.utils import config as cfg
        cfg.output_dir = "."
        sms = MultiSummary(pattern="**/report_qc*/summary.json", output_filename="summary.html")
    except Exception as err: 
        print(err)


    sc = sm.OnSuccessCleaner("quality_control") 
    sc.files_to_remove.append("phiX174.fa")
    sc.add_makefile()
onerror:
    from sequana_pipetools.errors import PipeError
    p = PipeError("quality_control")
    p.status()
