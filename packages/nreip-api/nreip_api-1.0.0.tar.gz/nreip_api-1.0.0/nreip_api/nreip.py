# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _nreip
else:
    import _nreip

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _nreip.delete_SwigPyIterator

    def value(self):
        return _nreip.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _nreip.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _nreip.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _nreip.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _nreip.SwigPyIterator_equal(self, x)

    def copy(self):
        return _nreip.SwigPyIterator_copy(self)

    def next(self):
        return _nreip.SwigPyIterator_next(self)

    def __next__(self):
        return _nreip.SwigPyIterator___next__(self)

    def previous(self):
        return _nreip.SwigPyIterator_previous(self)

    def advance(self, n):
        return _nreip.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _nreip.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _nreip.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _nreip.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _nreip.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _nreip.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _nreip.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _nreip:
_nreip.SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _nreip.SHARED_PTR_DISOWN
class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _nreip.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _nreip.IntVector___nonzero__(self)

    def __bool__(self):
        return _nreip.IntVector___bool__(self)

    def __len__(self):
        return _nreip.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _nreip.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _nreip.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _nreip.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _nreip.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _nreip.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _nreip.IntVector___setitem__(self, *args)

    def pop(self):
        return _nreip.IntVector_pop(self)

    def append(self, x):
        return _nreip.IntVector_append(self, x)

    def empty(self):
        return _nreip.IntVector_empty(self)

    def size(self):
        return _nreip.IntVector_size(self)

    def swap(self, v):
        return _nreip.IntVector_swap(self, v)

    def begin(self):
        return _nreip.IntVector_begin(self)

    def end(self):
        return _nreip.IntVector_end(self)

    def rbegin(self):
        return _nreip.IntVector_rbegin(self)

    def rend(self):
        return _nreip.IntVector_rend(self)

    def clear(self):
        return _nreip.IntVector_clear(self)

    def get_allocator(self):
        return _nreip.IntVector_get_allocator(self)

    def pop_back(self):
        return _nreip.IntVector_pop_back(self)

    def erase(self, *args):
        return _nreip.IntVector_erase(self, *args)

    def __init__(self, *args):
        _nreip.IntVector_swiginit(self, _nreip.new_IntVector(*args))

    def push_back(self, x):
        return _nreip.IntVector_push_back(self, x)

    def front(self):
        return _nreip.IntVector_front(self)

    def back(self):
        return _nreip.IntVector_back(self)

    def assign(self, n, x):
        return _nreip.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _nreip.IntVector_resize(self, *args)

    def insert(self, *args):
        return _nreip.IntVector_insert(self, *args)

    def reserve(self, n):
        return _nreip.IntVector_reserve(self, n)

    def capacity(self):
        return _nreip.IntVector_capacity(self)
    __swig_destroy__ = _nreip.delete_IntVector

# Register IntVector in _nreip:
_nreip.IntVector_swigregister(IntVector)

class Uint8Vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _nreip.Uint8Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _nreip.Uint8Vector___nonzero__(self)

    def __bool__(self):
        return _nreip.Uint8Vector___bool__(self)

    def __len__(self):
        return _nreip.Uint8Vector___len__(self)

    def __getslice__(self, i, j):
        return _nreip.Uint8Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _nreip.Uint8Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _nreip.Uint8Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _nreip.Uint8Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _nreip.Uint8Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _nreip.Uint8Vector___setitem__(self, *args)

    def pop(self):
        return _nreip.Uint8Vector_pop(self)

    def append(self, x):
        return _nreip.Uint8Vector_append(self, x)

    def empty(self):
        return _nreip.Uint8Vector_empty(self)

    def size(self):
        return _nreip.Uint8Vector_size(self)

    def swap(self, v):
        return _nreip.Uint8Vector_swap(self, v)

    def begin(self):
        return _nreip.Uint8Vector_begin(self)

    def end(self):
        return _nreip.Uint8Vector_end(self)

    def rbegin(self):
        return _nreip.Uint8Vector_rbegin(self)

    def rend(self):
        return _nreip.Uint8Vector_rend(self)

    def clear(self):
        return _nreip.Uint8Vector_clear(self)

    def get_allocator(self):
        return _nreip.Uint8Vector_get_allocator(self)

    def pop_back(self):
        return _nreip.Uint8Vector_pop_back(self)

    def erase(self, *args):
        return _nreip.Uint8Vector_erase(self, *args)

    def __init__(self, *args):
        _nreip.Uint8Vector_swiginit(self, _nreip.new_Uint8Vector(*args))

    def push_back(self, x):
        return _nreip.Uint8Vector_push_back(self, x)

    def front(self):
        return _nreip.Uint8Vector_front(self)

    def back(self):
        return _nreip.Uint8Vector_back(self)

    def assign(self, n, x):
        return _nreip.Uint8Vector_assign(self, n, x)

    def resize(self, *args):
        return _nreip.Uint8Vector_resize(self, *args)

    def insert(self, *args):
        return _nreip.Uint8Vector_insert(self, *args)

    def reserve(self, n):
        return _nreip.Uint8Vector_reserve(self, n)

    def capacity(self):
        return _nreip.Uint8Vector_capacity(self)
    __swig_destroy__ = _nreip.delete_Uint8Vector

# Register Uint8Vector in _nreip:
_nreip.Uint8Vector_swigregister(Uint8Vector)

class Uint16Vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _nreip.Uint16Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _nreip.Uint16Vector___nonzero__(self)

    def __bool__(self):
        return _nreip.Uint16Vector___bool__(self)

    def __len__(self):
        return _nreip.Uint16Vector___len__(self)

    def __getslice__(self, i, j):
        return _nreip.Uint16Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _nreip.Uint16Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _nreip.Uint16Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _nreip.Uint16Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _nreip.Uint16Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _nreip.Uint16Vector___setitem__(self, *args)

    def pop(self):
        return _nreip.Uint16Vector_pop(self)

    def append(self, x):
        return _nreip.Uint16Vector_append(self, x)

    def empty(self):
        return _nreip.Uint16Vector_empty(self)

    def size(self):
        return _nreip.Uint16Vector_size(self)

    def swap(self, v):
        return _nreip.Uint16Vector_swap(self, v)

    def begin(self):
        return _nreip.Uint16Vector_begin(self)

    def end(self):
        return _nreip.Uint16Vector_end(self)

    def rbegin(self):
        return _nreip.Uint16Vector_rbegin(self)

    def rend(self):
        return _nreip.Uint16Vector_rend(self)

    def clear(self):
        return _nreip.Uint16Vector_clear(self)

    def get_allocator(self):
        return _nreip.Uint16Vector_get_allocator(self)

    def pop_back(self):
        return _nreip.Uint16Vector_pop_back(self)

    def erase(self, *args):
        return _nreip.Uint16Vector_erase(self, *args)

    def __init__(self, *args):
        _nreip.Uint16Vector_swiginit(self, _nreip.new_Uint16Vector(*args))

    def push_back(self, x):
        return _nreip.Uint16Vector_push_back(self, x)

    def front(self):
        return _nreip.Uint16Vector_front(self)

    def back(self):
        return _nreip.Uint16Vector_back(self)

    def assign(self, n, x):
        return _nreip.Uint16Vector_assign(self, n, x)

    def resize(self, *args):
        return _nreip.Uint16Vector_resize(self, *args)

    def insert(self, *args):
        return _nreip.Uint16Vector_insert(self, *args)

    def reserve(self, n):
        return _nreip.Uint16Vector_reserve(self, n)

    def capacity(self):
        return _nreip.Uint16Vector_capacity(self)
    __swig_destroy__ = _nreip.delete_Uint16Vector

# Register Uint16Vector in _nreip:
_nreip.Uint16Vector_swigregister(Uint16Vector)

class Uint32Vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _nreip.Uint32Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _nreip.Uint32Vector___nonzero__(self)

    def __bool__(self):
        return _nreip.Uint32Vector___bool__(self)

    def __len__(self):
        return _nreip.Uint32Vector___len__(self)

    def __getslice__(self, i, j):
        return _nreip.Uint32Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _nreip.Uint32Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _nreip.Uint32Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _nreip.Uint32Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _nreip.Uint32Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _nreip.Uint32Vector___setitem__(self, *args)

    def pop(self):
        return _nreip.Uint32Vector_pop(self)

    def append(self, x):
        return _nreip.Uint32Vector_append(self, x)

    def empty(self):
        return _nreip.Uint32Vector_empty(self)

    def size(self):
        return _nreip.Uint32Vector_size(self)

    def swap(self, v):
        return _nreip.Uint32Vector_swap(self, v)

    def begin(self):
        return _nreip.Uint32Vector_begin(self)

    def end(self):
        return _nreip.Uint32Vector_end(self)

    def rbegin(self):
        return _nreip.Uint32Vector_rbegin(self)

    def rend(self):
        return _nreip.Uint32Vector_rend(self)

    def clear(self):
        return _nreip.Uint32Vector_clear(self)

    def get_allocator(self):
        return _nreip.Uint32Vector_get_allocator(self)

    def pop_back(self):
        return _nreip.Uint32Vector_pop_back(self)

    def erase(self, *args):
        return _nreip.Uint32Vector_erase(self, *args)

    def __init__(self, *args):
        _nreip.Uint32Vector_swiginit(self, _nreip.new_Uint32Vector(*args))

    def push_back(self, x):
        return _nreip.Uint32Vector_push_back(self, x)

    def front(self):
        return _nreip.Uint32Vector_front(self)

    def back(self):
        return _nreip.Uint32Vector_back(self)

    def assign(self, n, x):
        return _nreip.Uint32Vector_assign(self, n, x)

    def resize(self, *args):
        return _nreip.Uint32Vector_resize(self, *args)

    def insert(self, *args):
        return _nreip.Uint32Vector_insert(self, *args)

    def reserve(self, n):
        return _nreip.Uint32Vector_reserve(self, n)

    def capacity(self):
        return _nreip.Uint32Vector_capacity(self)
    __swig_destroy__ = _nreip.delete_Uint32Vector

# Register Uint32Vector in _nreip:
_nreip.Uint32Vector_swigregister(Uint32Vector)

StatusConnection_lost = _nreip.StatusConnection_lost
StatusConnection_connected = _nreip.StatusConnection_connected
StatusConnection_notAvailable = _nreip.StatusConnection_notAvailable
StatusConnection_disconnected = _nreip.StatusConnection_disconnected

def getSizeConsumer(b=2):
    return _nreip.getSizeConsumer(b)

def getSizeProducer(b=2):
    return _nreip.getSizeProducer(b)
class NreipScanner(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _nreip.NreipScanner_swiginit(self, _nreip.new_NreipScanner(*args))

    def getStatus(self):
        return _nreip.NreipScanner_getStatus(self)
    __swig_destroy__ = _nreip.delete_NreipScanner

    def tryingToConnect(self, *args):
        return _nreip.NreipScanner_tryingToConnect(self, *args)

    def disconnect(self):
        return _nreip.NreipScanner_disconnect(self)

    def setByte(self, byteNo, byteValue):
        return _nreip.NreipScanner_setByte(self, byteNo, byteValue)

    def initialazation(self):
        return _nreip.NreipScanner_initialazation(self)

# Register NreipScanner in _nreip:
_nreip.NreipScanner_swigregister(NreipScanner)

class DataID(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _nreip.DataID_swiginit(self, _nreip.new_DataID(*args))

    def getNumber(self):
        return _nreip.DataID_getNumber(self)

    def getTagname(self):
        return _nreip.DataID_getTagname(self)
    __swig_destroy__ = _nreip.delete_DataID

# Register DataID in _nreip:
_nreip.DataID_swigregister(DataID)

TargetStatus_closed = _nreip.TargetStatus_closed
TargetStatus_open = _nreip.TargetStatus_open
TargetStatus_connected = _nreip.TargetStatus_connected
class Target(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getConsumerData(self):
        return _nreip.Target_getConsumerData(self)

    def setProducerData(self, data):
        return _nreip.Target_setProducerData(self, data)

    def setProducerDataItem(self, byteNo, value):
        return _nreip.Target_setProducerDataItem(self, byteNo, value)

    def applyDataChanges(self):
        return _nreip.Target_applyDataChanges(self)

    def getProducerId(self):
        return _nreip.Target_getProducerId(self)

    def getConsumerId(self):
        return _nreip.Target_getConsumerId(self)

    def getConsumerSize(self):
        return _nreip.Target_getConsumerSize(self)

    def getProducerSize(self):
        return _nreip.Target_getProducerSize(self)

    def open(self):
        return _nreip.Target_open(self)

    def close(self):
        return _nreip.Target_close(self)

    def getStatus(self):
        return _nreip.Target_getStatus(self)
    __swig_destroy__ = _nreip.delete_Target

    @staticmethod
    def makeTarget(dataConsumer, dataProducer, cs):
        return _nreip.Target_makeTarget(dataConsumer, dataProducer, cs)

# Register Target in _nreip:
_nreip.Target_swigregister(Target)

def Target_makeTarget(dataConsumer, dataProducer, cs):
    return _nreip.Target_makeTarget(dataConsumer, dataProducer, cs)

class ConnectionServer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, host, handshakePort):
        _nreip.ConnectionServer_swiginit(self, _nreip.new_ConnectionServer(host, handshakePort))
    __swig_destroy__ = _nreip.delete_ConnectionServer

    def getHostId(self):
        return _nreip.ConnectionServer_getHostId(self)

    def makeTarget(self, consumerId, sizeConsumer, producerId, sizeProducer):
        return _nreip.ConnectionServer_makeTarget(self, consumerId, sizeConsumer, producerId, sizeProducer)

    def removeTarget(self, target):
        return _nreip.ConnectionServer_removeTarget(self, target)

    def getTarget(self, consumerId):
        return _nreip.ConnectionServer_getTarget(self, consumerId)

    def open(self):
        return _nreip.ConnectionServer_open(self)

    def close(self):
        return _nreip.ConnectionServer_close(self)

# Register ConnectionServer in _nreip:
_nreip.ConnectionServer_swigregister(ConnectionServer)


def makeWrapTarget(cs, consumerId, sizeConsumer, producerId, sizeProducer):
    return _nreip.makeWrapTarget(cs, consumerId, sizeConsumer, producerId, sizeProducer)
class WrapWeakTarget(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, wp):
        _nreip.WrapWeakTarget_swiginit(self, _nreip.new_WrapWeakTarget(wp))

    def __deref__(self):
        return _nreip.WrapWeakTarget___deref__(self)
    __swig_destroy__ = _nreip.delete_WrapWeakTarget

    def getConsumerData(self):
        return _nreip.WrapWeakTarget_getConsumerData(self)

    def setProducerData(self, data):
        return _nreip.WrapWeakTarget_setProducerData(self, data)

    def setProducerDataItem(self, byteNo, value):
        return _nreip.WrapWeakTarget_setProducerDataItem(self, byteNo, value)

    def applyDataChanges(self):
        return _nreip.WrapWeakTarget_applyDataChanges(self)

    def getProducerId(self):
        return _nreip.WrapWeakTarget_getProducerId(self)

    def getConsumerId(self):
        return _nreip.WrapWeakTarget_getConsumerId(self)

    def getConsumerSize(self):
        return _nreip.WrapWeakTarget_getConsumerSize(self)

    def getProducerSize(self):
        return _nreip.WrapWeakTarget_getProducerSize(self)

    def open(self):
        return _nreip.WrapWeakTarget_open(self)

    def close(self):
        return _nreip.WrapWeakTarget_close(self)

    def getStatus(self):
        return _nreip.WrapWeakTarget_getStatus(self)

    def makeTarget(self, dataConsumer, dataProducer, cs):
        return _nreip.WrapWeakTarget_makeTarget(self, dataConsumer, dataProducer, cs)

# Register WrapWeakTarget in _nreip:
_nreip.WrapWeakTarget_swigregister(WrapWeakTarget)


from enum import Enum
def redo(prefix):
    tmpD = {k:v for k,v in globals().items() if k.startswith(prefix + '_')}
    for k,v in tmpD.items():
        del globals()[k]
    tmpD = {k[len(prefix)+1:]:v for k,v in tmpD.items()}
# globals()[prefix] = type(prefix,(),tmpD) # pre-Enum support
    globals()[prefix] = Enum(prefix,tmpD)
redo('TargetStatus')
del redo  # cleaning up the namespace
del Enum

def getTargetStatusProxyForTarget(self):
	keys = { 0 : TargetStatus.closed, 1 : TargetStatus.open, 2 : TargetStatus.connected }	
	return keys[ self.__deref__().getStatus() ]


WrapWeakTarget.getStatus = getTargetStatusProxyForTarget
def makeWrapWeakTarget (self, dataC, sizeC, dataP, sizeP) :
	return makeWrapTarget(self,dataC, sizeC, dataP, sizeP)

ConnectionServer.makeTarget = makeWrapWeakTarget




