"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.struct_pb2
import google.protobuf.timestamp_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _SchemeType:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _SchemeTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_SchemeType.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    SCHEME_TYPE_UNSPECIFIED: _SchemeType.ValueType  # 0
    SCHEME_TYPE_SUPPORT: _SchemeType.ValueType  # 1
    SCHEME_TYPE_ATTACK: _SchemeType.ValueType  # 2
    SCHEME_TYPE_REPHRASE: _SchemeType.ValueType  # 3
    SCHEME_TYPE_TRANSITION: _SchemeType.ValueType  # 4
    SCHEME_TYPE_PREFERENCE: _SchemeType.ValueType  # 5
    SCHEME_TYPE_ASSERTION: _SchemeType.ValueType  # 6
class SchemeType(_SchemeType, metaclass=_SchemeTypeEnumTypeWrapper):
    pass

SCHEME_TYPE_UNSPECIFIED: SchemeType.ValueType  # 0
SCHEME_TYPE_SUPPORT: SchemeType.ValueType  # 1
SCHEME_TYPE_ATTACK: SchemeType.ValueType  # 2
SCHEME_TYPE_REPHRASE: SchemeType.ValueType  # 3
SCHEME_TYPE_TRANSITION: SchemeType.ValueType  # 4
SCHEME_TYPE_PREFERENCE: SchemeType.ValueType  # 5
SCHEME_TYPE_ASSERTION: SchemeType.ValueType  # 6
global___SchemeType = SchemeType


class _Scheme:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _SchemeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Scheme.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    SCHEME_UNSPECIFIED: _Scheme.ValueType  # 0
    SCHEME_AD_HOMINEM: _Scheme.ValueType  # 1
    SCHEME_ALTERNATIVE_MEANS: _Scheme.ValueType  # 2
    SCHEME_ALTERNATIVES: _Scheme.ValueType  # 3
    SCHEME_ANALOGY: _Scheme.ValueType  # 4
    SCHEME_ARBITRARY_VERBAL_CLASSIFICATION: _Scheme.ValueType  # 5
    SCHEME_AUTHORITY: _Scheme.ValueType  # 6
    SCHEME_BIAS: _Scheme.ValueType  # 7
    SCHEME_BIASED_CLASSIFICATION: _Scheme.ValueType  # 8
    SCHEME_CALLING_OUT: _Scheme.ValueType  # 9
    SCHEME_CAUSAL_SLIPPERY_SLOPE: _Scheme.ValueType  # 10
    SCHEME_CAUSE_TO_EFFECT: _Scheme.ValueType  # 11
    SCHEME_CIRCUMSTANTIAL_AD_HOMINEM: _Scheme.ValueType  # 12
    SCHEME_COMMITMENT_EXCEPTION: _Scheme.ValueType  # 13
    SCHEME_COMMITMENT: _Scheme.ValueType  # 14
    SCHEME_COMPOSITION: _Scheme.ValueType  # 15
    SCHEME_CONFLICTING_GOALS: _Scheme.ValueType  # 16
    SCHEME_CONSEQUENCES: _Scheme.ValueType  # 17
    SCHEME_CORRELATION_TO_CAUSE: _Scheme.ValueType  # 18
    SCHEME_DANGER_APPEAL: _Scheme.ValueType  # 19
    SCHEME_DEFINITION_TO_VERBAL_CLASSIFICATION: _Scheme.ValueType  # 20
    SCHEME_DIFFERENCES_UNDERMINE_SIMILARITY: _Scheme.ValueType  # 21
    SCHEME_DILEMMA: _Scheme.ValueType  # 22
    SCHEME_DIRECT_AD_HOMINEM: _Scheme.ValueType  # 23
    SCHEME_DIVISION: _Scheme.ValueType  # 24
    SCHEME_ESTABLISHED_RULE: _Scheme.ValueType  # 25
    SCHEME_ETHOTIC: _Scheme.ValueType  # 26
    SCHEME_EVIDENCE_TO_HYPOTHESIS: _Scheme.ValueType  # 27
    SCHEME_EXAMPLE: _Scheme.ValueType  # 28
    SCHEME_EXCEPTION_SIMILARITY_CASE: _Scheme.ValueType  # 29
    SCHEME_EXCEPTIONAL_CASE: _Scheme.ValueType  # 30
    SCHEME_EXPERT_OPINION: _Scheme.ValueType  # 31
    SCHEME_EXPERTISE_INCONSISTENCY: _Scheme.ValueType  # 32
    SCHEME_FAIRNESS: _Scheme.ValueType  # 33
    SCHEME_FALSIFICATION_OF_HYPOTHESIS: _Scheme.ValueType  # 34
    SCHEME_FEAR_APPEAL: _Scheme.ValueType  # 35
    SCHEME_FULL_SLIPPERY_SLOPE: _Scheme.ValueType  # 36
    SCHEME_GENERAL_ACCEPTANCE_DOUBT: _Scheme.ValueType  # 37
    SCHEME_GENERIC_AD_HOMINEM: _Scheme.ValueType  # 38
    SCHEME_GOODWILL: _Scheme.ValueType  # 39
    SCHEME_GRADUALISM: _Scheme.ValueType  # 40
    SCHEME_IGNORANCE: _Scheme.ValueType  # 41
    SCHEME_INCONSISTENT_COMMITMENT: _Scheme.ValueType  # 42
    SCHEME_INFORMANT_REPORT: _Scheme.ValueType  # 43
    SCHEME_INTERACTION_OF_ACT_AND_PERSON: _Scheme.ValueType  # 44
    SCHEME_IRRATIONAL_FEAR_APPEAL: _Scheme.ValueType  # 45
    SCHEME_LACK_OF_COMPLETE_KNOWLEDGE: _Scheme.ValueType  # 46
    SCHEME_LACK_OF_EXPERT_RELIABILITY: _Scheme.ValueType  # 47
    SCHEME_LOGICAL: _Scheme.ValueType  # 48
    SCHEME_MISPLACED_PRIORITIES: _Scheme.ValueType  # 49
    SCHEME_MODUS_PONENS: _Scheme.ValueType  # 50
    SCHEME_MORAL_VIRTUE: _Scheme.ValueType  # 51
    SCHEME_NEED_FOR_HELP: _Scheme.ValueType  # 52
    SCHEME_NEGATIVE_CONSEQUENCES: _Scheme.ValueType  # 53
    SCHEME_OPPOSED_COMMITMENT: _Scheme.ValueType  # 54
    SCHEME_OPPOSITIONS: _Scheme.ValueType  # 55
    SCHEME_CAUSAL_FACTORS_INVOLVED: _Scheme.ValueType  # 56
    SCHEME_PARAPHRASE: _Scheme.ValueType  # 57
    SCHEME_PERCEPTION: _Scheme.ValueType  # 58
    SCHEME_POPULAR_OPINION: _Scheme.ValueType  # 59
    SCHEME_POPULAR_PRACTICE: _Scheme.ValueType  # 60
    SCHEME_POSITION_TO_KNOW: _Scheme.ValueType  # 61
    SCHEME_POSITIVE_CONSEQUENCES: _Scheme.ValueType  # 62
    SCHEME_PRACTICAL_REASONING_FROM_ANALOGY: _Scheme.ValueType  # 63
    SCHEME_PRACTICAL_REASONING: _Scheme.ValueType  # 64
    SCHEME_PRACTICAL_WISDOM: _Scheme.ValueType  # 65
    SCHEME_PRAGMATIC_ALTERNATIVES: _Scheme.ValueType  # 66
    SCHEME_PRAGMATIC_INCONSISTENCY: _Scheme.ValueType  # 67
    SCHEME_PRECEDENT_SLIPPERY_SLOPE: _Scheme.ValueType  # 68
    SCHEME_PROPERTY_NOT_EXISTANT: _Scheme.ValueType  # 69
    SCHEME_REFRAMING: _Scheme.ValueType  # 70
    SCHEME_REQUIRED_STEPS: _Scheme.ValueType  # 71
    SCHEME_RESOLVING_INCONSISTENCY: _Scheme.ValueType  # 72
    SCHEME_RULE: _Scheme.ValueType  # 73
    SCHEME_RULES: _Scheme.ValueType  # 74
    SCHEME_SIGN_FROM_OTHER_EVENTS: _Scheme.ValueType  # 75
    SCHEME_SIGN: _Scheme.ValueType  # 76
    SCHEME_TWO_PERSON_PRACTICAL_REASONING: _Scheme.ValueType  # 77
    SCHEME_UNFAIRNESS: _Scheme.ValueType  # 78
    SCHEME_VAGUE_VERBAL_CLASSIFICATION: _Scheme.ValueType  # 79
    SCHEME_VAGUENESS_OF_VERBAL_CLASSIFICATION: _Scheme.ValueType  # 80
    SCHEME_VALUE_BASED_PRACTICAL_REASONING: _Scheme.ValueType  # 81
    SCHEME_VALUES: _Scheme.ValueType  # 82
    SCHEME_VERBAL_CLASSIFICATION: _Scheme.ValueType  # 83
    SCHEME_VERBAL_SLIPPERY_SLOPE: _Scheme.ValueType  # 84
    SCHEME_VESTED_INTEREST: _Scheme.ValueType  # 85
    SCHEME_VIRTUE_GOODWILL: _Scheme.ValueType  # 86
    SCHEME_WASTE: _Scheme.ValueType  # 87
    SCHEME_WEAKEST_LINK: _Scheme.ValueType  # 88
    SCHEME_WISDOM_GOODWILL: _Scheme.ValueType  # 89
    SCHEME_WISDOM_VIRTUE: _Scheme.ValueType  # 90
    SCHEME_WISDOM_VIRTUE_GOODWILL: _Scheme.ValueType  # 91
    SCHEME_WITNESS_TESTIMONY: _Scheme.ValueType  # 92
class Scheme(_Scheme, metaclass=_SchemeEnumTypeWrapper):
    pass

SCHEME_UNSPECIFIED: Scheme.ValueType  # 0
SCHEME_AD_HOMINEM: Scheme.ValueType  # 1
SCHEME_ALTERNATIVE_MEANS: Scheme.ValueType  # 2
SCHEME_ALTERNATIVES: Scheme.ValueType  # 3
SCHEME_ANALOGY: Scheme.ValueType  # 4
SCHEME_ARBITRARY_VERBAL_CLASSIFICATION: Scheme.ValueType  # 5
SCHEME_AUTHORITY: Scheme.ValueType  # 6
SCHEME_BIAS: Scheme.ValueType  # 7
SCHEME_BIASED_CLASSIFICATION: Scheme.ValueType  # 8
SCHEME_CALLING_OUT: Scheme.ValueType  # 9
SCHEME_CAUSAL_SLIPPERY_SLOPE: Scheme.ValueType  # 10
SCHEME_CAUSE_TO_EFFECT: Scheme.ValueType  # 11
SCHEME_CIRCUMSTANTIAL_AD_HOMINEM: Scheme.ValueType  # 12
SCHEME_COMMITMENT_EXCEPTION: Scheme.ValueType  # 13
SCHEME_COMMITMENT: Scheme.ValueType  # 14
SCHEME_COMPOSITION: Scheme.ValueType  # 15
SCHEME_CONFLICTING_GOALS: Scheme.ValueType  # 16
SCHEME_CONSEQUENCES: Scheme.ValueType  # 17
SCHEME_CORRELATION_TO_CAUSE: Scheme.ValueType  # 18
SCHEME_DANGER_APPEAL: Scheme.ValueType  # 19
SCHEME_DEFINITION_TO_VERBAL_CLASSIFICATION: Scheme.ValueType  # 20
SCHEME_DIFFERENCES_UNDERMINE_SIMILARITY: Scheme.ValueType  # 21
SCHEME_DILEMMA: Scheme.ValueType  # 22
SCHEME_DIRECT_AD_HOMINEM: Scheme.ValueType  # 23
SCHEME_DIVISION: Scheme.ValueType  # 24
SCHEME_ESTABLISHED_RULE: Scheme.ValueType  # 25
SCHEME_ETHOTIC: Scheme.ValueType  # 26
SCHEME_EVIDENCE_TO_HYPOTHESIS: Scheme.ValueType  # 27
SCHEME_EXAMPLE: Scheme.ValueType  # 28
SCHEME_EXCEPTION_SIMILARITY_CASE: Scheme.ValueType  # 29
SCHEME_EXCEPTIONAL_CASE: Scheme.ValueType  # 30
SCHEME_EXPERT_OPINION: Scheme.ValueType  # 31
SCHEME_EXPERTISE_INCONSISTENCY: Scheme.ValueType  # 32
SCHEME_FAIRNESS: Scheme.ValueType  # 33
SCHEME_FALSIFICATION_OF_HYPOTHESIS: Scheme.ValueType  # 34
SCHEME_FEAR_APPEAL: Scheme.ValueType  # 35
SCHEME_FULL_SLIPPERY_SLOPE: Scheme.ValueType  # 36
SCHEME_GENERAL_ACCEPTANCE_DOUBT: Scheme.ValueType  # 37
SCHEME_GENERIC_AD_HOMINEM: Scheme.ValueType  # 38
SCHEME_GOODWILL: Scheme.ValueType  # 39
SCHEME_GRADUALISM: Scheme.ValueType  # 40
SCHEME_IGNORANCE: Scheme.ValueType  # 41
SCHEME_INCONSISTENT_COMMITMENT: Scheme.ValueType  # 42
SCHEME_INFORMANT_REPORT: Scheme.ValueType  # 43
SCHEME_INTERACTION_OF_ACT_AND_PERSON: Scheme.ValueType  # 44
SCHEME_IRRATIONAL_FEAR_APPEAL: Scheme.ValueType  # 45
SCHEME_LACK_OF_COMPLETE_KNOWLEDGE: Scheme.ValueType  # 46
SCHEME_LACK_OF_EXPERT_RELIABILITY: Scheme.ValueType  # 47
SCHEME_LOGICAL: Scheme.ValueType  # 48
SCHEME_MISPLACED_PRIORITIES: Scheme.ValueType  # 49
SCHEME_MODUS_PONENS: Scheme.ValueType  # 50
SCHEME_MORAL_VIRTUE: Scheme.ValueType  # 51
SCHEME_NEED_FOR_HELP: Scheme.ValueType  # 52
SCHEME_NEGATIVE_CONSEQUENCES: Scheme.ValueType  # 53
SCHEME_OPPOSED_COMMITMENT: Scheme.ValueType  # 54
SCHEME_OPPOSITIONS: Scheme.ValueType  # 55
SCHEME_CAUSAL_FACTORS_INVOLVED: Scheme.ValueType  # 56
SCHEME_PARAPHRASE: Scheme.ValueType  # 57
SCHEME_PERCEPTION: Scheme.ValueType  # 58
SCHEME_POPULAR_OPINION: Scheme.ValueType  # 59
SCHEME_POPULAR_PRACTICE: Scheme.ValueType  # 60
SCHEME_POSITION_TO_KNOW: Scheme.ValueType  # 61
SCHEME_POSITIVE_CONSEQUENCES: Scheme.ValueType  # 62
SCHEME_PRACTICAL_REASONING_FROM_ANALOGY: Scheme.ValueType  # 63
SCHEME_PRACTICAL_REASONING: Scheme.ValueType  # 64
SCHEME_PRACTICAL_WISDOM: Scheme.ValueType  # 65
SCHEME_PRAGMATIC_ALTERNATIVES: Scheme.ValueType  # 66
SCHEME_PRAGMATIC_INCONSISTENCY: Scheme.ValueType  # 67
SCHEME_PRECEDENT_SLIPPERY_SLOPE: Scheme.ValueType  # 68
SCHEME_PROPERTY_NOT_EXISTANT: Scheme.ValueType  # 69
SCHEME_REFRAMING: Scheme.ValueType  # 70
SCHEME_REQUIRED_STEPS: Scheme.ValueType  # 71
SCHEME_RESOLVING_INCONSISTENCY: Scheme.ValueType  # 72
SCHEME_RULE: Scheme.ValueType  # 73
SCHEME_RULES: Scheme.ValueType  # 74
SCHEME_SIGN_FROM_OTHER_EVENTS: Scheme.ValueType  # 75
SCHEME_SIGN: Scheme.ValueType  # 76
SCHEME_TWO_PERSON_PRACTICAL_REASONING: Scheme.ValueType  # 77
SCHEME_UNFAIRNESS: Scheme.ValueType  # 78
SCHEME_VAGUE_VERBAL_CLASSIFICATION: Scheme.ValueType  # 79
SCHEME_VAGUENESS_OF_VERBAL_CLASSIFICATION: Scheme.ValueType  # 80
SCHEME_VALUE_BASED_PRACTICAL_REASONING: Scheme.ValueType  # 81
SCHEME_VALUES: Scheme.ValueType  # 82
SCHEME_VERBAL_CLASSIFICATION: Scheme.ValueType  # 83
SCHEME_VERBAL_SLIPPERY_SLOPE: Scheme.ValueType  # 84
SCHEME_VESTED_INTEREST: Scheme.ValueType  # 85
SCHEME_VIRTUE_GOODWILL: Scheme.ValueType  # 86
SCHEME_WASTE: Scheme.ValueType  # 87
SCHEME_WEAKEST_LINK: Scheme.ValueType  # 88
SCHEME_WISDOM_GOODWILL: Scheme.ValueType  # 89
SCHEME_WISDOM_VIRTUE: Scheme.ValueType  # 90
SCHEME_WISDOM_VIRTUE_GOODWILL: Scheme.ValueType  # 91
SCHEME_WITNESS_TESTIMONY: Scheme.ValueType  # 92
global___Scheme = Scheme


class Graph(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    class NodesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text
        @property
        def value(self) -> global___Node: ...
        def __init__(self,
            *,
            key: typing.Text = ...,
            value: typing.Optional[global___Node] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value",b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    class EdgesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text
        @property
        def value(self) -> global___Edge: ...
        def __init__(self,
            *,
            key: typing.Text = ...,
            value: typing.Optional[global___Edge] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value",b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    class ResourcesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text
        @property
        def value(self) -> global___Resource: ...
        def __init__(self,
            *,
            key: typing.Text = ...,
            value: typing.Optional[global___Resource] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value",b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    class ParticipantsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text
        @property
        def value(self) -> global___Participant: ...
        def __init__(self,
            *,
            key: typing.Text = ...,
            value: typing.Optional[global___Participant] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value",b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    NODES_FIELD_NUMBER: builtins.int
    EDGES_FIELD_NUMBER: builtins.int
    RESOURCES_FIELD_NUMBER: builtins.int
    PARTICIPANTS_FIELD_NUMBER: builtins.int
    MAJOR_CLAIM_FIELD_NUMBER: builtins.int
    ANALYSTS_FIELD_NUMBER: builtins.int
    VERSION_FIELD_NUMBER: builtins.int
    CREATED_FIELD_NUMBER: builtins.int
    UPDATED_FIELD_NUMBER: builtins.int
    METADATA_FIELD_NUMBER: builtins.int
    @property
    def nodes(self) -> google.protobuf.internal.containers.MessageMap[typing.Text, global___Node]:
        """string id = 1;"""
        pass
    @property
    def edges(self) -> google.protobuf.internal.containers.MessageMap[typing.Text, global___Edge]: ...
    @property
    def resources(self) -> google.protobuf.internal.containers.MessageMap[typing.Text, global___Resource]: ...
    @property
    def participants(self) -> google.protobuf.internal.containers.MessageMap[typing.Text, global___Participant]: ...
    major_claim: typing.Text
    @property
    def analysts(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Participant]: ...
    version: typing.Text
    @property
    def created(self) -> google.protobuf.timestamp_pb2.Timestamp: ...
    @property
    def updated(self) -> google.protobuf.timestamp_pb2.Timestamp: ...
    @property
    def metadata(self) -> google.protobuf.struct_pb2.Struct: ...
    def __init__(self,
        *,
        nodes: typing.Optional[typing.Mapping[typing.Text, global___Node]] = ...,
        edges: typing.Optional[typing.Mapping[typing.Text, global___Edge]] = ...,
        resources: typing.Optional[typing.Mapping[typing.Text, global___Resource]] = ...,
        participants: typing.Optional[typing.Mapping[typing.Text, global___Participant]] = ...,
        major_claim: typing.Optional[typing.Text] = ...,
        analysts: typing.Optional[typing.Iterable[global___Participant]] = ...,
        version: typing.Text = ...,
        created: typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        updated: typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        metadata: typing.Optional[google.protobuf.struct_pb2.Struct] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_major_claim",b"_major_claim","created",b"created","major_claim",b"major_claim","metadata",b"metadata","updated",b"updated"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_major_claim",b"_major_claim","analysts",b"analysts","created",b"created","edges",b"edges","major_claim",b"major_claim","metadata",b"metadata","nodes",b"nodes","participants",b"participants","resources",b"resources","updated",b"updated","version",b"version"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_major_claim",b"_major_claim"]) -> typing.Optional[typing_extensions.Literal["major_claim"]]: ...
global___Graph = Graph

class Resource(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    TEXT_FIELD_NUMBER: builtins.int
    TITLE_FIELD_NUMBER: builtins.int
    SOURCE_FIELD_NUMBER: builtins.int
    CREATED_FIELD_NUMBER: builtins.int
    UPDATED_FIELD_NUMBER: builtins.int
    METADATA_FIELD_NUMBER: builtins.int
    text: typing.Text
    """string id = 1;"""

    title: typing.Text
    source: typing.Text
    @property
    def created(self) -> google.protobuf.timestamp_pb2.Timestamp: ...
    @property
    def updated(self) -> google.protobuf.timestamp_pb2.Timestamp: ...
    @property
    def metadata(self) -> google.protobuf.struct_pb2.Struct: ...
    def __init__(self,
        *,
        text: typing.Text = ...,
        title: typing.Optional[typing.Text] = ...,
        source: typing.Optional[typing.Text] = ...,
        created: typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        updated: typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        metadata: typing.Optional[google.protobuf.struct_pb2.Struct] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_source",b"_source","_title",b"_title","created",b"created","metadata",b"metadata","source",b"source","title",b"title","updated",b"updated"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_source",b"_source","_title",b"_title","created",b"created","metadata",b"metadata","source",b"source","text",b"text","title",b"title","updated",b"updated"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_source",b"_source"]) -> typing.Optional[typing_extensions.Literal["source"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_title",b"_title"]) -> typing.Optional[typing_extensions.Literal["title"]]: ...
global___Resource = Resource

class Participant(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    NAME_FIELD_NUMBER: builtins.int
    USERNAME_FIELD_NUMBER: builtins.int
    EMAIL_FIELD_NUMBER: builtins.int
    URL_FIELD_NUMBER: builtins.int
    LOCATION_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    CREATED_FIELD_NUMBER: builtins.int
    UPDATED_FIELD_NUMBER: builtins.int
    METADATA_FIELD_NUMBER: builtins.int
    name: typing.Text
    """string id = 1;"""

    username: typing.Text
    email: typing.Text
    url: typing.Text
    location: typing.Text
    description: typing.Text
    @property
    def created(self) -> google.protobuf.timestamp_pb2.Timestamp: ...
    @property
    def updated(self) -> google.protobuf.timestamp_pb2.Timestamp: ...
    @property
    def metadata(self) -> google.protobuf.struct_pb2.Struct: ...
    def __init__(self,
        *,
        name: typing.Optional[typing.Text] = ...,
        username: typing.Optional[typing.Text] = ...,
        email: typing.Optional[typing.Text] = ...,
        url: typing.Optional[typing.Text] = ...,
        location: typing.Optional[typing.Text] = ...,
        description: typing.Optional[typing.Text] = ...,
        created: typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        updated: typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        metadata: typing.Optional[google.protobuf.struct_pb2.Struct] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_description",b"_description","_email",b"_email","_location",b"_location","_name",b"_name","_url",b"_url","_username",b"_username","created",b"created","description",b"description","email",b"email","location",b"location","metadata",b"metadata","name",b"name","updated",b"updated","url",b"url","username",b"username"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_description",b"_description","_email",b"_email","_location",b"_location","_name",b"_name","_url",b"_url","_username",b"_username","created",b"created","description",b"description","email",b"email","location",b"location","metadata",b"metadata","name",b"name","updated",b"updated","url",b"url","username",b"username"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_description",b"_description"]) -> typing.Optional[typing_extensions.Literal["description"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_email",b"_email"]) -> typing.Optional[typing_extensions.Literal["email"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_location",b"_location"]) -> typing.Optional[typing_extensions.Literal["location"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_name",b"_name"]) -> typing.Optional[typing_extensions.Literal["name"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_url",b"_url"]) -> typing.Optional[typing_extensions.Literal["url"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_username",b"_username"]) -> typing.Optional[typing_extensions.Literal["username"]]: ...
global___Participant = Participant

class Edge(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    SOURCE_FIELD_NUMBER: builtins.int
    TARGET_FIELD_NUMBER: builtins.int
    CREATED_FIELD_NUMBER: builtins.int
    UPDATED_FIELD_NUMBER: builtins.int
    METADATA_FIELD_NUMBER: builtins.int
    source: typing.Text
    """string id = 1;"""

    target: typing.Text
    @property
    def created(self) -> google.protobuf.timestamp_pb2.Timestamp: ...
    @property
    def updated(self) -> google.protobuf.timestamp_pb2.Timestamp: ...
    @property
    def metadata(self) -> google.protobuf.struct_pb2.Struct: ...
    def __init__(self,
        *,
        source: typing.Text = ...,
        target: typing.Text = ...,
        created: typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        updated: typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        metadata: typing.Optional[google.protobuf.struct_pb2.Struct] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["created",b"created","metadata",b"metadata","updated",b"updated"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["created",b"created","metadata",b"metadata","source",b"source","target",b"target","updated",b"updated"]) -> None: ...
global___Edge = Edge

class Node(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    ATOM_FIELD_NUMBER: builtins.int
    SCHEME_FIELD_NUMBER: builtins.int
    CREATED_FIELD_NUMBER: builtins.int
    UPDATED_FIELD_NUMBER: builtins.int
    METADATA_FIELD_NUMBER: builtins.int
    @property
    def atom(self) -> global___AtomNode: ...
    @property
    def scheme(self) -> global___SchemeNode: ...
    @property
    def created(self) -> google.protobuf.timestamp_pb2.Timestamp: ...
    @property
    def updated(self) -> google.protobuf.timestamp_pb2.Timestamp: ...
    @property
    def metadata(self) -> google.protobuf.struct_pb2.Struct: ...
    def __init__(self,
        *,
        atom: typing.Optional[global___AtomNode] = ...,
        scheme: typing.Optional[global___SchemeNode] = ...,
        created: typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        updated: typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        metadata: typing.Optional[google.protobuf.struct_pb2.Struct] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["atom",b"atom","created",b"created","metadata",b"metadata","node",b"node","scheme",b"scheme","updated",b"updated"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["atom",b"atom","created",b"created","metadata",b"metadata","node",b"node","scheme",b"scheme","updated",b"updated"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["node",b"node"]) -> typing.Optional[typing_extensions.Literal["atom","scheme"]]: ...
global___Node = Node

class AtomNode(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    TEXT_FIELD_NUMBER: builtins.int
    REFERENCE_FIELD_NUMBER: builtins.int
    PARTICIPANT_FIELD_NUMBER: builtins.int
    text: typing.Text
    @property
    def reference(self) -> global___Reference: ...
    participant: typing.Text
    def __init__(self,
        *,
        text: typing.Text = ...,
        reference: typing.Optional[global___Reference] = ...,
        participant: typing.Optional[typing.Text] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_participant",b"_participant","_reference",b"_reference","participant",b"participant","reference",b"reference"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_participant",b"_participant","_reference",b"_reference","participant",b"participant","reference",b"reference","text",b"text"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_participant",b"_participant"]) -> typing.Optional[typing_extensions.Literal["participant"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_reference",b"_reference"]) -> typing.Optional[typing_extensions.Literal["reference"]]: ...
global___AtomNode = AtomNode

class SchemeNode(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    TYPE_FIELD_NUMBER: builtins.int
    ARGUMENTATION_SCHEME_FIELD_NUMBER: builtins.int
    DESCRIPTORS_FIELD_NUMBER: builtins.int
    type: global___SchemeType.ValueType
    argumentation_scheme: global___Scheme.ValueType
    @property
    def descriptors(self) -> google.protobuf.struct_pb2.Struct: ...
    def __init__(self,
        *,
        type: typing.Optional[global___SchemeType.ValueType] = ...,
        argumentation_scheme: typing.Optional[global___Scheme.ValueType] = ...,
        descriptors: typing.Optional[google.protobuf.struct_pb2.Struct] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_argumentation_scheme",b"_argumentation_scheme","_type",b"_type","argumentation_scheme",b"argumentation_scheme","descriptors",b"descriptors","type",b"type"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_argumentation_scheme",b"_argumentation_scheme","_type",b"_type","argumentation_scheme",b"argumentation_scheme","descriptors",b"descriptors","type",b"type"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_argumentation_scheme",b"_argumentation_scheme"]) -> typing.Optional[typing_extensions.Literal["argumentation_scheme"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_type",b"_type"]) -> typing.Optional[typing_extensions.Literal["type"]]: ...
global___SchemeNode = SchemeNode

class Reference(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    RESOURCE_FIELD_NUMBER: builtins.int
    OFFSET_FIELD_NUMBER: builtins.int
    TEXT_FIELD_NUMBER: builtins.int
    METADATA_FIELD_NUMBER: builtins.int
    resource: typing.Text
    """string id = 1;"""

    offset: builtins.int
    text: typing.Text
    @property
    def metadata(self) -> google.protobuf.struct_pb2.Struct: ...
    def __init__(self,
        *,
        resource: typing.Optional[typing.Text] = ...,
        offset: typing.Optional[builtins.int] = ...,
        text: typing.Text = ...,
        metadata: typing.Optional[google.protobuf.struct_pb2.Struct] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_offset",b"_offset","_resource",b"_resource","metadata",b"metadata","offset",b"offset","resource",b"resource"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_offset",b"_offset","_resource",b"_resource","metadata",b"metadata","offset",b"offset","resource",b"resource","text",b"text"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_offset",b"_offset"]) -> typing.Optional[typing_extensions.Literal["offset"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_resource",b"_resource"]) -> typing.Optional[typing_extensions.Literal["resource"]]: ...
global___Reference = Reference
