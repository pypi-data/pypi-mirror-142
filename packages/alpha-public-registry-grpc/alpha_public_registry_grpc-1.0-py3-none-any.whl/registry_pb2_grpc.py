# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import registry_pb2 as registry__pb2


class PublicRegistryStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Register = channel.unary_unary(
                '/PublicRegistry/Register',
                request_serializer=registry__pb2.RegisterRequest.SerializeToString,
                response_deserializer=registry__pb2.RegisterResponse.FromString,
                )
        self.Login = channel.unary_unary(
                '/PublicRegistry/Login',
                request_serializer=registry__pb2.LoginRequest.SerializeToString,
                response_deserializer=registry__pb2.LoginResponse.FromString,
                )
        self.EmailConfirm = channel.unary_unary(
                '/PublicRegistry/EmailConfirm',
                request_serializer=registry__pb2.EmailConfirmRequest.SerializeToString,
                response_deserializer=registry__pb2.EmailConfirmResponse.FromString,
                )
        self.PasswordUpdate = channel.unary_unary(
                '/PublicRegistry/PasswordUpdate',
                request_serializer=registry__pb2.PasswordUpdateRequest.SerializeToString,
                response_deserializer=registry__pb2.PasswordUpdateResponse.FromString,
                )
        self.PasswordReset = channel.unary_unary(
                '/PublicRegistry/PasswordReset',
                request_serializer=registry__pb2.PasswordResetRequest.SerializeToString,
                response_deserializer=registry__pb2.PasswordResetResponse.FromString,
                )
        self.Unsubscribe = channel.unary_unary(
                '/PublicRegistry/Unsubscribe',
                request_serializer=registry__pb2.UnsubscribeRequest.SerializeToString,
                response_deserializer=registry__pb2.UnsubscribeResponse.FromString,
                )
        self.EmailUpdate = channel.unary_unary(
                '/PublicRegistry/EmailUpdate',
                request_serializer=registry__pb2.EmailUpdateRequest.SerializeToString,
                response_deserializer=registry__pb2.EmailUpdateResponse.FromString,
                )
        self.CustomerInfo = channel.unary_unary(
                '/PublicRegistry/CustomerInfo',
                request_serializer=registry__pb2.CustomerInfoRequest.SerializeToString,
                response_deserializer=registry__pb2.CustomerInfoResponse.FromString,
                )
        self.CustomerDetailsUpdate = channel.unary_unary(
                '/PublicRegistry/CustomerDetailsUpdate',
                request_serializer=registry__pb2.CustomerDetailsUpdateRequest.SerializeToString,
                response_deserializer=registry__pb2.CustomerDetailsUpdateResponse.FromString,
                )
        self.PaymentMethodUpdate = channel.unary_unary(
                '/PublicRegistry/PaymentMethodUpdate',
                request_serializer=registry__pb2.PaymentMethodUpdateRequest.SerializeToString,
                response_deserializer=registry__pb2.PaymentMethodUpdateResponse.FromString,
                )
        self.LicenseUsage = channel.unary_unary(
                '/PublicRegistry/LicenseUsage',
                request_serializer=registry__pb2.LicenseUsageRequest.SerializeToString,
                response_deserializer=registry__pb2.LicenseUsageResponse.FromString,
                )
        self.AddTerminal = channel.unary_unary(
                '/PublicRegistry/AddTerminal',
                request_serializer=registry__pb2.AddTerminalRequest.SerializeToString,
                response_deserializer=registry__pb2.AddTerminalResponse.FromString,
                )
        self.RenewTerminal = channel.unary_unary(
                '/PublicRegistry/RenewTerminal',
                request_serializer=registry__pb2.RenewTerminalRequest.SerializeToString,
                response_deserializer=registry__pb2.RenewTerminalResponse.FromString,
                )
        self.AddBucketCredentials = channel.unary_unary(
                '/PublicRegistry/AddBucketCredentials',
                request_serializer=registry__pb2.AddBucketCredentialsRequest.SerializeToString,
                response_deserializer=registry__pb2.AddBucketCredentialsResponse.FromString,
                )
        self.AddAPICredentials = channel.unary_unary(
                '/PublicRegistry/AddAPICredentials',
                request_serializer=registry__pb2.AddAPICredentialsRequest.SerializeToString,
                response_deserializer=registry__pb2.AddAPICredentialsResponse.FromString,
                )
        self.APICredentials = channel.unary_unary(
                '/PublicRegistry/APICredentials',
                request_serializer=registry__pb2.APICredentialsRequest.SerializeToString,
                response_deserializer=registry__pb2.APICredentialsResponse.FromString,
                )
        self.LoadTerminal = channel.unary_unary(
                '/PublicRegistry/LoadTerminal',
                request_serializer=registry__pb2.LoadTerminalRequest.SerializeToString,
                response_deserializer=registry__pb2.LoadTerminalResponse.FromString,
                )
        self.SaveTerminal = channel.unary_unary(
                '/PublicRegistry/SaveTerminal',
                request_serializer=registry__pb2.SaveTerminalRequest.SerializeToString,
                response_deserializer=registry__pb2.SaveTerminalResponse.FromString,
                )
        self.Certificate = channel.unary_unary(
                '/PublicRegistry/Certificate',
                request_serializer=registry__pb2.CertificateRequest.SerializeToString,
                response_deserializer=registry__pb2.CertificateResponse.FromString,
                )
        self.Licenses = channel.unary_unary(
                '/PublicRegistry/Licenses',
                request_serializer=registry__pb2.LicensesRequest.SerializeToString,
                response_deserializer=registry__pb2.LicensesResponse.FromString,
                )
        self.Invoices = channel.unary_unary(
                '/PublicRegistry/Invoices',
                request_serializer=registry__pb2.InvoicesRequest.SerializeToString,
                response_deserializer=registry__pb2.InvoicesResponse.FromString,
                )
        self.DownloadLauncher = channel.unary_stream(
                '/PublicRegistry/DownloadLauncher',
                request_serializer=registry__pb2.DownloadLauncherRequest.SerializeToString,
                response_deserializer=registry__pb2.DownloadChunk.FromString,
                )
        self.DownloadInvoice = channel.unary_unary(
                '/PublicRegistry/DownloadInvoice',
                request_serializer=registry__pb2.DownloadInvoiceRequest.SerializeToString,
                response_deserializer=registry__pb2.DownloadInvoiceResponse.FromString,
                )
        self.Security = channel.unary_unary(
                '/PublicRegistry/Security',
                request_serializer=registry__pb2.SecurityRequest.SerializeToString,
                response_deserializer=registry__pb2.SecurityResponse.FromString,
                )
        self.Securities = channel.unary_unary(
                '/PublicRegistry/Securities',
                request_serializer=registry__pb2.SecuritiesRequest.SerializeToString,
                response_deserializer=registry__pb2.SecuritiesResponse.FromString,
                )
        self.Assets = channel.unary_unary(
                '/PublicRegistry/Assets',
                request_serializer=registry__pb2.AssetsRequest.SerializeToString,
                response_deserializer=registry__pb2.AssetsResponse.FromString,
                )
        self.ProtocolAssets = channel.unary_unary(
                '/PublicRegistry/ProtocolAssets',
                request_serializer=registry__pb2.ProtocolAssetsRequest.SerializeToString,
                response_deserializer=registry__pb2.ProtocolAssetsResponse.FromString,
                )


class PublicRegistryServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EmailConfirm(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PasswordUpdate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PasswordReset(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Unsubscribe(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EmailUpdate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CustomerInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CustomerDetailsUpdate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PaymentMethodUpdate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LicenseUsage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddTerminal(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RenewTerminal(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddBucketCredentials(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddAPICredentials(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def APICredentials(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LoadTerminal(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SaveTerminal(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Certificate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Licenses(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Invoices(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DownloadLauncher(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DownloadInvoice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Security(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Securities(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Assets(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProtocolAssets(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PublicRegistryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Register': grpc.unary_unary_rpc_method_handler(
                    servicer.Register,
                    request_deserializer=registry__pb2.RegisterRequest.FromString,
                    response_serializer=registry__pb2.RegisterResponse.SerializeToString,
            ),
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=registry__pb2.LoginRequest.FromString,
                    response_serializer=registry__pb2.LoginResponse.SerializeToString,
            ),
            'EmailConfirm': grpc.unary_unary_rpc_method_handler(
                    servicer.EmailConfirm,
                    request_deserializer=registry__pb2.EmailConfirmRequest.FromString,
                    response_serializer=registry__pb2.EmailConfirmResponse.SerializeToString,
            ),
            'PasswordUpdate': grpc.unary_unary_rpc_method_handler(
                    servicer.PasswordUpdate,
                    request_deserializer=registry__pb2.PasswordUpdateRequest.FromString,
                    response_serializer=registry__pb2.PasswordUpdateResponse.SerializeToString,
            ),
            'PasswordReset': grpc.unary_unary_rpc_method_handler(
                    servicer.PasswordReset,
                    request_deserializer=registry__pb2.PasswordResetRequest.FromString,
                    response_serializer=registry__pb2.PasswordResetResponse.SerializeToString,
            ),
            'Unsubscribe': grpc.unary_unary_rpc_method_handler(
                    servicer.Unsubscribe,
                    request_deserializer=registry__pb2.UnsubscribeRequest.FromString,
                    response_serializer=registry__pb2.UnsubscribeResponse.SerializeToString,
            ),
            'EmailUpdate': grpc.unary_unary_rpc_method_handler(
                    servicer.EmailUpdate,
                    request_deserializer=registry__pb2.EmailUpdateRequest.FromString,
                    response_serializer=registry__pb2.EmailUpdateResponse.SerializeToString,
            ),
            'CustomerInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.CustomerInfo,
                    request_deserializer=registry__pb2.CustomerInfoRequest.FromString,
                    response_serializer=registry__pb2.CustomerInfoResponse.SerializeToString,
            ),
            'CustomerDetailsUpdate': grpc.unary_unary_rpc_method_handler(
                    servicer.CustomerDetailsUpdate,
                    request_deserializer=registry__pb2.CustomerDetailsUpdateRequest.FromString,
                    response_serializer=registry__pb2.CustomerDetailsUpdateResponse.SerializeToString,
            ),
            'PaymentMethodUpdate': grpc.unary_unary_rpc_method_handler(
                    servicer.PaymentMethodUpdate,
                    request_deserializer=registry__pb2.PaymentMethodUpdateRequest.FromString,
                    response_serializer=registry__pb2.PaymentMethodUpdateResponse.SerializeToString,
            ),
            'LicenseUsage': grpc.unary_unary_rpc_method_handler(
                    servicer.LicenseUsage,
                    request_deserializer=registry__pb2.LicenseUsageRequest.FromString,
                    response_serializer=registry__pb2.LicenseUsageResponse.SerializeToString,
            ),
            'AddTerminal': grpc.unary_unary_rpc_method_handler(
                    servicer.AddTerminal,
                    request_deserializer=registry__pb2.AddTerminalRequest.FromString,
                    response_serializer=registry__pb2.AddTerminalResponse.SerializeToString,
            ),
            'RenewTerminal': grpc.unary_unary_rpc_method_handler(
                    servicer.RenewTerminal,
                    request_deserializer=registry__pb2.RenewTerminalRequest.FromString,
                    response_serializer=registry__pb2.RenewTerminalResponse.SerializeToString,
            ),
            'AddBucketCredentials': grpc.unary_unary_rpc_method_handler(
                    servicer.AddBucketCredentials,
                    request_deserializer=registry__pb2.AddBucketCredentialsRequest.FromString,
                    response_serializer=registry__pb2.AddBucketCredentialsResponse.SerializeToString,
            ),
            'AddAPICredentials': grpc.unary_unary_rpc_method_handler(
                    servicer.AddAPICredentials,
                    request_deserializer=registry__pb2.AddAPICredentialsRequest.FromString,
                    response_serializer=registry__pb2.AddAPICredentialsResponse.SerializeToString,
            ),
            'APICredentials': grpc.unary_unary_rpc_method_handler(
                    servicer.APICredentials,
                    request_deserializer=registry__pb2.APICredentialsRequest.FromString,
                    response_serializer=registry__pb2.APICredentialsResponse.SerializeToString,
            ),
            'LoadTerminal': grpc.unary_unary_rpc_method_handler(
                    servicer.LoadTerminal,
                    request_deserializer=registry__pb2.LoadTerminalRequest.FromString,
                    response_serializer=registry__pb2.LoadTerminalResponse.SerializeToString,
            ),
            'SaveTerminal': grpc.unary_unary_rpc_method_handler(
                    servicer.SaveTerminal,
                    request_deserializer=registry__pb2.SaveTerminalRequest.FromString,
                    response_serializer=registry__pb2.SaveTerminalResponse.SerializeToString,
            ),
            'Certificate': grpc.unary_unary_rpc_method_handler(
                    servicer.Certificate,
                    request_deserializer=registry__pb2.CertificateRequest.FromString,
                    response_serializer=registry__pb2.CertificateResponse.SerializeToString,
            ),
            'Licenses': grpc.unary_unary_rpc_method_handler(
                    servicer.Licenses,
                    request_deserializer=registry__pb2.LicensesRequest.FromString,
                    response_serializer=registry__pb2.LicensesResponse.SerializeToString,
            ),
            'Invoices': grpc.unary_unary_rpc_method_handler(
                    servicer.Invoices,
                    request_deserializer=registry__pb2.InvoicesRequest.FromString,
                    response_serializer=registry__pb2.InvoicesResponse.SerializeToString,
            ),
            'DownloadLauncher': grpc.unary_stream_rpc_method_handler(
                    servicer.DownloadLauncher,
                    request_deserializer=registry__pb2.DownloadLauncherRequest.FromString,
                    response_serializer=registry__pb2.DownloadChunk.SerializeToString,
            ),
            'DownloadInvoice': grpc.unary_unary_rpc_method_handler(
                    servicer.DownloadInvoice,
                    request_deserializer=registry__pb2.DownloadInvoiceRequest.FromString,
                    response_serializer=registry__pb2.DownloadInvoiceResponse.SerializeToString,
            ),
            'Security': grpc.unary_unary_rpc_method_handler(
                    servicer.Security,
                    request_deserializer=registry__pb2.SecurityRequest.FromString,
                    response_serializer=registry__pb2.SecurityResponse.SerializeToString,
            ),
            'Securities': grpc.unary_unary_rpc_method_handler(
                    servicer.Securities,
                    request_deserializer=registry__pb2.SecuritiesRequest.FromString,
                    response_serializer=registry__pb2.SecuritiesResponse.SerializeToString,
            ),
            'Assets': grpc.unary_unary_rpc_method_handler(
                    servicer.Assets,
                    request_deserializer=registry__pb2.AssetsRequest.FromString,
                    response_serializer=registry__pb2.AssetsResponse.SerializeToString,
            ),
            'ProtocolAssets': grpc.unary_unary_rpc_method_handler(
                    servicer.ProtocolAssets,
                    request_deserializer=registry__pb2.ProtocolAssetsRequest.FromString,
                    response_serializer=registry__pb2.ProtocolAssetsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'PublicRegistry', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PublicRegistry(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PublicRegistry/Register',
            registry__pb2.RegisterRequest.SerializeToString,
            registry__pb2.RegisterResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PublicRegistry/Login',
            registry__pb2.LoginRequest.SerializeToString,
            registry__pb2.LoginResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EmailConfirm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PublicRegistry/EmailConfirm',
            registry__pb2.EmailConfirmRequest.SerializeToString,
            registry__pb2.EmailConfirmResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PasswordUpdate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PublicRegistry/PasswordUpdate',
            registry__pb2.PasswordUpdateRequest.SerializeToString,
            registry__pb2.PasswordUpdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PasswordReset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PublicRegistry/PasswordReset',
            registry__pb2.PasswordResetRequest.SerializeToString,
            registry__pb2.PasswordResetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Unsubscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PublicRegistry/Unsubscribe',
            registry__pb2.UnsubscribeRequest.SerializeToString,
            registry__pb2.UnsubscribeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EmailUpdate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PublicRegistry/EmailUpdate',
            registry__pb2.EmailUpdateRequest.SerializeToString,
            registry__pb2.EmailUpdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CustomerInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PublicRegistry/CustomerInfo',
            registry__pb2.CustomerInfoRequest.SerializeToString,
            registry__pb2.CustomerInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CustomerDetailsUpdate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PublicRegistry/CustomerDetailsUpdate',
            registry__pb2.CustomerDetailsUpdateRequest.SerializeToString,
            registry__pb2.CustomerDetailsUpdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PaymentMethodUpdate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PublicRegistry/PaymentMethodUpdate',
            registry__pb2.PaymentMethodUpdateRequest.SerializeToString,
            registry__pb2.PaymentMethodUpdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LicenseUsage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PublicRegistry/LicenseUsage',
            registry__pb2.LicenseUsageRequest.SerializeToString,
            registry__pb2.LicenseUsageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddTerminal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PublicRegistry/AddTerminal',
            registry__pb2.AddTerminalRequest.SerializeToString,
            registry__pb2.AddTerminalResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RenewTerminal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PublicRegistry/RenewTerminal',
            registry__pb2.RenewTerminalRequest.SerializeToString,
            registry__pb2.RenewTerminalResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddBucketCredentials(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PublicRegistry/AddBucketCredentials',
            registry__pb2.AddBucketCredentialsRequest.SerializeToString,
            registry__pb2.AddBucketCredentialsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddAPICredentials(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PublicRegistry/AddAPICredentials',
            registry__pb2.AddAPICredentialsRequest.SerializeToString,
            registry__pb2.AddAPICredentialsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def APICredentials(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PublicRegistry/APICredentials',
            registry__pb2.APICredentialsRequest.SerializeToString,
            registry__pb2.APICredentialsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LoadTerminal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PublicRegistry/LoadTerminal',
            registry__pb2.LoadTerminalRequest.SerializeToString,
            registry__pb2.LoadTerminalResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SaveTerminal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PublicRegistry/SaveTerminal',
            registry__pb2.SaveTerminalRequest.SerializeToString,
            registry__pb2.SaveTerminalResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Certificate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PublicRegistry/Certificate',
            registry__pb2.CertificateRequest.SerializeToString,
            registry__pb2.CertificateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Licenses(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PublicRegistry/Licenses',
            registry__pb2.LicensesRequest.SerializeToString,
            registry__pb2.LicensesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Invoices(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PublicRegistry/Invoices',
            registry__pb2.InvoicesRequest.SerializeToString,
            registry__pb2.InvoicesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DownloadLauncher(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/PublicRegistry/DownloadLauncher',
            registry__pb2.DownloadLauncherRequest.SerializeToString,
            registry__pb2.DownloadChunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DownloadInvoice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PublicRegistry/DownloadInvoice',
            registry__pb2.DownloadInvoiceRequest.SerializeToString,
            registry__pb2.DownloadInvoiceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Security(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PublicRegistry/Security',
            registry__pb2.SecurityRequest.SerializeToString,
            registry__pb2.SecurityResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Securities(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PublicRegistry/Securities',
            registry__pb2.SecuritiesRequest.SerializeToString,
            registry__pb2.SecuritiesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Assets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PublicRegistry/Assets',
            registry__pb2.AssetsRequest.SerializeToString,
            registry__pb2.AssetsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ProtocolAssets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PublicRegistry/ProtocolAssets',
            registry__pb2.ProtocolAssetsRequest.SerializeToString,
            registry__pb2.ProtocolAssetsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
