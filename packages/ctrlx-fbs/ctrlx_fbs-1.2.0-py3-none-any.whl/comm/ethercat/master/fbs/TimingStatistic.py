# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TimingStatistic(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TimingStatistic()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTimingStatistic(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TimingStatistic
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TimingStatistic
    def Minimum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # TimingStatistic
    def Maximum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # TimingStatistic
    def Current(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def TimingStatisticStart(builder): builder.StartObject(3)
def Start(builder):
    return TimingStatisticStart(builder)
def TimingStatisticAddMinimum(builder, minimum): builder.PrependInt64Slot(0, minimum, 0)
def AddMinimum(builder, minimum):
    return TimingStatisticAddMinimum(builder, minimum)
def TimingStatisticAddMaximum(builder, maximum): builder.PrependInt64Slot(1, maximum, 0)
def AddMaximum(builder, maximum):
    return TimingStatisticAddMaximum(builder, maximum)
def TimingStatisticAddCurrent(builder, current): builder.PrependInt64Slot(2, current, 0)
def AddCurrent(builder, current):
    return TimingStatisticAddCurrent(builder, current)
def TimingStatisticEnd(builder): return builder.EndObject()
def End(builder):
    return TimingStatisticEnd(builder)

class TimingStatisticT(object):

    # TimingStatisticT
    def __init__(self):
        self.minimum = 0  # type: int
        self.maximum = 0  # type: int
        self.current = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        timingStatistic = TimingStatistic()
        timingStatistic.Init(buf, pos)
        return cls.InitFromObj(timingStatistic)

    @classmethod
    def InitFromObj(cls, timingStatistic):
        x = TimingStatisticT()
        x._UnPack(timingStatistic)
        return x

    # TimingStatisticT
    def _UnPack(self, timingStatistic):
        if timingStatistic is None:
            return
        self.minimum = timingStatistic.Minimum()
        self.maximum = timingStatistic.Maximum()
        self.current = timingStatistic.Current()

    # TimingStatisticT
    def Pack(self, builder):
        TimingStatisticStart(builder)
        TimingStatisticAddMinimum(builder, self.minimum)
        TimingStatisticAddMaximum(builder, self.maximum)
        TimingStatisticAddCurrent(builder, self.current)
        timingStatistic = TimingStatisticEnd(builder)
        return timingStatistic
