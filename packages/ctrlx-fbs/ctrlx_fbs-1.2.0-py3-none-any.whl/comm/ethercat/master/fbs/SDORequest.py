# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SDORequest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SDORequest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSDORequest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SDORequest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SDORequest
    def AddressType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # SDORequest
    def Address(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # SDORequest
    def ObjectIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # SDORequest
    def SubIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # SDORequest
    def Flags(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # SDORequest
    def Data(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # SDORequest
    def DataAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # SDORequest
    def DataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SDORequest
    def DataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # SDORequest
    def MaxLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def SDORequestStart(builder): builder.StartObject(7)
def Start(builder):
    return SDORequestStart(builder)
def SDORequestAddAddressType(builder, addressType): builder.PrependUint8Slot(0, addressType, 0)
def AddAddressType(builder, addressType):
    return SDORequestAddAddressType(builder, addressType)
def SDORequestAddAddress(builder, address): builder.PrependUint16Slot(1, address, 0)
def AddAddress(builder, address):
    return SDORequestAddAddress(builder, address)
def SDORequestAddObjectIndex(builder, objectIndex): builder.PrependUint16Slot(2, objectIndex, 0)
def AddObjectIndex(builder, objectIndex):
    return SDORequestAddObjectIndex(builder, objectIndex)
def SDORequestAddSubIndex(builder, subIndex): builder.PrependUint8Slot(3, subIndex, 0)
def AddSubIndex(builder, subIndex):
    return SDORequestAddSubIndex(builder, subIndex)
def SDORequestAddFlags(builder, flags): builder.PrependUint32Slot(4, flags, 0)
def AddFlags(builder, flags):
    return SDORequestAddFlags(builder, flags)
def SDORequestAddData(builder, data): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0)
def AddData(builder, data):
    return SDORequestAddData(builder, data)
def SDORequestStartDataVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartDataVector(builder, numElems):
    return SDORequestStartDataVector(builder, numElems)
def SDORequestAddMaxLength(builder, maxLength): builder.PrependUint32Slot(6, maxLength, 0)
def AddMaxLength(builder, maxLength):
    return SDORequestAddMaxLength(builder, maxLength)
def SDORequestEnd(builder): return builder.EndObject()
def End(builder):
    return SDORequestEnd(builder)
try:
    from typing import List
except:
    pass

class SDORequestT(object):

    # SDORequestT
    def __init__(self):
        self.addressType = 0  # type: int
        self.address = 0  # type: int
        self.objectIndex = 0  # type: int
        self.subIndex = 0  # type: int
        self.flags = 0  # type: int
        self.data = None  # type: List[int]
        self.maxLength = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        sDORequest = SDORequest()
        sDORequest.Init(buf, pos)
        return cls.InitFromObj(sDORequest)

    @classmethod
    def InitFromObj(cls, sDORequest):
        x = SDORequestT()
        x._UnPack(sDORequest)
        return x

    # SDORequestT
    def _UnPack(self, sDORequest):
        if sDORequest is None:
            return
        self.addressType = sDORequest.AddressType()
        self.address = sDORequest.Address()
        self.objectIndex = sDORequest.ObjectIndex()
        self.subIndex = sDORequest.SubIndex()
        self.flags = sDORequest.Flags()
        if not sDORequest.DataIsNone():
            if np is None:
                self.data = []
                for i in range(sDORequest.DataLength()):
                    self.data.append(sDORequest.Data(i))
            else:
                self.data = sDORequest.DataAsNumpy()
        self.maxLength = sDORequest.MaxLength()

    # SDORequestT
    def Pack(self, builder):
        if self.data is not None:
            if np is not None and type(self.data) is np.ndarray:
                data = builder.CreateNumpyVector(self.data)
            else:
                SDORequestStartDataVector(builder, len(self.data))
                for i in reversed(range(len(self.data))):
                    builder.PrependUint8(self.data[i])
                data = builder.EndVector()
        SDORequestStart(builder)
        SDORequestAddAddressType(builder, self.addressType)
        SDORequestAddAddress(builder, self.address)
        SDORequestAddObjectIndex(builder, self.objectIndex)
        SDORequestAddSubIndex(builder, self.subIndex)
        SDORequestAddFlags(builder, self.flags)
        if self.data is not None:
            SDORequestAddData(builder, data)
        SDORequestAddMaxLength(builder, self.maxLength)
        sDORequest = SDORequestEnd(builder)
        return sDORequest
