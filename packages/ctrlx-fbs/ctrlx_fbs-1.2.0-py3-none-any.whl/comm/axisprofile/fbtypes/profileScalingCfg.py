# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class profileScalingCfg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = profileScalingCfg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsprofileScalingCfg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # profileScalingCfg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # profileScalingCfg
    def ScalingStrategy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.axisprofile.fbtypes.profileScalingStrategy import profileScalingStrategy
            obj = profileScalingStrategy()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # profileScalingCfg
    def ScalingType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.axisprofile.fbtypes.profileDeviceScalingType import profileDeviceScalingType
            obj = profileDeviceScalingType()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # profileScalingCfg
    def Nominator(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # profileScalingCfg
    def Denominator(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # profileScalingCfg
    def Resolution(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def profileScalingCfgStart(builder): builder.StartObject(5)
def Start(builder):
    return profileScalingCfgStart(builder)
def profileScalingCfgAddScalingStrategy(builder, scalingStrategy): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(scalingStrategy), 0)
def AddScalingStrategy(builder, scalingStrategy):
    return profileScalingCfgAddScalingStrategy(builder, scalingStrategy)
def profileScalingCfgAddScalingType(builder, scalingType): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(scalingType), 0)
def AddScalingType(builder, scalingType):
    return profileScalingCfgAddScalingType(builder, scalingType)
def profileScalingCfgAddNominator(builder, nominator): builder.PrependUint32Slot(2, nominator, 0)
def AddNominator(builder, nominator):
    return profileScalingCfgAddNominator(builder, nominator)
def profileScalingCfgAddDenominator(builder, denominator): builder.PrependUint32Slot(3, denominator, 0)
def AddDenominator(builder, denominator):
    return profileScalingCfgAddDenominator(builder, denominator)
def profileScalingCfgAddResolution(builder, resolution): builder.PrependUint32Slot(4, resolution, 0)
def AddResolution(builder, resolution):
    return profileScalingCfgAddResolution(builder, resolution)
def profileScalingCfgEnd(builder): return builder.EndObject()
def End(builder):
    return profileScalingCfgEnd(builder)
import comm.axisprofile.fbtypes.profileDeviceScalingType
import comm.axisprofile.fbtypes.profileScalingStrategy
try:
    from typing import Optional
except:
    pass

class profileScalingCfgT(object):

    # profileScalingCfgT
    def __init__(self):
        self.scalingStrategy = None  # type: Optional[comm.axisprofile.fbtypes.profileScalingStrategy.profileScalingStrategyT]
        self.scalingType = None  # type: Optional[comm.axisprofile.fbtypes.profileDeviceScalingType.profileDeviceScalingTypeT]
        self.nominator = 0  # type: int
        self.denominator = 0  # type: int
        self.resolution = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        profileScalingCfg = profileScalingCfg()
        profileScalingCfg.Init(buf, pos)
        return cls.InitFromObj(profileScalingCfg)

    @classmethod
    def InitFromObj(cls, profileScalingCfg):
        x = profileScalingCfgT()
        x._UnPack(profileScalingCfg)
        return x

    # profileScalingCfgT
    def _UnPack(self, profileScalingCfg):
        if profileScalingCfg is None:
            return
        if profileScalingCfg.ScalingStrategy() is not None:
            self.scalingStrategy = comm.axisprofile.fbtypes.profileScalingStrategy.profileScalingStrategyT.InitFromObj(profileScalingCfg.ScalingStrategy())
        if profileScalingCfg.ScalingType() is not None:
            self.scalingType = comm.axisprofile.fbtypes.profileDeviceScalingType.profileDeviceScalingTypeT.InitFromObj(profileScalingCfg.ScalingType())
        self.nominator = profileScalingCfg.Nominator()
        self.denominator = profileScalingCfg.Denominator()
        self.resolution = profileScalingCfg.Resolution()

    # profileScalingCfgT
    def Pack(self, builder):
        if self.scalingStrategy is not None:
            scalingStrategy = self.scalingStrategy.Pack(builder)
        if self.scalingType is not None:
            scalingType = self.scalingType.Pack(builder)
        profileScalingCfgStart(builder)
        if self.scalingStrategy is not None:
            profileScalingCfgAddScalingStrategy(builder, scalingStrategy)
        if self.scalingType is not None:
            profileScalingCfgAddScalingType(builder, scalingType)
        profileScalingCfgAddNominator(builder, self.nominator)
        profileScalingCfgAddDenominator(builder, self.denominator)
        profileScalingCfgAddResolution(builder, self.resolution)
        profileScalingCfg = profileScalingCfgEnd(builder)
        return profileScalingCfg
