# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ArrayOfUInt8(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ArrayOfUInt8()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsArrayOfUInt8(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ArrayOfUInt8
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ArrayOfUInt8
    def Value(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # ArrayOfUInt8
    def ValueAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # ArrayOfUInt8
    def ValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ArrayOfUInt8
    def ValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def ArrayOfUInt8Start(builder): builder.StartObject(1)
def Start(builder):
    return ArrayOfUInt8Start(builder)
def ArrayOfUInt8AddValue(builder, value): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)
def AddValue(builder, value):
    return ArrayOfUInt8AddValue(builder, value)
def ArrayOfUInt8StartValueVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartValueVector(builder, numElems):
    return ArrayOfUInt8StartValueVector(builder, numElems)
def ArrayOfUInt8End(builder): return builder.EndObject()
def End(builder):
    return ArrayOfUInt8End(builder)
try:
    from typing import List
except:
    pass

class ArrayOfUInt8T(object):

    # ArrayOfUInt8T
    def __init__(self):
        self.value = None  # type: List[int]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        arrayOfUInt8 = ArrayOfUInt8()
        arrayOfUInt8.Init(buf, pos)
        return cls.InitFromObj(arrayOfUInt8)

    @classmethod
    def InitFromObj(cls, arrayOfUInt8):
        x = ArrayOfUInt8T()
        x._UnPack(arrayOfUInt8)
        return x

    # ArrayOfUInt8T
    def _UnPack(self, arrayOfUInt8):
        if arrayOfUInt8 is None:
            return
        if not arrayOfUInt8.ValueIsNone():
            if np is None:
                self.value = []
                for i in range(arrayOfUInt8.ValueLength()):
                    self.value.append(arrayOfUInt8.Value(i))
            else:
                self.value = arrayOfUInt8.ValueAsNumpy()

    # ArrayOfUInt8T
    def Pack(self, builder):
        if self.value is not None:
            if np is not None and type(self.value) is np.ndarray:
                value = builder.CreateNumpyVector(self.value)
            else:
                ArrayOfUInt8StartValueVector(builder, len(self.value))
                for i in reversed(range(len(self.value))):
                    builder.PrependUint8(self.value[i])
                value = builder.EndVector()
        ArrayOfUInt8Start(builder)
        if self.value is not None:
            ArrayOfUInt8AddValue(builder, value)
        arrayOfUInt8 = ArrayOfUInt8End(builder)
        return arrayOfUInt8
