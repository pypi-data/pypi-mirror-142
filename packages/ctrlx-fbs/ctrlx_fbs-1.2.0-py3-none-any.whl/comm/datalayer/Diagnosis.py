# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Diagnosis(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Diagnosis()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDiagnosis(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Diagnosis
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Diagnosis
    def MainDiagnosisCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Diagnosis
    def DetailedDiagnosisCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Diagnosis
    def DynamicDescription(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Diagnosis
    def Entity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def DiagnosisStart(builder): builder.StartObject(4)
def Start(builder):
    return DiagnosisStart(builder)
def DiagnosisAddMainDiagnosisCode(builder, mainDiagnosisCode): builder.PrependUint32Slot(0, mainDiagnosisCode, 0)
def AddMainDiagnosisCode(builder, mainDiagnosisCode):
    return DiagnosisAddMainDiagnosisCode(builder, mainDiagnosisCode)
def DiagnosisAddDetailedDiagnosisCode(builder, detailedDiagnosisCode): builder.PrependUint32Slot(1, detailedDiagnosisCode, 0)
def AddDetailedDiagnosisCode(builder, detailedDiagnosisCode):
    return DiagnosisAddDetailedDiagnosisCode(builder, detailedDiagnosisCode)
def DiagnosisAddDynamicDescription(builder, dynamicDescription): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(dynamicDescription), 0)
def AddDynamicDescription(builder, dynamicDescription):
    return DiagnosisAddDynamicDescription(builder, dynamicDescription)
def DiagnosisAddEntity(builder, entity): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(entity), 0)
def AddEntity(builder, entity):
    return DiagnosisAddEntity(builder, entity)
def DiagnosisEnd(builder): return builder.EndObject()
def End(builder):
    return DiagnosisEnd(builder)

class DiagnosisT(object):

    # DiagnosisT
    def __init__(self):
        self.mainDiagnosisCode = 0  # type: int
        self.detailedDiagnosisCode = 0  # type: int
        self.dynamicDescription = None  # type: str
        self.entity = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        diagnosis = Diagnosis()
        diagnosis.Init(buf, pos)
        return cls.InitFromObj(diagnosis)

    @classmethod
    def InitFromObj(cls, diagnosis):
        x = DiagnosisT()
        x._UnPack(diagnosis)
        return x

    # DiagnosisT
    def _UnPack(self, diagnosis):
        if diagnosis is None:
            return
        self.mainDiagnosisCode = diagnosis.MainDiagnosisCode()
        self.detailedDiagnosisCode = diagnosis.DetailedDiagnosisCode()
        self.dynamicDescription = diagnosis.DynamicDescription()
        self.entity = diagnosis.Entity()

    # DiagnosisT
    def Pack(self, builder):
        if self.dynamicDescription is not None:
            dynamicDescription = builder.CreateString(self.dynamicDescription)
        if self.entity is not None:
            entity = builder.CreateString(self.entity)
        DiagnosisStart(builder)
        DiagnosisAddMainDiagnosisCode(builder, self.mainDiagnosisCode)
        DiagnosisAddDetailedDiagnosisCode(builder, self.detailedDiagnosisCode)
        if self.dynamicDescription is not None:
            DiagnosisAddDynamicDescription(builder, dynamicDescription)
        if self.entity is not None:
            DiagnosisAddEntity(builder, entity)
        diagnosis = DiagnosisEnd(builder)
        return diagnosis
