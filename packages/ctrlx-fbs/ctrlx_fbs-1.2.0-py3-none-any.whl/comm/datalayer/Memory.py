# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Memory(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Memory()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMemory(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Memory
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Memory
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Memory
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Memory
    def SizeBytes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def MemoryStart(builder): builder.StartObject(3)
def Start(builder):
    return MemoryStart(builder)
def MemoryAddType(builder, type): builder.PrependInt8Slot(0, type, 0)
def AddType(builder, type):
    return MemoryAddType(builder, type)
def MemoryAddId(builder, id): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)
def AddId(builder, id):
    return MemoryAddId(builder, id)
def MemoryAddSizeBytes(builder, sizeBytes): builder.PrependUint32Slot(2, sizeBytes, 0)
def AddSizeBytes(builder, sizeBytes):
    return MemoryAddSizeBytes(builder, sizeBytes)
def MemoryEnd(builder): return builder.EndObject()
def End(builder):
    return MemoryEnd(builder)

class MemoryT(object):

    # MemoryT
    def __init__(self):
        self.type = 0  # type: int
        self.id = None  # type: str
        self.sizeBytes = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        memory = Memory()
        memory.Init(buf, pos)
        return cls.InitFromObj(memory)

    @classmethod
    def InitFromObj(cls, memory):
        x = MemoryT()
        x._UnPack(memory)
        return x

    # MemoryT
    def _UnPack(self, memory):
        if memory is None:
            return
        self.type = memory.Type()
        self.id = memory.Id()
        self.sizeBytes = memory.SizeBytes()

    # MemoryT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        MemoryStart(builder)
        MemoryAddType(builder, self.type)
        if self.id is not None:
            MemoryAddId(builder, id)
        MemoryAddSizeBytes(builder, self.sizeBytes)
        memory = MemoryEnd(builder)
        return memory
