# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# data of a single axis transformation set
class KinCfgAxsTrafoSet(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinCfgAxsTrafoSet()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsKinCfgAxsTrafoSet(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # KinCfgAxsTrafoSet
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # name of the axis transformation set
    # KinCfgAxsTrafoSet
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # name of the axis transformation
    # KinCfgAxsTrafoSet
    def AxsTrafo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # configuration parameter of the axis transformation
    # KinCfgAxsTrafoSet
    def Param(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.KinCfgAxsTrafoAllParam import KinCfgAxsTrafoAllParam
            obj = KinCfgAxsTrafoAllParam()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def KinCfgAxsTrafoSetStart(builder): builder.StartObject(3)
def Start(builder):
    return KinCfgAxsTrafoSetStart(builder)
def KinCfgAxsTrafoSetAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return KinCfgAxsTrafoSetAddName(builder, name)
def KinCfgAxsTrafoSetAddAxsTrafo(builder, axsTrafo): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(axsTrafo), 0)
def AddAxsTrafo(builder, axsTrafo):
    return KinCfgAxsTrafoSetAddAxsTrafo(builder, axsTrafo)
def KinCfgAxsTrafoSetAddParam(builder, param): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(param), 0)
def AddParam(builder, param):
    return KinCfgAxsTrafoSetAddParam(builder, param)
def KinCfgAxsTrafoSetEnd(builder): return builder.EndObject()
def End(builder):
    return KinCfgAxsTrafoSetEnd(builder)
import motion.core.fbtypes.KinCfgAxsTrafoAllParam
try:
    from typing import Optional
except:
    pass

class KinCfgAxsTrafoSetT(object):

    # KinCfgAxsTrafoSetT
    def __init__(self):
        self.name = None  # type: str
        self.axsTrafo = None  # type: str
        self.param = None  # type: Optional[motion.core.fbtypes.KinCfgAxsTrafoAllParam.KinCfgAxsTrafoAllParamT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kinCfgAxsTrafoSet = KinCfgAxsTrafoSet()
        kinCfgAxsTrafoSet.Init(buf, pos)
        return cls.InitFromObj(kinCfgAxsTrafoSet)

    @classmethod
    def InitFromObj(cls, kinCfgAxsTrafoSet):
        x = KinCfgAxsTrafoSetT()
        x._UnPack(kinCfgAxsTrafoSet)
        return x

    # KinCfgAxsTrafoSetT
    def _UnPack(self, kinCfgAxsTrafoSet):
        if kinCfgAxsTrafoSet is None:
            return
        self.name = kinCfgAxsTrafoSet.Name()
        self.axsTrafo = kinCfgAxsTrafoSet.AxsTrafo()
        if kinCfgAxsTrafoSet.Param() is not None:
            self.param = motion.core.fbtypes.KinCfgAxsTrafoAllParam.KinCfgAxsTrafoAllParamT.InitFromObj(kinCfgAxsTrafoSet.Param())

    # KinCfgAxsTrafoSetT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.axsTrafo is not None:
            axsTrafo = builder.CreateString(self.axsTrafo)
        if self.param is not None:
            param = self.param.Pack(builder)
        KinCfgAxsTrafoSetStart(builder)
        if self.name is not None:
            KinCfgAxsTrafoSetAddName(builder, name)
        if self.axsTrafo is not None:
            KinCfgAxsTrafoSetAddAxsTrafo(builder, axsTrafo)
        if self.param is not None:
            KinCfgAxsTrafoSetAddParam(builder, param)
        kinCfgAxsTrafoSet = KinCfgAxsTrafoSetEnd(builder)
        return kinCfgAxsTrafoSet
