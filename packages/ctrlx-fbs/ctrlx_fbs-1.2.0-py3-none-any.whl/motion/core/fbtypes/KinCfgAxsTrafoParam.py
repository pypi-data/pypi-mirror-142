# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# data of a single configuration parameter of an axis transformation
class KinCfgAxsTrafoParam(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinCfgAxsTrafoParam()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsKinCfgAxsTrafoParam(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # KinCfgAxsTrafoParam
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Name of the parameter
    # KinCfgAxsTrafoParam
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Description of the parameter
    # KinCfgAxsTrafoParam
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Image (link) of the parameter
    # KinCfgAxsTrafoParam
    def Image(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Reference to the documentation of the parameter
    # KinCfgAxsTrafoParam
    def DocRef(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Group of the parameter (might be empty, when this parameter is not part of a group)
    # KinCfgAxsTrafoParam
    def Group(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Expected unit of the parameter (might be empty for unitless parameters
    # KinCfgAxsTrafoParam
    def Unit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Valid values for the parameter (when it's a string parameter and a kind of enumeration, else empty)
    # KinCfgAxsTrafoParam
    def Values(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # KinCfgAxsTrafoParam
    def ValuesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KinCfgAxsTrafoParam
    def ValuesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # Type of the variable
    # KinCfgAxsTrafoParam
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 1

def KinCfgAxsTrafoParamStart(builder): builder.StartObject(8)
def Start(builder):
    return KinCfgAxsTrafoParamStart(builder)
def KinCfgAxsTrafoParamAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return KinCfgAxsTrafoParamAddName(builder, name)
def KinCfgAxsTrafoParamAddDescription(builder, description): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)
def AddDescription(builder, description):
    return KinCfgAxsTrafoParamAddDescription(builder, description)
def KinCfgAxsTrafoParamAddImage(builder, image): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(image), 0)
def AddImage(builder, image):
    return KinCfgAxsTrafoParamAddImage(builder, image)
def KinCfgAxsTrafoParamAddDocRef(builder, docRef): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(docRef), 0)
def AddDocRef(builder, docRef):
    return KinCfgAxsTrafoParamAddDocRef(builder, docRef)
def KinCfgAxsTrafoParamAddGroup(builder, group): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(group), 0)
def AddGroup(builder, group):
    return KinCfgAxsTrafoParamAddGroup(builder, group)
def KinCfgAxsTrafoParamAddUnit(builder, unit): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(unit), 0)
def AddUnit(builder, unit):
    return KinCfgAxsTrafoParamAddUnit(builder, unit)
def KinCfgAxsTrafoParamAddValues(builder, values): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(values), 0)
def AddValues(builder, values):
    return KinCfgAxsTrafoParamAddValues(builder, values)
def KinCfgAxsTrafoParamStartValuesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartValuesVector(builder, numElems):
    return KinCfgAxsTrafoParamStartValuesVector(builder, numElems)
def KinCfgAxsTrafoParamAddType(builder, type): builder.PrependInt8Slot(7, type, 1)
def AddType(builder, type):
    return KinCfgAxsTrafoParamAddType(builder, type)
def KinCfgAxsTrafoParamEnd(builder): return builder.EndObject()
def End(builder):
    return KinCfgAxsTrafoParamEnd(builder)
try:
    from typing import List
except:
    pass

class KinCfgAxsTrafoParamT(object):

    # KinCfgAxsTrafoParamT
    def __init__(self):
        self.name = None  # type: str
        self.description = None  # type: str
        self.image = None  # type: str
        self.docRef = None  # type: str
        self.group = None  # type: str
        self.unit = None  # type: str
        self.values = None  # type: List[str]
        self.type = 1  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kinCfgAxsTrafoParam = KinCfgAxsTrafoParam()
        kinCfgAxsTrafoParam.Init(buf, pos)
        return cls.InitFromObj(kinCfgAxsTrafoParam)

    @classmethod
    def InitFromObj(cls, kinCfgAxsTrafoParam):
        x = KinCfgAxsTrafoParamT()
        x._UnPack(kinCfgAxsTrafoParam)
        return x

    # KinCfgAxsTrafoParamT
    def _UnPack(self, kinCfgAxsTrafoParam):
        if kinCfgAxsTrafoParam is None:
            return
        self.name = kinCfgAxsTrafoParam.Name()
        self.description = kinCfgAxsTrafoParam.Description()
        self.image = kinCfgAxsTrafoParam.Image()
        self.docRef = kinCfgAxsTrafoParam.DocRef()
        self.group = kinCfgAxsTrafoParam.Group()
        self.unit = kinCfgAxsTrafoParam.Unit()
        if not kinCfgAxsTrafoParam.ValuesIsNone():
            self.values = []
            for i in range(kinCfgAxsTrafoParam.ValuesLength()):
                self.values.append(kinCfgAxsTrafoParam.Values(i))
        self.type = kinCfgAxsTrafoParam.Type()

    # KinCfgAxsTrafoParamT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.description is not None:
            description = builder.CreateString(self.description)
        if self.image is not None:
            image = builder.CreateString(self.image)
        if self.docRef is not None:
            docRef = builder.CreateString(self.docRef)
        if self.group is not None:
            group = builder.CreateString(self.group)
        if self.unit is not None:
            unit = builder.CreateString(self.unit)
        if self.values is not None:
            valueslist = []
            for i in range(len(self.values)):
                valueslist.append(builder.CreateString(self.values[i]))
            KinCfgAxsTrafoParamStartValuesVector(builder, len(self.values))
            for i in reversed(range(len(self.values))):
                builder.PrependUOffsetTRelative(valueslist[i])
            values = builder.EndVector()
        KinCfgAxsTrafoParamStart(builder)
        if self.name is not None:
            KinCfgAxsTrafoParamAddName(builder, name)
        if self.description is not None:
            KinCfgAxsTrafoParamAddDescription(builder, description)
        if self.image is not None:
            KinCfgAxsTrafoParamAddImage(builder, image)
        if self.docRef is not None:
            KinCfgAxsTrafoParamAddDocRef(builder, docRef)
        if self.group is not None:
            KinCfgAxsTrafoParamAddGroup(builder, group)
        if self.unit is not None:
            KinCfgAxsTrafoParamAddUnit(builder, unit)
        if self.values is not None:
            KinCfgAxsTrafoParamAddValues(builder, values)
        KinCfgAxsTrafoParamAddType(builder, self.type)
        kinCfgAxsTrafoParam = KinCfgAxsTrafoParamEnd(builder)
        return kinCfgAxsTrafoParam
