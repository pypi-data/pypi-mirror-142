# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Callable(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Callable()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCallable(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Callable
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Callable
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Callable
    def Index(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Callable
    def Arguments(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Callable
    def ArgumentsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Callable
    def ArgumentsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # Callable
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def CallableStart(builder): builder.StartObject(4)
def Start(builder):
    return CallableStart(builder)
def CallableAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return CallableAddName(builder, name)
def CallableAddIndex(builder, index): builder.PrependUint32Slot(1, index, 0)
def AddIndex(builder, index):
    return CallableAddIndex(builder, index)
def CallableAddArguments(builder, arguments): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(arguments), 0)
def AddArguments(builder, arguments):
    return CallableAddArguments(builder, arguments)
def CallableStartArgumentsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartArgumentsVector(builder, numElems):
    return CallableStartArgumentsVector(builder, numElems)
def CallableAddId(builder, id): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)
def AddId(builder, id):
    return CallableAddId(builder, id)
def CallableEnd(builder): return builder.EndObject()
def End(builder):
    return CallableEnd(builder)
try:
    from typing import List
except:
    pass

class CallableT(object):

    # CallableT
    def __init__(self):
        self.name = None  # type: str
        self.index = 0  # type: int
        self.arguments = None  # type: List[str]
        self.id = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        callable = Callable()
        callable.Init(buf, pos)
        return cls.InitFromObj(callable)

    @classmethod
    def InitFromObj(cls, callable):
        x = CallableT()
        x._UnPack(callable)
        return x

    # CallableT
    def _UnPack(self, callable):
        if callable is None:
            return
        self.name = callable.Name()
        self.index = callable.Index()
        if not callable.ArgumentsIsNone():
            self.arguments = []
            for i in range(callable.ArgumentsLength()):
                self.arguments.append(callable.Arguments(i))
        self.id = callable.Id()

    # CallableT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.arguments is not None:
            argumentslist = []
            for i in range(len(self.arguments)):
                argumentslist.append(builder.CreateString(self.arguments[i]))
            CallableStartArgumentsVector(builder, len(self.arguments))
            for i in reversed(range(len(self.arguments))):
                builder.PrependUOffsetTRelative(argumentslist[i])
            arguments = builder.EndVector()
        if self.id is not None:
            id = builder.CreateString(self.id)
        CallableStart(builder)
        if self.name is not None:
            CallableAddName(builder, name)
        CallableAddIndex(builder, self.index)
        if self.arguments is not None:
            CallableAddArguments(builder, arguments)
        if self.id is not None:
            CallableAddId(builder, id)
        callable = CallableEnd(builder)
        return callable
